<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Collection继承结构</title>
      <link href="/2024/06/08/Java%20SE/28.%20Collection%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84/"/>
      <url>/2024/06/08/Java%20SE/28.%20Collection%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="Collection继承结构"><a href="#Collection继承结构" class="headerlink" title="Collection继承结构"></a>Collection继承结构</h1><ol><li><code>SequencedCollection </code>和<code> SequencedSet</code> 是 Java 21 中新增的接口。<ul><li><code>SequencedCollection </code>是一个扩展自 <code>Collection </code>的接口，表示元素是有顺序的集合。</li><li><code>SequencedSet </code>是一个扩展自<code>Set</code>的接口，同时也扩展了<code>SequencedCollection</code>接口。这意味着<code>SequencedSet</code>不仅是一个无重复元素的集合，并且这些元素是有顺序的。</li></ul></li><li>6个实现类中只有<code>HashSet</code>是无序集合。剩下的都是有序集合。<ul><li><strong>有序集合</strong>： 集合中存储的元素具有明确的顺序，可以通过下标访问，或者元素是按照某种排序规则排列的。</li><li><strong>无序集合</strong>： 集合中存储的元素没有明确的顺序，无法通过下标访问，也不按照任何排序规则排列。</li></ul></li></ol><h2 id="一、每个集合对应实现类的数据结构"><a href="#一、每个集合对应实现类的数据结构" class="headerlink" title="一、每个集合对应实现类的数据结构"></a>一、每个集合对应实现类的数据结构</h2><h3 id="1-1-有序集合"><a href="#1-1-有序集合" class="headerlink" title="1.1 有序集合"></a>1.1 有序集合</h3><ol><li><p><strong>LinkedList</strong>：</p><ul><li><strong>数据结构</strong>：双向链表。</li><li><strong>用途</strong>：支持在任意位置进行高效的插入和删除操作，但不专门设计为队列。尽管如此，由于其双向性质，它可以被用来实现队列等数据结构。</li></ul></li><li><p><strong>ArrayList</strong>：</p><ul><li><strong>数据结构</strong>：动态数组。</li><li><strong>特性</strong>：支持快速的随机访问，但在数组容量不足时，需要动态扩展数组大小。</li></ul></li><li><p><strong>Vector</strong>：</p><ul><li><strong>数据结构</strong>：动态数组。</li><li><strong>特性</strong>：与 <code>ArrayList</code> 类似，但同步化，适用于多线程环境。</li></ul></li><li><p><strong>LinkedHashSet</strong>：</p><ul><li><strong>数据结构</strong>：结合了哈希表和双向链表。</li><li><strong>特性</strong>：维护元素的插入顺序，同时提供基于哈希表的高效查询能力。</li></ul></li><li><p><strong>TreeSet</strong>：</p><ul><li><strong>数据结构</strong>：基于红黑树的实现。</li><li><strong>特性</strong>：自动排序，能够根据元素的自然顺序或自定义比较器来排序元素。</li></ul></li></ol><h3 id="1-2-无序集合"><a href="#1-2-无序集合" class="headerlink" title="1.2 无序集合"></a>1.2 无序集合</h3><ol><li><strong>HashSet</strong>：<ul><li><strong>数据结构</strong>：基于哈希表。</li><li><strong>特性</strong>：元素的存储顺序不保证，因此是无序的。提供高效的查找、插入和删除操作。</li></ul></li></ol><h2 id="二、List-与-Set-的可重复性"><a href="#二、List-与-Set-的可重复性" class="headerlink" title="二、List 与 Set 的可重复性"></a>二、List 与 Set 的可重复性</h2><p>您的理解基本正确，不过我来更准确地阐述一下 Java 集合框架中 <code>List</code> 和 <code>Set</code> 接口的行为：</p><h3 id="2-1-List-集合"><a href="#2-1-List-集合" class="headerlink" title="2.1 List 集合"></a>2.1 List 集合</h3><ul><li><strong>特点</strong>：<code>List</code> 接口允许存储的元素是有序的，并且允许元素重复。</li><li><strong>索引</strong>：元素在 <code>List</code> 中是有位置索引的，可以通过索引来访问元素。</li></ul><h3 id="2-2-Set-集合"><a href="#2-2-Set-集合" class="headerlink" title="2.2 Set 集合"></a>2.2 Set 集合</h3><ul><li><strong>特点</strong>：<code>Set</code> 接口存储的元素是唯一的（不可重复）。如果尝试添加重复的元素，集合会忽略这个操作。</li></ul><h2 id="三、Collection继承结构图"><a href="#三、Collection继承结构图" class="headerlink" title="三、Collection继承结构图"></a>三、Collection继承结构图</h2><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406082257104.png"  />]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java集合概述</title>
      <link href="/2024/06/08/Java%20SE/27.%20Java%E9%9B%86%E5%90%88%E6%A6%82%E8%BF%B0/"/>
      <url>/2024/06/08/Java%20SE/27.%20Java%E9%9B%86%E5%90%88%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a>集合概述</h1><h2 id="一、什么是集合，有什么用？"><a href="#一、什么是集合，有什么用？" class="headerlink" title="一、什么是集合，有什么用？"></a>一、什么是集合，有什么用？</h2><ol><li><p><strong>集合定义</strong>：集合是一种容器，用来组织和管理数据的。</p></li><li><p><strong>Java 集合框架</strong>：Java 的集合框架提供了一套类库，用以实现各种数据结构。这些实现为开发者提供了丰富的工具来处理数据。</p></li><li><p><strong>底层数据结构</strong>：每一个集合类底层采用的数据结构不同，例如：</p><ul><li><strong>ArrayList</strong>：底层采用数组。</li><li><strong>LinkedList</strong>：底层采用双向链表。</li><li><strong>HashMap</strong>：底层采用哈希表。</li><li><strong>TreeMap</strong>：底层采用红黑树。</li></ul></li></ol><p>我们不需要自己实现这些数据结构的细节，Java 集合框架已经为我们提供了这些实现。但我们需要了解在何种场合下选择哪一种集合以确保最高的效率。</p><h2 id="二、集合中存储的是对象引用而非对象本身"><a href="#二、集合中存储的是对象引用而非对象本身" class="headerlink" title="二、集合中存储的是对象引用而非对象本身"></a>二、集合中存储的是对象引用而非对象本身</h2><p>在Java中，集合存储的是对象的引用，而不是对象本身。<br>当你将一个对象添加到集合中时，实际上是将这个对象的引用（即内存地址）存储在集合中。因此，集合中的每个元素都指向实际存储在堆中的对象。</p><h2 id="三、非泛型集合允许存储任何类型的引用"><a href="#三、非泛型集合允许存储任何类型的引用" class="headerlink" title="三、非泛型集合允许存储任何类型的引用"></a>三、非泛型集合允许存储任何类型的引用</h2><p>默认情况下，如果不使用泛型，集合可以存储任何类型的引用，只要这些引用属于 <code>Object</code> 类或其子类。</p><h2 id="四、Java集合框架的两大部分：Collection与Map"><a href="#四、Java集合框架的两大部分：Collection与Map" class="headerlink" title="四、Java集合框架的两大部分：Collection与Map"></a>四、Java集合框架的两大部分：Collection与Map</h2><ol><li><p><strong>Collection结构</strong>：用于存储单个元素的数据结构。它包括接口和类，如 <code>List</code>、<code>Set</code> 和 <code>Queue</code>。这些接口定义了不同类型的集合以及对这些集合的操作。</p><ul><li><strong>List</strong>：有序集合，可以包含重复元素，如 <code>ArrayList</code>、<code>LinkedList</code>。</li><li><strong>Set</strong>：不允许重复元素，如 <code>HashSet</code>、<code>LinkedHashSet</code>、<code>TreeSet</code>。</li><li><strong>Queue</strong>：通常用于表示等待处理的元素的集合，如 <code>LinkedList</code>、<code>PriorityQueue</code>。</li></ul></li><li><p><strong>Map结构</strong>：用于存储键值对数据结构。每个键映射到一个值，键和值的类型可以不同。常见的实现类包括 <code>HashMap</code>、<code>LinkedHashMap</code> 和 <code>TreeMap</code>。</p><ul><li><strong>HashMap</strong>：基于哈希表的实现。</li><li><strong>LinkedHashMap</strong>：维护了元素的插入顺序。</li><li><strong>TreeMap</strong>：基于红黑树的实现，键是有序的。</li></ul></li></ol><h2 id="五、主要的Java集合框架接口与实现类"><a href="#五、主要的Java集合框架接口与实现类" class="headerlink" title="五、主要的Java集合框架接口与实现类"></a>五、主要的Java集合框架接口与实现类</h2><p>了解，这里是更清晰的列点形式：</p><ol><li><p><strong>Collection 接口及其实现类</strong>：</p><ul><li><strong>List 接口</strong>：<ul><li><code>ArrayList</code></li><li><code>LinkedList</code></li><li><code>Vector</code></li><li><code>Stack</code></li></ul></li><li><strong>Set 接口</strong>：<ul><li><code>HashSet</code></li><li><code>LinkedHashSet</code></li><li><code>TreeSet</code></li></ul></li><li><strong>Queue 接口</strong>：<ul><li><code>LinkedList</code></li><li><code>PriorityQueue</code></li><li><code>ArrayDeque</code></li></ul></li></ul></li><li><p><strong>Map 接口及其实现类</strong>：</p><ul><li><code>HashMap</code></li><li><code>LinkedHashMap</code></li><li><code>TreeMap</code></li><li><code>Hashtable</code></li><li><code>Properties</code></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Enum（枚举）</title>
      <link href="/2024/06/08/Java%20SE/26.%20Enum%EF%BC%88%E6%9E%9A%E4%B8%BE%EF%BC%89/"/>
      <url>/2024/06/08/Java%20SE/26.%20Enum%EF%BC%88%E6%9E%9A%E4%B8%BE%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="Enum（枚举）"><a href="#Enum（枚举）" class="headerlink" title="Enum（枚举）"></a>Enum（枚举）</h1><h2 id="一、枚举的基础用法"><a href="#一、枚举的基础用法" class="headerlink" title="一、枚举的基础用法"></a>一、枚举的基础用法</h2><h3 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h3><ol><li><strong>枚举类型</strong>：枚举类型是一种特殊的类，用于表示一组常量。每个枚举常量实际上是该枚举类型的一个实例。</li><li><strong>枚举常量</strong>：枚举类型的实例，用于表示枚举类型的固定值。例如，枚举类型 <code>Day</code> 可以有常量 <code>MONDAY</code>, <code>TUESDAY</code> 等。</li><li><strong>类型安全</strong>：使用枚举类型比使用 <code>int</code> 或 <code>String</code> 常量更具类型安全性，因为编译器会检查类型。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.Enum;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举类型：季节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Season</span> &#123;</span><br><span class="line">    <span class="comment">// 直接定义枚举类型，每一个枚举值可以看做类中的常量。</span></span><br><span class="line">    SPRING, SUMMER, AUTUMN, WINTER;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEnum</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Season</span> <span class="variable">season</span> <span class="operator">=</span> get();</span><br><span class="line">        <span class="keyword">switch</span> (season)&#123;</span><br><span class="line">            <span class="keyword">case</span> SPRING -&gt; System.out.println(<span class="string">&quot;地平线·春季&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> SUMMER -&gt; System.out.println(<span class="string">&quot;地平线·夏季&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> AUTUMN -&gt; System.out.println(<span class="string">&quot;地平线·秋季&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> WINTER -&gt; System.out.println(<span class="string">&quot;地平线·冬季&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  Season <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Season.AUTUMN;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-反编译枚举"><a href="#1-2-反编译枚举" class="headerlink" title="1.2 反编译枚举"></a>1.2 反编译枚举</h3><ol><li>所有枚举类型都默认继承<code>java.lang.Enum</code>，因此枚举类型无法继承其他类。</li><li>所有枚举类型都被final修饰，所以枚举类型无法继承。</li><li>所有枚举值都是常量。</li><li>所有枚举类型都有一个values数组（可以通过values()获取所有枚举制值并且遍历）</li></ol><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406081523098.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取所有枚举值，遍历。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEnumValues</span><span class="params">()</span>&#123;</span><br><span class="line">    Season[] values = Season.values();</span><br><span class="line">    <span class="keyword">for</span> (Season value:values) System.out.println(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、枚举的高级用法"><a href="#二、枚举的高级用法" class="headerlink" title="二、枚举的高级用法"></a>二、枚举的高级用法</h2><ol><li>对于枚举类型来说，普通类可以定义的，枚举类型也可以。<ul><li>静态代码块、构造代码块</li><li>静态方法、实例方法</li><li>静态变量、实例变量</li></ul></li></ol><blockquote><ul><li>如果一个枚举类型定义了普通类的东西，必须指定枚举值。</li><li>枚举值的定义只能出现在类体的最上面。</li><li>所有枚举值的后面必须”;”结尾。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.Enum;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举类型：季节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Season</span> &#123;</span><br><span class="line"><span class="comment">//    接定义枚举类型，每一个枚举值可以看做类中的常量。</span></span><br><span class="line">    SPRING, SUMMER, AUTUMN, WINTER;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;枚举类型Season的静态代码块执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    构造代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Season构造代码块执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    静态变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">A</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//    实例变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>  b= <span class="number">20</span>;</span><br><span class="line"><span class="comment">//    静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getA</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  A;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    实例方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getB</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;        </span><br><span class="line">            </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>枚举类中的构造方法是私有化的（默认就是私有化的，只能在本类调用。）<ul><li>枚举类的构造方法不能使用<code>new</code>来调用。</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.Enum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">SeasonPlus</span> &#123;</span><br><span class="line">    <span class="comment">// 定义了有参数的构造方法之后，通过以下代码来调用构造方法。</span></span><br><span class="line">    <span class="comment">// 注意枚举类的构造方法不能使用new来调用，并且枚举类的构造方法只能在本类中调用。</span></span><br><span class="line">    SPRING(<span class="string">&quot;春季&quot;</span>,<span class="string">&quot;地平线春季赛事&quot;</span>),</span><br><span class="line">    SUMMER(<span class="string">&quot;夏季&quot;</span>,<span class="string">&quot;地平线夏季赛事&quot;</span>),</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋季&quot;</span>,<span class="string">&quot;地平线秋季赛事&quot;</span>),</span><br><span class="line">    WINTER(<span class="string">&quot;冬季&quot;</span>,<span class="string">&quot;地平线冬季赛事&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String desc;</span><br><span class="line"></span><br><span class="line">    SeasonPlus(String name, String desc)&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.desc=desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.Enum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeasonPlusTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SeasonPlus seasonPlus=SeasonPlusTest.get();</span><br><span class="line">        <span class="keyword">switch</span> (seasonPlus)&#123;</span><br><span class="line">            <span class="keyword">case</span> SPRING -&gt; System.out.println(seasonPlus.getDesc());</span><br><span class="line">            <span class="keyword">case</span> SUMMER -&gt; System.out.println(seasonPlus.getDesc());</span><br><span class="line">            <span class="keyword">case</span> AUTUMN -&gt; System.out.println(seasonPlus.getDesc());</span><br><span class="line">            <span class="keyword">case</span> WINTER -&gt; System.out.println(seasonPlus.getDesc());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        SeasonPlus[] values = SeasonPlus.values();</span><br><span class="line">        <span class="keyword">for</span>(SeasonPlus value: values) System.out.println(value.getName()+<span class="string">&quot; ====&gt; &quot;</span>+value.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SeasonPlus <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SeasonPlus.SPRING;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、枚举类型继承接口"><a href="#三、枚举类型继承接口" class="headerlink" title="三、枚举类型继承接口"></a>三、枚举类型继承接口</h2><h3 id="3-1-整个枚举类型实现接口"><a href="#3-1-整个枚举类型实现接口" class="headerlink" title="3.1 整个枚举类型实现接口"></a>3.1 整个枚举类型实现接口</h3><p>这种方法是让整个枚举类型实现接口，并为所有枚举常量提供统一的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Eatable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举类型：季节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Season</span> <span class="keyword">implements</span> <span class="title class_">Eatable</span>&#123;</span><br><span class="line"><span class="comment">//    接定义枚举类型，每一个枚举值可以看做类中的常量。</span></span><br><span class="line">    SPRING, SUMMER, AUTUMN, WINTER;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃点水果&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-每个枚举常量分别实现接口"><a href="#3-2-每个枚举常量分别实现接口" class="headerlink" title="3.2 每个枚举常量分别实现接口"></a>3.2 每个枚举常量分别实现接口</h3><p>这种方法是让每个枚举常量分别实现接口，从而为每个枚举常量提供不同的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Eatable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">SeasonPlus</span> <span class="keyword">implements</span> <span class="title class_">Eatable</span>&#123;</span><br><span class="line">    SPRING(<span class="string">&quot;春季&quot;</span>,<span class="string">&quot;地平线春季赛事&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;春季吃苹果&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUMMER(<span class="string">&quot;夏季&quot;</span>,<span class="string">&quot;地平线夏季赛事&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;夏季吃西瓜&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋季&quot;</span>,<span class="string">&quot;地平线秋季赛事&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;秋季吃杏桃&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    WINTER(<span class="string">&quot;冬季&quot;</span>,<span class="string">&quot;地平线冬季赛事&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;冬季吃橘子&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String desc;</span><br><span class="line"></span><br><span class="line">    SeasonPlus(String name, String desc)&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.desc=desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第04章06节-查询DQL-聚合函数&amp;分组查询.md</title>
      <link href="/2024/06/07/MySQL/13.%20%E7%AC%AC04%E7%AB%A006%E8%8A%82-%E6%9F%A5%E8%AF%A2DQL-%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0&amp;%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/"/>
      <url>/2024/06/07/MySQL/13.%20%E7%AC%AC04%E7%AB%A006%E8%8A%82-%E6%9F%A5%E8%AF%A2DQL-%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0&amp;%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="聚合函数-分组查询"><a href="#聚合函数-分组查询" class="headerlink" title="聚合函数&amp;分组查询"></a>聚合函数&amp;分组查询</h1><h2 id="一、分组函数（聚集函数）"><a href="#一、分组函数（聚集函数）" class="headerlink" title="一、分组函数（聚集函数）"></a>一、分组函数（聚集函数）</h2><p><strong>分组函数的执行原则：先分组，然后对每一组数据执行分组函数。如果没有分组语句group by的话，整张表的数据自成一组。</strong><br>分组函数包括五个：</p><ul><li>max：最大值</li><li>min：最小值</li><li>avg：平均值</li><li>sum：求和</li><li>count：计数</li></ul><blockquote><p>分组函数属于多行处理函数。多个输入，一个输出。</p></blockquote><h3 id="1-1-max"><a href="#1-1-max" class="headerlink" title="1.1 max"></a>1.1 max</h3><p><strong>找出员工的最高薪资</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(sal) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><h3 id="1-2-min"><a href="#1-2-min" class="headerlink" title="1.2 min"></a>1.2 min</h3><p><strong>找出员工的最低工资</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(sal) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><h3 id="1-3-avg"><a href="#1-3-avg" class="headerlink" title="1.3 avg"></a>1.3 avg</h3><p><strong>计算员工的平均薪资</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><h3 id="1-4-sum"><a href="#1-4-sum" class="headerlink" title="1.4 sum"></a>1.4 sum</h3><p><strong>计算员工的工资和</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(sal) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><strong>计算员工的津贴之和</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(comm) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><blockquote><p> 重点：所有的分组函数都是自动忽略NULL的。 </p></blockquote><h3 id="1-5-count"><a href="#1-5-count" class="headerlink" title="1.5 count"></a>1.5 count</h3><p><strong>统计员工人数</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(ename) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p>count(*)和count(1)的效果一样，统计该组中总记录行数。<br>count(ename)统计的是这个ename字段中不为NULL个数总和。<br>例如：count(comm) 结果是 4，而不是14</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(comm) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><strong>统计岗位数量</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> job) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><ol><li><p>COUNT(*) 用于计算表中行的总数，而 COUNT(某个字段) 用于计算某个特定字段中非 NULL 的值的数量。</p></li><li><p>count(*)和count(1)的效果一样，统计该组中总记录行数。</p></li></ol></blockquote><h3 id="1-6-分组函数组合使用"><a href="#1-6-分组函数组合使用" class="headerlink" title="1.6 分组函数组合使用"></a>1.6 分组函数组合使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> Count,<span class="built_in">sum</span>(sal) <span class="keyword">as</span> Sum,<span class="built_in">min</span>(sal) <span class="keyword">as</span> Min ,<span class="built_in">max</span>(sal) <span class="keyword">as</span> Max,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> Avg <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406072114506.png"></p><h3 id="1-7-分组函数注意事项"><a href="#1-7-分组函数注意事项" class="headerlink" title="1.7 分组函数注意事项"></a>1.7 分组函数注意事项</h3><p>&#x3D;&#x3D;<strong>分组函数不能直接使用在where子句当中</strong>&#x3D;&#x3D;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;</span> <span class="built_in">avg</span>(sal);</span><br></pre></td></tr></table></figure><p> 这个会报错的<br>原因：分组的行为是在where执行之后才开始的。</p><h2 id="二、分组查询"><a href="#二、分组查询" class="headerlink" title="二、分组查询"></a>二、分组查询</h2><h3 id="2-1-group-by"><a href="#2-1-group-by" class="headerlink" title="2.1 group by"></a>2.1 group by</h3><p>按照某个字段分组，或者按照某些字段联合分组。</p><p><strong>注意：group by的执行是在where之后执行。</strong><br>语法：<br><code>group by 字段</code><br><code>group by 字段1,字段2,字段3....</code></p><p><strong>找出每个岗位的平均薪资</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> job, <span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job;</span><br></pre></td></tr></table></figure><p><strong>找出每个部门最高工资</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">max</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br></pre></td></tr></table></figure><p><strong>找出每个部门不同岗位的平均薪资</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,job,<span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno,job;</span><br></pre></td></tr></table></figure><blockquote><p><strong>当select语句中有group by的话，select后面只能跟分组函数或参加分组的字段</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,deptno,<span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno; <span class="operator">/</span><span class="operator">/</span> 这个<span class="keyword">SQL</span>执行后会报错。</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406072127348.png" alt="image.png" style="zoom:67%;" /><h3 id="2-2-having"><a href="#2-2-having" class="headerlink" title="2.2 having"></a>2.2 having</h3><p>having写在group by的后面，而且不能单独使用。当你对分组之后的数据不满意，可以继续通过having对分组之后的数据进行过滤。<br>where的过滤是在分组前进行过滤。<br>使用原则：尽量在where中过滤，实在不行，再使用having。越早过滤效率越高。</p><p><strong>找出除20部分之外，其它部门的平均薪资。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">where</span> deptno<span class="operator">&lt;&gt;</span><span class="number">20</span> <span class="keyword">group</span> <span class="keyword">by</span> deptno; <span class="operator">/</span><span class="operator">/</span> 建议</span><br><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno <span class="keyword">having</span> deptno <span class="operator">&lt;&gt;</span> <span class="number">20</span>; <span class="operator">/</span><span class="operator">/</span> 不建议</span><br></pre></td></tr></table></figure><p><strong>查询每个部门平均薪资，找出平均薪资高于2000的。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno <span class="keyword">having</span> <span class="built_in">avg</span>(sal) <span class="operator">&gt;</span> <span class="number">2000</span>;</span><br></pre></td></tr></table></figure><h2 id="三、组内排序"><a href="#三、组内排序" class="headerlink" title="三、组内排序"></a>三、组内排序</h2><h3 id="3-1-GROUP-CONCAT"><a href="#3-1-GROUP-CONCAT" class="headerlink" title="3.1 GROUP_CONCAT"></a>3.1 GROUP_CONCAT</h3><p><code>GROUP_CONCAT</code> 是 MySQL 中的一个聚合函数，用于将分组中的多个值连接成一个字符串。它在进行数据汇总时特别有用，比如将某一列的多个值连接成一个以逗号分隔的字符串。</p><h4 id="3-1-1-基本语法"><a href="#3-1-1-基本语法" class="headerlink" title="3.1.1 基本语法"></a>3.1.1 基本语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> GROUP_CONCAT(column_name)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">[<span class="keyword">WHERE</span> <span class="keyword">condition</span>]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> column_name2];</span><br></pre></td></tr></table></figure><h4 id="3-1-2-示例"><a href="#3-1-2-示例" class="headerlink" title="3.1.2 示例"></a>3.1.2 示例</h4><p>假设有一个名为 <code>students</code> 的表，结构和数据如下：</p><table><thead><tr><th>id</th><th>name</th><th>course</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>Math</td></tr><tr><td>2</td><td>Bob</td><td>Science</td></tr><tr><td>3</td><td>Alice</td><td>History</td></tr><tr><td>4</td><td>Bob</td><td>Math</td></tr><tr><td>5</td><td>Alice</td><td>Science</td></tr></tbody></table><p>我们想要得到每个学生所选课程的一个列表。可以使用 <code>GROUP_CONCAT</code> 来实现：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, GROUP_CONCAT(course) <span class="keyword">AS</span> courses</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> name;</span><br></pre></td></tr></table></figure><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><table><thead><tr><th>name</th><th>courses</th></tr></thead><tbody><tr><td>Alice</td><td>Math,History,Science</td></tr><tr><td>Bob</td><td>Science,Math</td></tr></tbody></table><h4 id="3-1-3-可选参数"><a href="#3-1-3-可选参数" class="headerlink" title="3.1.3 可选参数"></a>3.1.3 可选参数</h4><p><code>GROUP_CONCAT</code> 函数还有一些可选参数可以用来改变其行为：</p><ol><li><p>**<code>SEPARATOR</code>**：指定分隔符，默认为逗号 <code>,</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, GROUP_CONCAT(course SEPARATOR <span class="string">&#x27; | &#x27;</span>) <span class="keyword">AS</span> courses</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> name;</span><br></pre></td></tr></table></figure></li><li><p>**<code>DISTINCT</code>**：去重，防止重复值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, GROUP_CONCAT(<span class="keyword">DISTINCT</span> course) <span class="keyword">AS</span> courses</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> name;</span><br></pre></td></tr></table></figure></li><li><p>**<code>ORDER BY</code>**：指定连接值的排序方式。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, GROUP_CONCAT(course <span class="keyword">ORDER</span> <span class="keyword">BY</span> course <span class="keyword">ASC</span>) <span class="keyword">AS</span> courses</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> name;</span><br></pre></td></tr></table></figure></li><li><p>**<code>LIMIT</code>**：限制结果的长度（不常用）。</p></li></ol><h4 id="3-1-4-综合示例"><a href="#3-1-4-综合示例" class="headerlink" title="3.1.4 综合示例"></a>3.1.4 综合示例</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, GROUP_CONCAT(<span class="keyword">DISTINCT</span> course <span class="keyword">ORDER</span> <span class="keyword">BY</span> course <span class="keyword">ASC</span> SEPARATOR <span class="string">&#x27; | &#x27;</span>) <span class="keyword">AS</span> courses</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> name;</span><br></pre></td></tr></table></figure><h5 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h5><table><thead><tr><th>name</th><th>courses</th></tr></thead><tbody><tr><td>Alice</td><td>History</td></tr><tr><td>Bob</td><td>Math</td></tr></tbody></table><p>通过以上方式，<code>GROUP_CONCAT</code> 可以灵活地将多行数据合并成一个字符串，满足各种需求。</p><h3 id="3-2-SUBSTRING-INDEX"><a href="#3-2-SUBSTRING-INDEX" class="headerlink" title="3.2 SUBSTRING_INDEX"></a>3.2 SUBSTRING_INDEX</h3><p><code>SUBSTRING_INDEX</code> 是 MySQL 中用于截取字符串的函数，可以根据指定的分隔符将字符串拆分并返回特定部分。该函数非常适用于需要从字符串中提取特定子字符串的场景。</p><h4 id="3-2-1-基本语法"><a href="#3-2-1-基本语法" class="headerlink" title="3.2.1 基本语法"></a>3.2.1 基本语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUBSTRING_INDEX(str, delim, count)</span><br></pre></td></tr></table></figure><ul><li>**<code>str</code>**：要处理的字符串。</li><li>**<code>delim</code>**：字符串中的分隔符。</li><li>**<code>count</code>**：指定要返回的部分。正数表示从左到右，负数表示从右到左。</li></ul><h4 id="3-2-2-示例"><a href="#3-2-2-示例" class="headerlink" title="3.2.2 示例"></a>3.2.2 示例</h4><p>假设我们有一个表 <code>users</code>，其中有一列 <code>email</code> 存储用户的电子邮件地址：</p><table><thead><tr><th>id</th><th>email</th></tr></thead><tbody><tr><td>1</td><td><a href="mailto:&#x6a;&#111;&#x68;&#x6e;&#x2e;&#x64;&#111;&#101;&#64;&#101;&#120;&#x61;&#109;&#112;&#x6c;&#101;&#46;&#99;&#111;&#x6d;">&#x6a;&#111;&#x68;&#x6e;&#x2e;&#x64;&#111;&#101;&#64;&#101;&#120;&#x61;&#109;&#112;&#x6c;&#101;&#46;&#99;&#111;&#x6d;</a></td></tr><tr><td>2</td><td><a href="mailto:&#106;&#97;&#x6e;&#101;&#46;&#115;&#x6d;&#x69;&#116;&#x68;&#x40;&#x74;&#101;&#115;&#x74;&#46;&#x63;&#x6f;&#x6d;">&#106;&#97;&#x6e;&#101;&#46;&#115;&#x6d;&#x69;&#116;&#x68;&#x40;&#x74;&#101;&#115;&#x74;&#46;&#x63;&#x6f;&#x6d;</a></td></tr><tr><td>3</td><td><a href="mailto:&#97;&#x6c;&#105;&#99;&#101;&#x40;&#x64;&#x6f;&#x6d;&#97;&#105;&#x6e;&#46;&#111;&#114;&#x67;">&#97;&#x6c;&#105;&#99;&#101;&#x40;&#x64;&#x6f;&#x6d;&#97;&#105;&#x6e;&#46;&#111;&#114;&#x67;</a></td></tr></tbody></table><p>我们想要从电子邮件地址中提取用户名（即 <code>@</code> 符号前的部分）。可以使用 <code>SUBSTRING_INDEX</code> 实现：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> email, SUBSTRING_INDEX(email, <span class="string">&#x27;@&#x27;</span>, <span class="number">1</span>) <span class="keyword">AS</span> username</span><br><span class="line"><span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure><h5 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h5><table><thead><tr><th>email</th><th>username</th></tr></thead><tbody><tr><td><a href="mailto:&#x6a;&#111;&#104;&#110;&#x2e;&#x64;&#x6f;&#x65;&#x40;&#x65;&#x78;&#97;&#109;&#x70;&#x6c;&#x65;&#x2e;&#99;&#111;&#x6d;">&#x6a;&#111;&#104;&#110;&#x2e;&#x64;&#x6f;&#x65;&#x40;&#x65;&#x78;&#97;&#109;&#x70;&#x6c;&#x65;&#x2e;&#99;&#111;&#x6d;</a></td><td>john.doe</td></tr><tr><td><a href="mailto:&#x6a;&#97;&#110;&#101;&#46;&#x73;&#109;&#x69;&#116;&#104;&#64;&#x74;&#x65;&#x73;&#116;&#x2e;&#x63;&#x6f;&#x6d;">&#x6a;&#97;&#110;&#101;&#46;&#x73;&#109;&#x69;&#116;&#104;&#64;&#x74;&#x65;&#x73;&#116;&#x2e;&#x63;&#x6f;&#x6d;</a></td><td>jane.smith</td></tr><tr><td><a href="mailto:&#97;&#108;&#105;&#x63;&#101;&#x40;&#100;&#x6f;&#109;&#x61;&#x69;&#110;&#46;&#x6f;&#x72;&#x67;">&#97;&#108;&#105;&#x63;&#101;&#x40;&#100;&#x6f;&#109;&#x61;&#x69;&#110;&#46;&#x6f;&#x72;&#x67;</a></td><td>alice</td></tr></tbody></table><h4 id="3-2-3-详细示例"><a href="#3-2-3-详细示例" class="headerlink" title="3.2.3 详细示例"></a>3.2.3 详细示例</h4><ol><li><p><strong>从字符串中提取域名（<code>@</code> 符号后的部分）</strong>：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> email, SUBSTRING_INDEX(email, <span class="string">&#x27;@&#x27;</span>, <span class="number">-1</span>) <span class="keyword">AS</span> domain</span><br><span class="line"><span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure><p> 结果：</p><table><thead><tr><th>email</th><th>domain</th></tr></thead><tbody><tr><td><a href="mailto:&#106;&#111;&#x68;&#110;&#46;&#100;&#x6f;&#101;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#x6f;&#109;">&#106;&#111;&#x68;&#110;&#46;&#100;&#x6f;&#101;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#x6f;&#109;</a></td><td>example.com</td></tr><tr><td><a href="mailto:&#106;&#x61;&#x6e;&#101;&#46;&#115;&#x6d;&#105;&#116;&#x68;&#x40;&#x74;&#101;&#115;&#x74;&#x2e;&#x63;&#111;&#109;">&#106;&#x61;&#x6e;&#101;&#46;&#115;&#x6d;&#105;&#116;&#x68;&#x40;&#x74;&#101;&#115;&#x74;&#x2e;&#x63;&#111;&#109;</a></td><td>test.com</td></tr><tr><td><a href="mailto:&#x61;&#108;&#x69;&#x63;&#101;&#x40;&#100;&#111;&#x6d;&#x61;&#x69;&#x6e;&#46;&#111;&#x72;&#x67;">&#x61;&#108;&#x69;&#x63;&#101;&#x40;&#100;&#111;&#x6d;&#x61;&#x69;&#x6e;&#46;&#111;&#x72;&#x67;</a></td><td>domain.org</td></tr></tbody></table></li><li><p><strong>从URL中提取协议（假设表中有一列 <code>url</code>）</strong>：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> url, SUBSTRING_INDEX(url, <span class="string">&#x27;://&#x27;</span>, <span class="number">1</span>) <span class="keyword">AS</span> protocol</span><br><span class="line"><span class="keyword">FROM</span> websites;</span><br></pre></td></tr></table></figure><p> 如果 <code>websites</code> 表如下：</p><table><thead><tr><th>id</th><th>url</th></tr></thead><tbody><tr><td>1</td><td><a href="https://www.example.com/">https://www.example.com</a></td></tr><tr><td>2</td><td><a href="http://test.com/">http://test.com</a></td></tr><tr><td>3</td><td><a href="ftp://files.domain.org/">ftp://files.domain.org</a></td></tr></tbody></table><p> 结果：</p><table><thead><tr><th>url</th><th>protocol</th></tr></thead><tbody><tr><td><a href="https://www.example.com/">https://www.example.com</a></td><td>https</td></tr><tr><td><a href="http://test.com/">http://test.com</a></td><td>http</td></tr><tr><td><a href="ftp://files.domain.org/">ftp://files.domain.org</a></td><td>ftp</td></tr></tbody></table></li><li><p><strong>提取某个字符串中的第一个单词</strong>：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sentence, SUBSTRING_INDEX(sentence, <span class="string">&#x27; &#x27;</span>, <span class="number">1</span>) <span class="keyword">AS</span> first_word</span><br><span class="line"><span class="keyword">FROM</span> phrases;</span><br></pre></td></tr></table></figure><p> 如果 <code>phrases</code> 表如下：</p><table><thead><tr><th>id</th><th>sentence</th></tr></thead><tbody><tr><td>1</td><td>Hello world!</td></tr><tr><td>2</td><td>OpenAI develops AI models</td></tr><tr><td>3</td><td>SQL is fun</td></tr></tbody></table><p> 结果：</p><table><thead><tr><th>sentence</th><th>first_word</th></tr></thead><tbody><tr><td>Hello world!</td><td>Hello</td></tr><tr><td>OpenAI develops AI models</td><td>OpenAI</td></tr><tr><td>SQL is fun</td><td>SQL</td></tr></tbody></table></li></ol><h4 id="3-2-4-使用注意事项"><a href="#3-2-4-使用注意事项" class="headerlink" title="3.2.4 使用注意事项"></a>3.2.4 使用注意事项</h4><ul><li>如果 <code>count</code> 为正数，则从字符串左边开始计数。</li><li>如果 <code>count</code> 为负数，则从字符串右边开始计数。</li><li>如果 <code>count</code> 超出分隔符的数量，则返回整个字符串。</li></ul><p><code>SUBSTRING_INDEX</code> 是处理字符串的强大工具，通过合理设置分隔符和计数，可以方便地提取出所需的子字符串。</p><h3 id="3-3-组内查询案例"><a href="#3-3-组内查询案例" class="headerlink" title="3.3 组内查询案例"></a>3.3 组内查询案例</h3><p>案例：找出每个工作岗位的工资排名在前两名的。<br>substring_index函数的使用：</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406072203441.png" alt="image.png" style="zoom:67%;" /><p>group_concat函数的使用：</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406072203599.png" alt="image.png" style="zoom:67%;" /><p>学习了这两个函数之后，自己可以尝试写出来吗？</p><h2 id="四、总结单表的DQL语句"><a href="#四、总结单表的DQL语句" class="headerlink" title="四、总结单表的DQL语句"></a>四、总结单表的DQL语句</h2><p>select …5<br>from …1<br>where …2<br>group by …3<br>having …4<br>order by …6<br>重点掌握一个完整的DQL语句执行顺序。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java8的新日期API</title>
      <link href="/2024/06/07/Java%20SE/24.%20Java8%E7%9A%84%E6%96%B0%E6%97%A5%E6%9C%9FAPI/"/>
      <url>/2024/06/07/Java%20SE/24.%20Java8%E7%9A%84%E6%96%B0%E6%97%A5%E6%9C%9FAPI/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="Java8的新日期API"><a href="#Java8的新日期API" class="headerlink" title="Java8的新日期API"></a>Java8的新日期API</h1><h2 id="一、LocalDate日期、LocalTime时间、LocalDateTime日期时间"><a href="#一、LocalDate日期、LocalTime时间、LocalDateTime日期时间" class="headerlink" title="一、LocalDate日期、LocalTime时间、LocalDateTime日期时间"></a>一、LocalDate日期、LocalTime时间、LocalDateTime日期时间</h2><blockquote><p>方法都一样，以LocalDateTime举例讲解</p></blockquote><h3 id="1-1-获取当前时间（精确到纳秒）"><a href="#1-1-获取当前时间（精确到纳秒）" class="headerlink" title="1.1 获取当前时间（精确到纳秒）"></a>1.1 获取当前时间（精确到纳秒）</h3><ul><li>1秒&#x3D;1000毫秒</li><li>1毫秒&#x3D;1000微秒</li><li>1微秒&#x3D;1000纳秒</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLocalDateTimeNow</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//获取系统当前时间，精确到纳秒级。</span></span><br><span class="line">       <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">       System.out.println(now);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="1-2获取指定日期时间"><a href="#1-2获取指定日期时间" class="headerlink" title="1.2获取指定日期时间"></a>1.2获取指定日期时间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLocalDateTimeOf</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//获取指定日期的时间</span></span><br><span class="line">       <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2020</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">       System.out.println(localDateTime);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-加日期时间"><a href="#1-3-加日期时间" class="headerlink" title="1.3 加日期时间"></a>1.3 加日期时间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLocalDateTimePlus</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> now.plusYears(<span class="number">2</span>).plusMonths(<span class="number">6</span>).plusDays(<span class="number">1</span>).plusHours(<span class="number">0</span>).plusMonths(<span class="number">0</span>).plusSeconds(<span class="number">0</span>).plusNanos(<span class="number">0</span>);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里涉及了链式调用：now.plusYears(2).plusMonths(6).plusDays(1).plusHours(0).plusMonths(0).plusSeconds(0).plusNanos(0);<br>因为这几个方法返回<code>LocalDateTime</code>，所以可以这么调用。<br>在编写程序时可以参考此原理。</p></blockquote><h3 id="1-4-减日期时间"><a href="#1-4-减日期时间" class="headerlink" title="1.4 减日期时间"></a>1.4 减日期时间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLocalDateTimeMinus</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> now.minusYears(<span class="number">2</span>).minusMonths(<span class="number">6</span>).minusDays(<span class="number">1</span>).minusHours(<span class="number">0</span>).minusMonths(<span class="number">0</span>).minusSeconds(<span class="number">0</span>).minusNanos(<span class="number">0</span>);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="二、Instant时间戳（获取1970年1月1日-0时0分0秒到某个时间的时间戳）"><a href="#二、Instant时间戳（获取1970年1月1日-0时0分0秒到某个时间的时间戳）" class="headerlink" title="二、Instant时间戳（获取1970年1月1日 0时0分0秒到某个时间的时间戳）"></a>二、Instant时间戳（获取1970年1月1日 0时0分0秒到某个时间的时间戳）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInstant</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">       System.out.println(<span class="string">&quot;时间戳：&quot;</span>+l);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//Java 8的API也可以获取时间戳</span></span><br><span class="line">       <span class="type">Instant</span> <span class="variable">now</span> <span class="operator">=</span> Instant.now();  <span class="comment">//系统当前时间，基于UTC（全球标准时间）</span></span><br><span class="line">       System.out.println(now);</span><br><span class="line"></span><br><span class="line">       <span class="type">long</span> <span class="variable">epochMilli</span> <span class="operator">=</span> now.toEpochMilli();</span><br><span class="line">       System.out.println(<span class="string">&quot;时间戳：&quot;</span>+epochMilli);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="三、Duration计算时间间隔"><a href="#三、Duration计算时间间隔" class="headerlink" title="三、Duration计算时间间隔"></a>三、Duration计算时间间隔</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDuration</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 获取时间1</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">time1</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 获取时间2</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">time2</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2024</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 获取两个时间的差</span></span><br><span class="line">        <span class="type">Duration</span> <span class="variable">between</span> <span class="operator">=</span> Duration.between(time1, time2);</span><br><span class="line">        System.out.println(<span class="string">&quot;相差多少天：&quot;</span>+between.toDays());</span><br><span class="line">        System.out.println(<span class="string">&quot;相差多少小时：&quot;</span>+between.toHours());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="四、Period计算日期间隔"><a href="#四、Period计算日期间隔" class="headerlink" title="四、Period计算日期间隔"></a>四、Period计算日期间隔</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPeriod</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//获取日期1</span></span><br><span class="line">       <span class="type">LocalDate</span> <span class="variable">date1</span> <span class="operator">=</span> LocalDate.of(<span class="number">2020</span>, <span class="number">7</span>, <span class="number">7</span>);</span><br><span class="line">       <span class="comment">//获取日期2</span></span><br><span class="line">       <span class="type">LocalDate</span> <span class="variable">date2</span> <span class="operator">=</span> LocalDate.of(<span class="number">2024</span>, <span class="number">9</span>, <span class="number">12</span>);</span><br><span class="line">       <span class="comment">//计算两个日期差</span></span><br><span class="line">       <span class="type">Period</span> <span class="variable">between</span> <span class="operator">=</span> Period.between(date1, date2);</span><br><span class="line">       System.out.println(<span class="string">&quot;差多少年：&quot;</span>+between.getYears()+<span class="string">&quot;\t差多少月：&quot;</span>+between.getMonths()+<span class="string">&quot;\t差多少天&quot;</span>+between.getDays());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="五、TemporalAdjusters-时间矫正器"><a href="#五、TemporalAdjusters-时间矫正器" class="headerlink" title="五、TemporalAdjusters 时间矫正器"></a>五、TemporalAdjusters 时间矫正器</h2><h3 id="5-1-常用的-TemporalAdjusters-方法"><a href="#5-1-常用的-TemporalAdjusters-方法" class="headerlink" title="5.1 常用的 TemporalAdjusters 方法"></a>5.1 常用的 TemporalAdjusters 方法</h3><ol><li>**firstDayOfMonth()**：返回该月份的第一个日。</li><li>**firstDayOfNextMonth()**：返回下个月的第一个日。</li><li>**firstDayOfNextYear()**：返回下一年的第一个日。</li><li>**firstDayOfYear()**：返回当前年份的第一个日。</li><li>**lastDayOfMonth()**：返回该月份的最后一个日。</li><li>**lastDayOfYear()**：返回当前年份的最后一个日。</li><li>**next(DayOfWeek dow)**：返回下一个指定的星期。</li><li>**previous(DayOfWeek dow)**：返回上一个指定的星期。</li><li>**nextOrSame(DayOfWeek dow)**：返回下一个指定的星期，如果今天已经是这个星期，则返回今天。</li><li>**previousOrSame(DayOfWeek dow)**：返回上一个指定的星期，如果今天已经是这个星期，则返回今天。</li></ol><h3 id="5-2-示例代码"><a href="#5-2-示例代码" class="headerlink" title="5.2 示例代码"></a>5.2 示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.DayOfWeek;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.TemporalAdjusters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemporalAdjustersExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">today</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 本月的第一天</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">firstDayOfMonth</span> <span class="operator">=</span> today.with(TemporalAdjusters.firstDayOfMonth());</span><br><span class="line">        System.out.println(<span class="string">&quot;First day of this month: &quot;</span> + firstDayOfMonth);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下个月的第一天</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">firstDayOfNextMonth</span> <span class="operator">=</span> today.with(TemporalAdjusters.firstDayOfNextMonth());</span><br><span class="line">        System.out.println(<span class="string">&quot;First day of next month: &quot;</span> + firstDayOfNextMonth);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 本月的最后一天</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">lastDayOfMonth</span> <span class="operator">=</span> today.with(TemporalAdjusters.lastDayOfMonth());</span><br><span class="line">        System.out.println(<span class="string">&quot;Last day of this month: &quot;</span> + lastDayOfMonth);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下一个星期一</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">nextMonday</span> <span class="operator">=</span> today.with(TemporalAdjusters.next(DayOfWeek.MONDAY));</span><br><span class="line">        System.out.println(<span class="string">&quot;Next Monday: &quot;</span> + nextMonday);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上一个星期五</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">previousFriday</span> <span class="operator">=</span> today.with(TemporalAdjusters.previous(DayOfWeek.FRIDAY));</span><br><span class="line">        System.out.println(<span class="string">&quot;Previous Friday: &quot;</span> + previousFriday);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 本周的星期五，如果今天已经是星期五，则返回今天</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">fridayOrToday</span> <span class="operator">=</span> today.with(TemporalAdjusters.nextOrSame(DayOfWeek.FRIDAY));</span><br><span class="line">        System.out.println(<span class="string">&quot;Friday or today: &quot;</span> + fridayOrToday);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、DateTimeFormatter-日期格式化"><a href="#六、DateTimeFormatter-日期格式化" class="headerlink" title="六、DateTimeFormatter 日期格式化"></a>六、DateTimeFormatter 日期格式化</h2><h3 id="6-1-LocalDateTime-–-String"><a href="#6-1-LocalDateTime-–-String" class="headerlink" title="6.1 LocalDateTime –&gt; String"></a>6.1 LocalDateTime –&gt; String</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDateTimeFormatter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="comment">//创建格式化对象</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">formatted</span> <span class="operator">=</span> dateTimeFormatter.format(now);</span><br><span class="line">        System.out.println(formatted);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-String-–-LocalDateTime"><a href="#6-2-String-–-LocalDateTime" class="headerlink" title="6.2 String –&gt; LocalDateTime"></a>6.2 String –&gt; LocalDateTime</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDateTimeFormatter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建格式化对象</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">parse</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">&quot;2020-07-07 09:00:00&quot;</span>, dateTimeFormatter);</span><br><span class="line">        System.out.println(parse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日期相关API（before Java8）</title>
      <link href="/2024/06/07/Java%20SE/25.%20%E6%97%A5%E6%9C%9F%E7%9B%B8%E5%85%B3API%EF%BC%88before-Java8%EF%BC%89/"/>
      <url>/2024/06/07/Java%20SE/25.%20%E6%97%A5%E6%9C%9F%E7%9B%B8%E5%85%B3API%EF%BC%88before-Java8%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="Java-8-之前的日期和时间-API"><a href="#Java-8-之前的日期和时间-API" class="headerlink" title="Java 8 之前的日期和时间 API"></a>Java 8 之前的日期和时间 API</h1><p>在 Java 中，处理日期和时间的 API 分为两个主要的类别：Java 8 之前的 API 和 Java 8 及之后引入的新 API。以下是详细介绍这些 API 及其使用方法。</p><h3 id="1-1-java-util-Date"><a href="#1-1-java-util-Date" class="headerlink" title="1.1 java.util.Date"></a>1.1 <code>java.util.Date</code></h3><ul><li>用于表示特定的时间，精度为毫秒。</li><li>常用方法：<ul><li><code>Date()</code>: 创建一个表示当前时间的 <code>Date</code> 对象。</li><li><code>Date(long date)</code>: 创建一个表示从1970年1月1日00:00:00 GMT 开始的特定毫秒数的 <code>Date</code> 对象。</li><li><code>getTime()</code>: 返回自1970年1月1日00:00:00 GMT以来的毫秒数。</li><li><code>setTime(long time)</code>: 设置时间。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDateConstructor</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//获取系统当前时间</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    System.out.println(date);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取指定的时间（参数的单位是毫秒数）</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1000</span>);</span><br><span class="line">    System.out.println(date1);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取当前系统时间的前10分钟时间</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">date2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()-<span class="number">1000</span>*<span class="number">60</span>*<span class="number">10</span>);</span><br><span class="line">    System.out.println(date2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-java-text-SimpleDateFormat"><a href="#1-2-java-text-SimpleDateFormat" class="headerlink" title="1.2 java.text.SimpleDateFormat"></a>1.2 <code>java.text.SimpleDateFormat</code></h3><ul><li>用于格式化和解析日期。</li><li>常用方法：<ul><li><code>format(Date date)</code>: 将日期格式化为字符串。</li><li><code>parse(String source)</code>: 将字符串解析为日期。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期格式化，需要借助：</span></span><br><span class="line"><span class="comment"> * java.text.DateFormat</span></span><br><span class="line"><span class="comment"> * java.text.SimpleDateFormat（用这个，DateFormat是SimpleDateFormat的父类。）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDateormat</span><span class="params">()</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="comment">// 1、java.util.Date ---&gt; java.lang.String</span></span><br><span class="line">    <span class="comment">//格式化</span></span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>); <span class="comment">//指定日期格式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用format方法完成格式化</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> format.format(date);</span><br><span class="line">    System.out.println(s);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、java.lang.String ---&gt; java.util.Date</span></span><br><span class="line">    <span class="comment">// 日期字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">strDate</span> <span class="operator">=</span> <span class="string">&quot;2008-08-08 08:08:08 888&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建日期格式化对象</span></span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sdf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);  <span class="comment">//strDate要和yyyy-MM-dd HH:mm:ss SSS格式一致。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析：将字符串String转换成Date</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> sdf2.parse(strDate);</span><br><span class="line"></span><br><span class="line">    System.out.println(date1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-3-java-util-Calendar"><a href="#1-3-java-util-Calendar" class="headerlink" title="1.3 java.util.Calendar"></a>1.3 <code>java.util.Calendar</code></h3><ol><li><code>getInstance()</code>: 获取一个 <code>Calendar</code> 对象并初始化为当前日期和时间。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCalendar</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前时间的日历对象（调用一个静态方法）</span></span><br><span class="line">    <span class="type">Calendar</span> <span class="variable">instance</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">    System.out.println(instance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>get(int field)</code>: 返回给定日历字段的值。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCalendar</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前时间的日历对象（调用一个静态方法）</span></span><br><span class="line">    <span class="type">Calendar</span> <span class="variable">instance</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取日历中的年</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> instance.get(Calendar.YEAR);</span><br><span class="line">    System.out.println(year);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>set(int field, int value)</code>: 设置给定日历字段的值。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCalendarSet</span><span class="params">()</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="comment">// 获取系统当前时间的日历</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="comment">// 设置该日历的年是2008年</span></span><br><span class="line">        cal.set(Calendar.YEAR, <span class="number">2008</span>);</span><br><span class="line">        <span class="comment">//cal.set(Calendar.MONTH, 10);</span></span><br><span class="line">        <span class="comment">// 获取日历的年月日信息</span></span><br><span class="line">        System.out.println(cal.get(Calendar.YEAR) + <span class="string">&quot;年&quot;</span> + (cal.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">&quot;月&quot;</span> + cal.get(Calendar.DAY_OF_MONTH) + <span class="string">&quot;日&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置日历是2008年8月8日 8时8分8秒的日历</span></span><br><span class="line">        cal.set(<span class="number">2008</span>, Calendar.AUGUST,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>);</span><br><span class="line">        <span class="comment">// 获取日历的年月日信息</span></span><br><span class="line">        System.out.println(cal.get(Calendar.YEAR) + <span class="string">&quot;年&quot;</span> + (cal.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">&quot;月&quot;</span> + cal.get(Calendar.DAY_OF_MONTH) + <span class="string">&quot;日&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>add(int field, int amount)</code>: 在给定的日历字段中添加或减去指定的时间量。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCalendarAdd</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">       calendar.add(Calendar.YEAR,-<span class="number">2</span>);</span><br><span class="line">       System.out.println(calendar.get(Calendar.YEAR));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><code>setTime(new Date())</code>:通常用于将日历对象设置为当前时间。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCalendarSetTime</span><span class="params">()</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        String strDate=<span class="string">&quot;2020-07-07 09:00:00&quot;</span>;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">parse</span> <span class="operator">=</span> format.parse(strDate);</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        calendar.setTime(parse);</span><br><span class="line">        System.out.println(calendar.get(Calendar.YEAR)+<span class="string">&quot;/&quot;</span>+(calendar.get(Calendar.MONTH)+<span class="number">1</span>)+<span class="string">&quot;/&quot;</span>+calendar.get(Calendar.DAY_OF_MONTH));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：Calendar 类中的月份是从 0 开始的。</p></blockquote><ol start="6"><li><code>getTime()</code>:是 Calendar 类的一个方法，用于返回一个<code>Date</code>对象，该对象表示此<code>Calendar</code>当前持有的时间值。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCalendarGetTime</span><span class="params">()</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">    <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:s&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">formatted</span> <span class="operator">=</span> format.format(date);</span><br><span class="line">    System.out.println(formatted);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>StringBuffer与StringBuilder</title>
      <link href="/2024/06/07/Java%20SE/23.%20StringBuffer%E4%B8%8EStringBuilder/"/>
      <url>/2024/06/07/Java%20SE/23.%20StringBuffer%E4%B8%8EStringBuilder/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="StringBuffer与StringBuilder"><a href="#StringBuffer与StringBuilder" class="headerlink" title="StringBuffer与StringBuilder"></a>StringBuffer与StringBuilder</h1><ul><li><code>StringBuffer</code> 和 <code>StringBuilder</code> 都是 Java 中用于创建和操作<strong>可变字符串</strong>的类都继承同一父类<code>AbstractStringBuilder</code>。</li><li>底层是byte[]数组，并且这个byte[]数组没有被final修饰，所以当byte[]数组满了，可以创建一个更大的新数组来达到扩容，然后他可以重新指向这个新数组对象。</li><li>优化策略：可以预估字符串的大致长度，初始化时设置合适的容量可以减少扩展数组的次数，从而提高性能。</li><li>在 Java 中，StringBuffer 和 StringBuilder 的初始默认容量（即字符数组的初始大小）都是 16。这个默认容量是由它们的共同父类 AbstractStringBuilder 定义的。</li><li>StringBuilder和StringBuffer每次扩容为原来的2倍再加上2。</li></ul><h2 id="一、主要区别"><a href="#一、主要区别" class="headerlink" title="一、主要区别"></a>一、主要区别</h2><ol><li><p><strong>线程安全性</strong>：</p><ul><li><code>StringBuffer</code> 是线程安全的，它的方法被同步以确保线程安全。因此，它可以在多线程环境中安全地使用。</li><li><code>StringBuilder</code> 不是线程安全的，它的性能比 <code>StringBuffer</code> 更好，但不适合在多线程环境中使用。</li></ul></li><li><p><strong>性能</strong>：</p><ul><li>由于 <code>StringBuffer</code> 的同步机制，它的操作速度相对较慢。</li><li><code>StringBuilder</code> 没有同步机制，因此在单线程环境中操作速度更快。</li></ul></li><li><p><strong>同步</strong>：</p><ul><li><code>StringBuffer</code>：同步的，适合多线程环境。</li><li><code>StringBuilder</code>：非同步的，适合单线程环境。</li></ul></li></ol><h2 id="二、StringBuilder和StringBuffer构造方法"><a href="#二、StringBuilder和StringBuffer构造方法" class="headerlink" title="二、StringBuilder和StringBuffer构造方法"></a>二、StringBuilder和StringBuffer构造方法</h2><h3 id="2-1-StringBuilder-构造方法"><a href="#2-1-StringBuilder-构造方法" class="headerlink" title="2.1 StringBuilder 构造方法"></a>2.1 StringBuilder 构造方法</h3><ol><li><p><strong>默认构造方法</strong>：</p><ul><li>创建一个容量为 16 的空 <code>StringBuilder</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br></pre></td></tr></table></figure></li><li><p><strong>指定初始容量的构造方法</strong>：</p><ul><li>创建一个指定初始容量的 <code>StringBuilder</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="type">int</span> capacity);</span><br></pre></td></tr></table></figure><p>这里 <code>capacity</code> 是字符数组的初始容量。如果未指定，默认为 16。</p></li><li><p><strong>从字符串构造</strong>：</p><ul><li>使用现有的字符串来初始化 <code>StringBuilder</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(String str);</span><br></pre></td></tr></table></figure><p>这将创建一个与给定字符串相同内容的 <code>StringBuilder</code>。</p></li></ol><h3 id="2-2-StringBuffer-构造方法"><a href="#2-2-StringBuffer-构造方法" class="headerlink" title="2.2 StringBuffer 构造方法"></a>2.2 StringBuffer 构造方法</h3><ol><li><p><strong>默认构造方法</strong>：</p><ul><li>创建一个容量为 16 的空 <code>StringBuffer</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br></pre></td></tr></table></figure></li><li><p><strong>指定初始容量的构造方法</strong>：</p><ul><li>创建一个指定初始容量的 <code>StringBuffer</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="type">int</span> capacity);</span><br></pre></td></tr></table></figure><p>这里 <code>capacity</code> 是字符数组的初始容量。如果未指定，默认为 16。</p></li><li><p><strong>从字符串构造</strong>：</p><ul><li>使用现有的字符串来初始化 <code>StringBuffer</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(String str);</span><br></pre></td></tr></table></figure><p>这将创建一个与给定字符串相同内容的 <code>StringBuffer</code>。</p></li></ol><h2 id="三、StringBuilder和StringBuffer的常用方法"><a href="#三、StringBuilder和StringBuffer的常用方法" class="headerlink" title="三、StringBuilder和StringBuffer的常用方法"></a>三、StringBuilder和StringBuffer的常用方法</h2><ol><li><code>StringBuilder append(Type data)</code></li></ol><p><code>append</code> 方法可以接受不同类型的数据作为参数，并将这些数据附加到现有的字符串构建器对象中而不产生新的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAppend</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        builder.append(<span class="string">&quot;Camellia&quot;</span>);</span><br><span class="line">        System.out.println(builder);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>StringBuilder delete(int start, int end)</li></ol><p><code>StringBuilder </code>类中的 <code>delete(int start, int end) </code>方法用于删除字符序列中的一部分。<br>该方法接受两个参数：<code>start </code>和<code> end</code>，它们定义了要删除的子字符串的起始和结束位置。<br>删除操作包括从<code> start</code>（<strong>包含</strong>）到 <code>end</code>（<strong>不包含</strong>）之间的所有字符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Camellia.xiaohua&quot;</span>);</span><br><span class="line">        builder.delete(<span class="number">8</span>,<span class="number">16</span>);</span><br><span class="line">        System.out.println(builder);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>StringBuilder deleteCharAt(int index)</code></li></ol><p><code>StringBuilder</code> 类中的 <code>deleteCharAt(int index) </code>方法用于删除指定索引位置的字符。<br>这个方法会移除 <code>StringBuilder</code> 对象中指定位置的字符，使得字符序列在该位置的字符被移除，并且之后的字符会向前移动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteCharAt</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Camellia.xiaohua&quot;</span>);</span><br><span class="line">       builder.deleteCharAt(<span class="number">8</span>);</span><br><span class="line">       System.out.println(builder);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>StringBuilder insert(int offset,String str)</code></li></ol><p><code>StringBuilder </code>类中的<code>insert(int offset, String str)</code>方法用于在<code>StringBuilder</code>对象的指定位置插入一个字符串。<br><code>offset </code>参数确定了插入点的位置，<code>str </code>是要插入的字符串。插入操作会将指定位置及其后的字符向后移动，给新的字符串腾出空间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;重剑无锋，&quot;</span>);</span><br><span class="line">        builder.insert(<span class="number">5</span>,<span class="string">&quot;大巧无工。&quot;</span>);</span><br><span class="line">        System.out.println(builder);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><code>StringBuilder replace(int start,int end,String str)</code></li></ol><p><code>StringBuilder </code>类中的<code>replace(int start, int end, String str)</code>方法用于替换<code>StringBuilder</code>对象中指定位置的字符序列。<br>该方法会将从<code>start</code>到<code>end</code>(<strong>不包括end</strong>)的字符替换为新提供的字符串<code> str</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReplace</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;xiaohua&quot;</span>);</span><br><span class="line">       builder.replace(<span class="number">0</span>,<span class="number">7</span>,<span class="string">&quot;Camellia&quot;</span>);</span><br><span class="line">       System.out.println(builder);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol start="6"><li><code>StringBuilder reverse()</code></li></ol><p><code>StringBuilder </code>类中的<code>reverse()</code>方法用于将字符串反转。它会改变<code>StringBuilder</code>对象中的字符顺序，使得字符串中的字符按相反的顺序排列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReverse</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Camellia&quot;</span>);</span><br><span class="line">       System.out.println(builder.reverse());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol start="7"><li><code>void setCharAt(int index,char ch)</code></li></ol><p>在 Java 的<code>StringBuilder</code>类中，<code>setCharAt(int index, char ch) </code>方法用于将指定索引位置的字符替换为新的字符。<br>这个方法是对内部字符数组的直接操作，因此它可以在<code>StringBuilder</code>对象的原始数据上进行修改，而不需要创建新的字符串对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSetCharAt</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Cameliia&quot;</span>);</span><br><span class="line">        builder.setCharAt(<span class="number">5</span>,<span class="string">&#x27;l&#x27;</span>);</span><br><span class="line">        System.out.println(builder);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="8"><li><code>void setLength(int newLength)</code></li></ol><p>在 Java 的 <code>StringBuilder</code> 类中，<code>setLength(int newLength)</code> 方法用于设置字符串的长度。<br>这个方法可以用来增加或减少 <code>StringBuilder</code> 对象中字符的数量。当你使用 <code>setLength</code> 方法时，它会调整 <code>StringBuilder</code> 中实际存储的字符数组的大小，以符合指定的长度。<br>如果新长度小于当前长度，超出的部分将被截断；如果新长度大于当前长度，原字符串的末尾会填充空格字符（如果没有指定其他字符填充的话）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSetLength</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Camellia.xiaohua&quot;</span>);</span><br><span class="line">      builder.setLength(<span class="number">8</span>);</span><br><span class="line">       System.out.println(builder);    <span class="comment">// Camellia</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注：</p><ul><li>StringBuffer和StringBuilder方法基本相同，除非在涉及多线程的问题上。</li><li>在多线程部分在具体学习StringBuffer</li><li>还有一些方法和String基本相同。</li></ul></blockquote><h2 id="四、性能分析（String、StringBuilder）"><a href="#四、性能分析（String、StringBuilder）" class="headerlink" title="四、性能分析（String、StringBuilder）"></a>四、性能分析（String、StringBuilder）</h2><h3 id="4-1-String"><a href="#4-1-String" class="headerlink" title="4.1 String"></a>4.1 String</h3><ol><li><p><strong>不可变性</strong>：<code>String</code> 对象在创建后是不可变的。这意味着每当你对一个 <code>String</code> 对象进行拼接或修改操作时，实际上会创建一个新的 <code>String</code> 对象。这种特性导致了以下几个性能影响：</p><ul><li><strong>内存使用</strong>：每次拼接都会生成新的 <code>String</code> 对象，这会导致大量的内存分配和垃圾回收。</li><li><strong>性能</strong>：频繁的字符串拼接操作会导致性能下降，因为每次拼接都会产生新的字符串实例，并且每次操作后都需要进行垃圾回收。</li></ul></li><li><p><strong>适用场景</strong>：适用于较少修改的字符串，或不需要频繁进行字符串拼接的场景。</p></li></ol><h3 id="4-2-StringBuilder"><a href="#4-2-StringBuilder" class="headerlink" title="4.2 StringBuilder"></a>4.2 StringBuilder</h3><ol><li><p><strong>可变性</strong>：<code>StringBuilder</code> 是可变的，这意味着你可以在同一个对象上多次修改字符串内容，而不需要创建新的对象。这有以下几个优势：</p><ul><li><strong>内存使用</strong>：由于避免了不必要的对象创建，<code>StringBuilder</code> 在进行多次拼接时更加节省内存。</li><li><strong>性能</strong>：<code>StringBuilder</code> 在进行字符串拼接时通常比 <code>String</code> 更高效，因为它直接在内部的字符数组上进行操作，而不是生成新的字符串对象。</li></ul></li><li><p><strong>适用场景</strong>：适用于频繁进行字符串拼接或修改的场景。</p></li></ol><h3 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h3><ul><li><strong>内存开销</strong>：<code>StringBuilder</code> 由于不需要为每次拼接操作创建新对象，因此在频繁拼接的情况下，相较于 <code>String</code> 更加节省内存。</li><li><strong>性能</strong>：在进行大量字符串拼接时，<code>StringBuilder</code> 显示出比 <code>String</code> 更高的性能。因为它通过内部的字符数组直接操作，避免了每次操作后的对象创建和垃圾回收。</li><li><strong>线程安全性</strong>：<code>String</code> 是线程安全的，因为它的不可变性保证了多个线程访问时不会发生状态变化。而 <code>StringBuilder</code> 由于是可变的，在多线程环境中使用时需要额外的同步措施。</li></ul><h3 id="4-3-代码测试"><a href="#4-3-代码测试" class="headerlink" title="4.3 代码测试"></a>4.3 代码测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStringPerformance</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="type">long</span> begin=System.currentTimeMillis();</span><br><span class="line">   String s=<span class="string">&quot;&quot;</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">500000</span>;i++)&#123;</span><br><span class="line">      s+=i;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">long</span> end=System.currentTimeMillis();</span><br><span class="line">   System.out.println(<span class="string">&quot;总耗时：&quot;</span>+(end-begin)+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//总耗时：80646毫秒,相当于80多秒。</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStringBuilderPerformance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">long</span> begin=System.currentTimeMillis();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">500000</span>;i++)&#123;</span><br><span class="line">            s.append(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> end=System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;总耗时：&quot;</span>+(end-begin)+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//总耗时：20毫秒</span></span><br></pre></td></tr></table></figure><blockquote><p>相差太多，根本不是一个量级的。推荐频繁拼串使用StringBuilder。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第04章05节 查询DQL--数据处理函数（if&amp;cast&amp;加密函数）</title>
      <link href="/2024/06/06/MySQL/9.%20%E7%AC%AC04%E7%AB%A005%E8%8A%82-%E6%9F%A5%E8%AF%A2DQL-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%EF%BC%88if-cast-%E5%8A%A0%E5%AF%86%E5%87%BD%E6%95%B0%EF%BC%89/"/>
      <url>/2024/06/06/MySQL/9.%20%E7%AC%AC04%E7%AB%A005%E8%8A%82-%E6%9F%A5%E8%AF%A2DQL-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%EF%BC%88if-cast-%E5%8A%A0%E5%AF%86%E5%87%BD%E6%95%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="if-cast-MD5加密函数"><a href="#if-cast-MD5加密函数" class="headerlink" title="if&amp;cast&amp;MD5加密函数"></a>if&amp;cast&amp;MD5加密函数</h1><h2 id="一、if函数"><a href="#一、if函数" class="headerlink" title="一、if函数"></a>一、if函数</h2><p>如果条件为TRUE则返回“YES”，如果条件为FALSE则返回“NO”：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> IF(<span class="number">500</span><span class="operator">&lt;</span><span class="number">1000</span>, &quot;YES&quot;, &quot;NO&quot;);</span><br></pre></td></tr></table></figure><p>例如：如果工资高于3000，则输出1，反之则输出0</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061506233.png" alt="image.png" style="zoom:67%;" /><p>再例如：如果名字是SMITH的，工资上调10%，其他员工工资正常显示。</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061508857.png" alt="image.png" style="zoom:67%;" /><p>再例如：工作岗位是MANAGER的工资上调10%，是SALESMAN的工资上调20%，其他岗位工资正常。</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061511739.png" alt="image.png" style="zoom:80%;" /><p><strong>上面这个需求也可以使用：case.. when.. then.. when.. then.. else.. end来完成：</strong></p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061512218.png" alt="image.png" style="zoom: 67%;" /><h2 id="二、cast函数"><a href="#二、cast函数" class="headerlink" title="二、cast函数"></a>二、cast函数</h2><p>cast函数用于将值从<strong>一种数据类型转换为表达式中指定的另一种数据类型</strong><br>语法：<code>cast ( 值 as 数据类型 )</code><br>例如：cast(‘2020-10-11’ as date)，表示将字符串’2020-10-11’转换成日期date类型。<br>在使用cast函数时，可用的数据类型包括：</p><ul><li><code>date</code>：日期类型</li><li><code>time</code>：时间类型</li><li><code>datetime</code>：日期时间类型</li><li><code>signed</code>：有符号的int类型（有符号指的是正数负数）</li><li><code>char</code>：定长字符串类型</li><li><code>decimal</code>：浮点型</li></ul><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061522577.png" alt="image.png" style="zoom:67%;" /><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061522022.png" alt="image.png" style="zoom:67%;" /><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061522487.png" alt="image.png" style="zoom:67%;" /><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061522686.png" alt="image.png" style="zoom:67%;" /><h2 id="三、加密函数"><a href="#三、加密函数" class="headerlink" title="三、加密函数"></a>三、加密函数</h2><p>md5函数，可以将给定的字符串经过md5算法进行加密处理，字符串经过加密之后会生成一个固定长度32位的字符串，md5加密之后的密文通常是不能解密的：</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061528583.png" alt="image.png" style="zoom:67%;" /><p>了解即可，一般在Java程序中调用API编写加密算法，在加密之后再存入数据库。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第04章05节 查询DQL--数据处理函数（日期和时间）</title>
      <link href="/2024/06/06/MySQL/10.%20%E7%AC%AC04%E7%AB%A005%E8%8A%82-%E6%9F%A5%E8%AF%A2DQL-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%EF%BC%88%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%EF%BC%89/"/>
      <url>/2024/06/06/MySQL/10.%20%E7%AC%AC04%E7%AB%A005%E8%8A%82-%E6%9F%A5%E8%AF%A2DQL-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%EF%BC%88%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="数据处理函数-日期和时间相关函数"><a href="#数据处理函数-日期和时间相关函数" class="headerlink" title="数据处理函数(日期和时间相关函数)"></a>数据处理函数(日期和时间相关函数)</h1><h2 id="一、获取当前日期和时间"><a href="#一、获取当前日期和时间" class="headerlink" title="一、获取当前日期和时间"></a>一、获取当前日期和时间</h2><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061026228.png" alt="image.png" style="zoom: 67%;" /><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061026926.png" alt="image.png" style="zoom: 67%;" /><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061027693.png" alt="image.png" style="zoom: 67%;" /><p><code>now()</code>和<code>sysdate()</code>的区别：</p><ul><li><code>now()</code>：获取的是执行<code>select</code>语句的时刻。</li><li><code>sysdate()</code>：获取的是执行<code>sysdate()</code>函数的时刻。</li></ul><h2 id="二、获取当前日期"><a href="#二、获取当前日期" class="headerlink" title="二、获取当前日期"></a>二、获取当前日期</h2><p>获取当前日期有三种写法，掌握任意一种即可：</p><ol><li><code>curdate()</code></li><li><code>current_date()</code></li><li><code>current_date</code></li></ol><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061030085.png" alt="image.png" style="zoom:67%;" /><h2 id="三、获取当前时间"><a href="#三、获取当前时间" class="headerlink" title="三、获取当前时间"></a>三、获取当前时间</h2><p>获取档期时间有三种写法，掌握其中一种即可：</p><ol><li><code>curtime()</code></li><li><code>current_time()</code></li><li><code>current_time</code></li></ol><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061032339.png" alt="image.png" style="zoom:67%;" /><h2 id="四、获取单独的年、月、日、时、分、秒"><a href="#四、获取单独的年、月、日、时、分、秒" class="headerlink" title="四、获取单独的年、月、日、时、分、秒"></a>四、获取单独的年、月、日、时、分、秒</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">select</span> <span class="keyword">year</span>(now());</span><br><span class="line"><span class="number">2.</span> <span class="keyword">select</span> <span class="keyword">month</span>(now());</span><br><span class="line"><span class="number">3.</span> <span class="keyword">select</span> <span class="keyword">day</span>(now());</span><br><span class="line"><span class="number">4.</span> <span class="keyword">select</span> <span class="keyword">hour</span>(now());</span><br><span class="line"><span class="number">5.</span> <span class="keyword">select</span> <span class="keyword">minute</span>(now());</span><br><span class="line"><span class="number">6.</span> <span class="keyword">select</span> <span class="keyword">second</span>(now());</span><br><span class="line"><span class="number">7.</span> <span class="keyword">select</span> <span class="type">date</span>(now());</span><br><span class="line"><span class="number">8.</span> <span class="keyword">select</span> <span class="type">time</span>(now());</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061034547.png" alt="image.png" style="zoom:67%;" /><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061034024.png" alt="image.png" style="zoom:67%;" /><p>注意：这些函数在使用的时候，需要传递一个日期参数给它，它可以获取到你给定的这个日期相关的年、月、日、时、分、秒的信息。<br>一次性提取一个给定日期的“年月日”部分，可以使用<code>date()</code>函数，例如：</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061036228.png" alt="image.png" style="zoom: 80%;" /><p>一次性提取一个给定日期的“时分秒”部分，可以使用<code>time()</code>函数，例如：</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061036147.png" alt="image.png" style="zoom:80%;" /><h2 id="五、date-add函数"><a href="#五、date-add函数" class="headerlink" title="五、date_add函数"></a>五、date_add函数</h2><p><code>date_add</code>函数的作用：给指定的日期添加间隔的时间，从而得到一个新的日期。<br><code>date_add</code>函数的语法格式：<code>date_add ( 日期,  interval expr 单位 )</code></p><p>例如：</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061037993.png" alt="image.png" style="zoom: 67%;" /><p>以’2023-01-03’为基准，间隔3天之后的日期：’2023-01-06’</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061038005.png" alt="image.png" style="zoom:67%;" /><p>以’2023-01-03’为基准，间隔3个月之后的日期：’2023-04-03’</p><p>详细解释一下这个函数的相关参数：<code>date_add ( 日期,  interval expr 单位 )</code></p><ul><li>日期：一个日期类型的数据</li><li><code>interval</code>：关键字，翻译为“间隔”，固定写法</li><li><code>expr</code>：指定具体的间隔量，一般是一个数字。<strong>也可以为负数，如果为负数，效果和date_sub函数相同</strong>。</li><li>单位：<ul><li><code>year</code>：年</li><li><code>month</code>：月</li><li><code>day</code>：日</li><li><code>hour</code>：时</li><li><code>minute</code>：分</li><li><code>second</code>：秒</li><li><code>microsecond</code>：微秒（1秒等于1000毫秒，1毫秒等于1000微秒）</li><li><code>week</code>：周</li><li><code>quarter</code>：季度</li></ul></li></ul><p>请分析下面这条SQL语句所表达的含义：</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061039718.png" alt="image.png" style="zoom:67%;" /><p>以上SQL表示：以2022-10-01 10:10:10为基准，在这个时间基础上添加-1微秒，也就是减去1微秒。</p><p>以上SQL也可以采用<code>date_sub</code>函数完成，例如：</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061040591.png" alt="image.png" style="zoom:67%;" /><p>另外，单位也可以采用复合型单位，例如：</p><ul><li><code>SECOND_MICROSECOND</code></li><li><code>MINUTE_MICROSECOND</code></li><li><code>MINUTE_SECOND</code>：几分几秒之后</li><li><code>HOUR_MICROSECOND</code></li><li><code>HOUR_SECOND</code></li><li><code>HOUR_MINUTE</code>：几小时几分之后</li><li><code>DAY_MICROSECOND</code></li><li><code>DAY_SECOND</code></li><li><code>DAY_MINUTE</code></li><li><code>DAY_HOUR</code>：几天几小时之后</li><li><code>YEAR_MONTH</code>：几年几个月之后</li></ul><p>如果单位采用复合型的话，expr该怎么写呢？例如单位采用：<code>day_hour</code>，假设我要表示3天2小时之后，怎么写？</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061041663.png" alt="image.png" style="zoom:67%;" /><p>‘3,2’这个应该很好理解，表示3天2个小时之后。’3,2’和day_hour是对应的。</p><h2 id="六、date-format日期格式化函数"><a href="#六、date-format日期格式化函数" class="headerlink" title="六、date_format日期格式化函数"></a>六、date_format日期格式化函数</h2><p><strong>将日期转换成具有某种格式的日期字符串</strong>，通常用在<strong>查询操作</strong>当中。（date类型转换成char类型）<br>语法格式：<code> date_format ( 日期 , &#39;日期格式&#39; )</code><br>该函数有两个参数：</p><ul><li>第一个参数：日期。这个参数就是即将要被格式化的日期。类型是date类型。</li><li>第二个参数：指定要格式化的格式字符串。<ul><li><code>%Y</code>：四位年份</li><li><code>%y</code>：两位年份</li><li><code>%m</code>：月份（1..12）</li><li><code>%d</code>：日（1..30）</li><li><code>%H</code>：小时（0..23）</li><li><code>%i</code>：分（0..59）</li><li><code>%s</code>：秒（0..59）</li></ul></li></ul><p>例如：获取当前系统时间，让其以这个格式展示：10:55:22  2024-06-06</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061056523.png" style="zoom: 67%;" /><blockquote><p>注意：<strong>在mysql当中，默认的日期格式就是：</strong><code>%Y-%m-%d %H:%i:%s</code>，所以当你直接输出日期数据的时候，<strong>会自动转换成该格式的字符串</strong>：</p></blockquote><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061057677.png" alt="image.png" style="zoom: 67%;" /><p>自定义员工入职日期格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal,date_format(hiredate, <span class="string">&#x27;%y/%m/%d&#x27;</span>) <span class="keyword">as</span> hiredate <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061104586.png" style="zoom:67%;" /><h2 id="七、str-to-date函数"><a href="#七、str-to-date函数" class="headerlink" title="七、str_to_date函数"></a>七、str_to_date函数</h2><p>该函数的作用是将char类型的日期字符串转换成日期类型date，通常使用在<strong>插入</strong>和<strong>修改</strong>操作当中。（char类型转换成date类型）<br>假设有一个学生表t_student，学生有一个生日的字段，类型是date类型：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_student;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_student(</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">  birth <span class="type">date</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">desc</span> t_student;</span><br></pre></td></tr></table></figure><p>我们要给这个表插入一条数据：姓名zhangsan，生日85年10月1日，执行以下insert语句：</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061406764.png" alt="image.png" style="zoom: 67%;" /><p>错误原因：日期值不正确。意思是：birth字段需要一个日期，你给的这个字符串’10&#x2F;01&#x2F;1985’我识别不了。这种情况下，我们就可以使用str_to_date函数进行类型转换：</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061407121.png" alt="image.png"></p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061407252.png" alt="image.png" style="zoom:67%;" /><p>当然，如果你提供的日期字符串格式能够被mysql解析，str_to_date函数是可以省略的，底层会自动调用该函数进行类型转换：</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061409215.png" alt="image.png" style="zoom:67%;" /><p>如果日期格式符合以上的几种格式，mysql都会自动进行类型转换的。</p><h2 id="八、dayofweek、dayofmonth、dayofyear函数"><a href="#八、dayofweek、dayofmonth、dayofyear函数" class="headerlink" title="八、dayofweek、dayofmonth、dayofyear函数"></a>八、dayofweek、dayofmonth、dayofyear函数</h2><ul><li>dayofweek：一周中的第几天（1~ 7），周日是1，周六是7。</li><li>dayofmonth：一个月中的第几天（1~31）</li><li>dayofyear：一年中的第几天（1~366）</li></ul><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061415048.png" alt="image.png" style="zoom:67%;" /><h2 id="九、last-day、datediff、timediff函数"><a href="#九、last-day、datediff、timediff函数" class="headerlink" title="九、last_day、datediff、timediff函数"></a>九、last_day、datediff、timediff函数</h2><h3 id="9-1-last-day函数"><a href="#9-1-last-day函数" class="headerlink" title="9.1 last_day函数"></a>9.1 last_day函数</h3><p>获取给定日期所在月的最后一天的日期：</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061417609.png" alt="image.png" style="zoom:67%;" /><h3 id="9-2-datediff函数"><a href="#9-2-datediff函数" class="headerlink" title="9.2 datediff函数"></a>9.2 datediff函数</h3><p>计算两个日期之间所差天数：</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061417228.png" alt="image.png" style="zoom:67%;" /><p>时分秒不算，只计算日期部分相差的天数。</p><h3 id="9-3-timediff函数"><a href="#9-3-timediff函数" class="headerlink" title="9.3 timediff函数"></a>9.3 timediff函数</h3><p>计算两个日期所差时间，例如日期1和日期2所差10:20:30，表示差10小时20分钟30秒。</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061419155.png" alt="image.png" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第04章05节 查询DQL--数据处理函数（数字）</title>
      <link href="/2024/06/06/MySQL/11.%20%E7%AC%AC04%E7%AB%A005%E8%8A%82-%E6%9F%A5%E8%AF%A2DQL-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%EF%BC%88%E6%95%B0%E5%AD%97%EF%BC%89/"/>
      <url>/2024/06/06/MySQL/11.%20%E7%AC%AC04%E7%AB%A005%E8%8A%82-%E6%9F%A5%E8%AF%A2DQL-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%EF%BC%88%E6%95%B0%E5%AD%97%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="数据处理函数（数字相关）"><a href="#数据处理函数（数字相关）" class="headerlink" title="数据处理函数（数字相关）"></a>数据处理函数（数字相关）</h1><h2 id="一、rand-和rand-x"><a href="#一、rand-和rand-x" class="headerlink" title="一、rand()和rand(x)"></a>一、rand()和rand(x)</h2><p><code>rand()</code>生成0到1的随机浮点数。</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061008351.png" alt="image.png" style="zoom: 67%;" /><p><code>rand(x)</code>生成0到1的随机浮点数，通过指定<strong>整数x</strong>来确定每次获取到相同的浮点值。</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061010454.png" alt="image.png" style="zoom: 67%;" /><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061010733.png" alt="image.png" style="zoom: 67%;" /><blockquote><p>这里的整数相当于map中的key。</p></blockquote><h2 id="二、round-x-和round-x-y-四舍五入"><a href="#二、round-x-和round-x-y-四舍五入" class="headerlink" title="二、round(x)和round(x,y)四舍五入"></a>二、round(x)和round(x,y)四舍五入</h2><p><code>round(x) </code>四舍五入，保留整数位，舍去所有小数</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061015347.png" alt="image.png" style="zoom:67%;" /><p><code>round(x,y)</code> 四舍五入，保留y位小数</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061015252.png" alt="image.png" style="zoom:67%;" /><h2 id="三、truncate-x-y-舍去"><a href="#三、truncate-x-y-舍去" class="headerlink" title="三、truncate(x, y)舍去"></a>三、truncate(x, y)舍去</h2><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061016158.png" alt="image.png" style="zoom:67%;" /><p>以上SQL表示保留两位小数，剩下的全部舍去。</p><h2 id="四、ceil与floor"><a href="#四、ceil与floor" class="headerlink" title="四、ceil与floor"></a>四、ceil与floor</h2><p>数字处理函数除了以上的之外，还有ceil和floor函数：</p><ul><li><code>ceil</code>函数：返回大于或等于数值x的最小整数</li><li><code>floor</code>函数：返回小于或等于数值x的最大整数</li></ul><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061017044.png" alt="image.png" style="zoom:67%;" /><h2 id="五、空处理"><a href="#五、空处理" class="headerlink" title="五、空处理"></a>五、空处理</h2><p><code>ifnull(x, y)</code>，空处理函数，当x为NULL时，将x当做y处理。<br><code>ifnull(comm, 0)</code>，表示如果员工的津贴是NULL时当做0处理。</p><blockquote><p>在SQL语句中，凡是有NULL参与的数学运算，最终的计算结果都是NULL：</p></blockquote><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061018489.png" alt="image.png" style="zoom:67%;" /><p>看这样一个需求：查询每个员工的年薪。（年薪 &#x3D; (月薪 + 津贴) * 12个月。注意：有的员工津贴comm是NULL。）</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061018796.png" alt="image.png" style="zoom:67%;" /><p>以上查询结果中显示SMITH等人的年薪是NULL，这是为什么，这是因为SMITH等人的津贴comm是NULL，有NULL参与的数学运算，最终结果都是NULL，显然这个需要空处理，此时就用到了ifnull函数：</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061019362.png" alt="image.png" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第04章05节 查询DQL--数据处理函数（字符串）</title>
      <link href="/2024/06/06/MySQL/12.%20%E7%AC%AC04%E7%AB%A005%E8%8A%82-%E6%9F%A5%E8%AF%A2DQL-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%EF%BC%88%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%89/"/>
      <url>/2024/06/06/MySQL/12.%20%E7%AC%AC04%E7%AB%A005%E8%8A%82-%E6%9F%A5%E8%AF%A2DQL-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%EF%BC%88%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="数据处理函数（字符串）"><a href="#数据处理函数（字符串）" class="headerlink" title="数据处理函数（字符串）"></a>数据处理函数（字符串）</h1><p>关于select语句，我们之前都是这样写：select 字段名 from 表名; 其实，这里的字段名可以看做“变量”，select后面既然可以跟变量，那么可以跟常量吗，尝试一下：</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406060930599.png" alt="image.png" style="zoom:67%;" /><p>通过以上sql的测试得知，select后面既可以跟变量，又可以跟常量。<br>以上三条SQL中前两条中100和’abc’都是常量，最后一条SQL的abc没有添加单引号，它会被当做某个表的字段名，因为没有这个字段所以报错。 </p><h2 id="一、转大写upper和ucase"><a href="#一、转大写upper和ucase" class="headerlink" title="一、转大写upper和ucase"></a>一、转大写upper和ucase</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询所有员工名字，以大写形式展现</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">upper</span>(ename) <span class="keyword">as</span> ename <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406060933248.png" alt="image.png" style="zoom:67%;" /><p>还有一个和upper函数功能相同的函数ucase，也可以转大写，了解一下即可：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询所有员工姓名，以大写形式展现</span><br><span class="line"><span class="keyword">select</span> ucase(ename) <span class="keyword">as</span> ename <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406060933712.png" alt="image.png" style="zoom:67%;" /><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询员工smith的岗位、薪资（假如你不知道数据库表中的人名是大写、小写还是大小写混合）</span><br><span class="line"><span class="keyword">select</span> ename, job, sal <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="built_in">upper</span>(ename) <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406060938378.png" style="zoom:80%;" /><p>将ename转换为大写再和字面量SMITH比较，或者将ename转换为小写再和字面量smith比较，当然MySQL大小写不敏感。</p><h2 id="二、转小写lower和lcase"><a href="#二、转小写lower和lcase" class="headerlink" title="二、转小写lower和lcase"></a>二、转小写lower和lcase</h2><p><strong>很简单，不再赘述，直接上代码：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 查询员工姓名，以小写形式展现</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">lower</span>(ename) <span class="keyword">as</span> ename <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> lcase(ename) <span class="keyword">as</span> ename <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406060940135.png" alt="image.png" style="zoom: 80%;" /><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406060940108.png" alt="image.png" style="zoom:80%;" /><h2 id="三、截取字符串substr"><a href="#三、截取字符串substr" class="headerlink" title="三、截取字符串substr"></a>三、截取字符串substr</h2><p>语法：<code>substr( &#39;被截取的字符串&#39; , 起始下标 , 截取长度)</code><br>有两种写法：<br>第一种：<code>substr ( &#39;被截取的字符串&#39; , 起始下标 , 截取长度 )</code><br>第二种：<code>substr (&#39; 被截取的字符串 &#39;,  起始下标 )</code>，当第三个参数“截取长度”缺失时，截取到字符串末尾。</p><blockquote><p>注意：起始下标从1开始，不是从0开始。（1表示从左侧开始的第一个位置，-1表示从右侧开始的第一个位置。）</p></blockquote><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406060944026.png" alt="image.png" style="zoom: 67%;" /><p>练习：找出员工名字中第二个字母是A的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> substr(ename, <span class="number">2</span>, <span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406060945011.png" alt="image.png" style="zoom: 67%;" /><p>用模糊查询也可以完成</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;_A%&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="四、length、char-length"><a href="#四、length、char-length" class="headerlink" title="四、length、char_length"></a>四、length、char_length</h2><p>在SQL中，<code>LENGTH</code> <strong>返回字符串的字节长度，适用于需要知道字符串占用多少字节空间的情况</strong>；而 <code>CHAR_LENGTH</code> <strong>返回字符串的字符长度，计算实际的字符数量</strong>，适用于需要知道字符串包含多少个字符的情况。这在处理多字节字符集（如UTF-8）时尤为重要。</p><h3 id="4-1-获取字符串长度length"><a href="#4-1-获取字符串长度length" class="headerlink" title="4.1 获取字符串长度length"></a>4.1 获取字符串长度length</h3><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406060948271.png" alt="image.png" style="zoom: 67%;" /><blockquote><p>注意：一个汉字是2个长度。</p></blockquote><h3 id="4-2-获取字符的个数char-length"><a href="#4-2-获取字符的个数char-length" class="headerlink" title="4.2 获取字符的个数char_length"></a>4.2 获取字符的个数char_length</h3><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406060956431.png" alt="image.png" style="zoom: 67%;" /><h2 id="五、字符串拼接"><a href="#五、字符串拼接" class="headerlink" title="五、字符串拼接"></a>五、字符串拼接</h2><p>语法：<code>concat ( &#39;字符串1&#39; ,  &#39;字符串2&#39; ,  &#39;字符串3&#39; .... )</code><br>拼接的字符串数量没有限制。</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061000597.png" alt="image.png" style="zoom: 67%;" /><p>注意：在mysql8之前，双竖线||也是可以完成字符串拼接的。但在mysql8之后，||只作为逻辑运算符，不能再进行字符串拼接了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;abc&#x27;</span> <span class="operator">||</span> <span class="string">&#x27;def&#x27;</span> <span class="operator">||</span> <span class="string">&#x27;xyz&#x27;</span>;</span><br></pre></td></tr></table></figure><p>mysql8之后，|| 只作为“或者”运算符，例如：找出工资高于3000或者低于900的员工姓名和薪资：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename, sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;</span> <span class="number">3000</span> <span class="operator">||</span> sal <span class="operator">&lt;</span> <span class="number">900</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061001452.png" alt="image.png" style="zoom: 67%;" /><p>mysql中可以使用+进行字符串的拼接吗？不可以，在mysql中+只作加法运算，在进行加法运算时，会将加号两边的数据尽最大的努力转换成数字再求和，如果无法转换成数字，最终运算结果通通是0</p><h2 id="六、trim"><a href="#六、trim" class="headerlink" title="六、trim"></a>六、trim</h2><h3 id="6-1-去除字符串前后空白"><a href="#6-1-去除字符串前后空白" class="headerlink" title="6.1 去除字符串前后空白"></a>6.1 去除字符串前后空白</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> concat(<span class="built_in">trim</span>(<span class="string">&#x27;    abc    &#x27;</span>), <span class="string">&#x27;def&#x27;</span>);</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061004679.png" alt="image.png" style="zoom: 67%;" /><h3 id="6-2-去除指定的前缀后缀"><a href="#6-2-去除指定的前缀后缀" class="headerlink" title="6.2 去除指定的前缀后缀"></a>6.2 去除指定的前缀后缀</h3><p>默认是去除前后空白，<strong>也可以去除指定的前缀后缀</strong>，例如：<br>去除前置0</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">trim</span>(<span class="keyword">leading</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;000111000&#x27;</span>);</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061006537.png" alt="image.png" style="zoom: 67%;" /><p>去除后置0</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">trim</span>(<span class="keyword">trailing</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;000111000&#x27;</span>);</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061007950.png" alt="image.png" style="zoom: 67%;" /><p>前置0和后置0全部去除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">trim</span>(<span class="keyword">both</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;000111000&#x27;</span>);</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406061007776.png" alt="image.png" style="zoom: 67%;" />]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第04章04节 查询DQL--distinct去重</title>
      <link href="/2024/06/06/MySQL/8.%20%E7%AC%AC04%E7%AB%A004%E8%8A%82-%E6%9F%A5%E8%AF%A2DQL-distinct%E5%8E%BB%E9%87%8D/"/>
      <url>/2024/06/06/MySQL/8.%20%E7%AC%AC04%E7%AB%A004%E8%8A%82-%E6%9F%A5%E8%AF%A2DQL-distinct%E5%8E%BB%E9%87%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="distinct去重"><a href="#distinct去重" class="headerlink" title="distinct去重"></a>distinct去重</h1><p>查询工作岗位</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> job <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406060900718.png" alt="image.png" style="zoom: 67%;" /><p>可以看到工作岗位中有重复的记录，如何在显示的时候去除重复记录呢？在字段前添加distinct关键字。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> job <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406060903807.png" alt="image.png" style="zoom:67%;" /><blockquote><p> 注意：这个去重只是将显示的结果去重，原表数据不会被更改。</p></blockquote><p>接下来测试一下，在distinct关键字前添加其它字段是否可以？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename, <span class="keyword">distinct</span> job <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p>分析一下：ename是14条记录，distinct job是5条记录，可以同时显示吗？</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406060903968.png" alt="image.png" style="zoom:67%;" /><p>报错了，通过测试得知，<strong>distinct只能出现在所有字段的最前面。</strong><br><strong>当distinct出现后，后面多个字段一定是联合去重的</strong>，我们来做两个练习就知道了：<br>练习1：找出公司中所有的工作岗位。</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406060904010.png" alt="image.png" style="zoom:67%;" /><p>练习2：找出公司中不同部门的不同工作岗位。</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406060904684.png" alt="image.png" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第04章03节 查询DQL--排序操作</title>
      <link href="/2024/06/06/MySQL/7.%20%E7%AC%AC04%E7%AB%A003%E8%8A%82-%E6%9F%A5%E8%AF%A2DQL-%E6%8E%92%E5%BA%8F%E6%93%8D%E4%BD%9C/"/>
      <url>/2024/06/06/MySQL/7.%20%E7%AC%AC04%E7%AB%A003%E8%8A%82-%E6%9F%A5%E8%AF%A2DQL-%E6%8E%92%E5%BA%8F%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="排序操作"><a href="#排序操作" class="headerlink" title="排序操作"></a>排序操作</h1><p>排序操作很常用，比如查询学员成绩，按照成绩降序排列。排序的SQL语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> .. <span class="keyword">from</span> .. <span class="keyword">order</span> <span class="keyword">by</span> 字段 <span class="keyword">asc</span><span class="operator">/</span><span class="keyword">desc</span></span><br></pre></td></tr></table></figure><h2 id="一、单一字段升序"><a href="#一、单一字段升序" class="headerlink" title="一、单一字段升序"></a>一、单一字段升序</h2><p>查询员工的编号、姓名、薪资，按照薪资升序排列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,ename,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406060240312.png" alt="image.png" style="zoom:80%;" /><h2 id="二、单一字段降序"><a href="#二、单一字段降序" class="headerlink" title="二、单一字段降序"></a>二、单一字段降序</h2><p>查询员工的编号、姓名、薪资，按照薪资降序排列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,ename,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406060240593.png" alt="image.png" style="zoom:80%;" /><h2 id="三、默认采用升序"><a href="#三、默认采用升序" class="headerlink" title="三、默认采用升序"></a>三、默认采用升序</h2><p>查询员工的编号、姓名、薪资，按照薪资升序排列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,ename,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406060240960.png" alt="image.png" style="zoom:80%;" /><p>查询员工的编号、姓名，按照姓名升序排列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,ename <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> ename;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406060241490.png" alt="image.png" style="zoom:80%;" /><h2 id="四、多个字段排序"><a href="#四、多个字段排序" class="headerlink" title="四、多个字段排序"></a>四、多个字段排序</h2><p>查询员工的编号、姓名、薪资，按照薪资升序排列，如果薪资相同的，再按照姓名升序排列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,ename,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">asc</span>, ename <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406060241669.png" alt="image.png" style="zoom:80%;" /><h2 id="五、where和order-by的位置"><a href="#五、where和order-by的位置" class="headerlink" title="五、where和order by的位置"></a>五、where和order by的位置</h2><p>找出岗位是MANAGER的员工姓名和薪资，按照薪资升序排列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406060242242.png" alt="image.png" style="zoom:80%;" /><p>找出岗位是MANAGER的员工姓名和薪资，按照年资升序排列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal<span class="operator">*</span><span class="number">12</span> <span class="keyword">as</span> yearsal <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> yearsal <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202406060237470.png"></p><p><strong>通过这个例子主要是想告诉大家：where先执行，order by语句是最后执行的。</strong></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>String正则表达式相关方法</title>
      <link href="/2024/06/05/Java%20SE/22.%20String%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2024/06/05/Java%20SE/22.%20String%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="String正则表达式相关方法"><a href="#String正则表达式相关方法" class="headerlink" title="String正则表达式相关方法"></a>String正则表达式相关方法</h1><ol><li><p><code>String replace(CharSequence target,CharSequence replacement)</code><br>String 类中的 replace 方法用于将字符串中的某个子字符串替换为另一个子字符串。<br>该方法有两个参数：target 和 replacement，分别表示需要替换的子字符串和用于替换的新子字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReplace</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//该方法不涉及正则表达式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">java</span> <span class="operator">=</span> <span class="string">&quot;C++GoC#C++Python&quot;</span>.replace(<span class="string">&quot;C++&quot;</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        System.out.println(java);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>String replaceAll(String regex,String replacement)</code><br>String 类中的 replaceAll 方法用于将字符串中所有匹配指定正则表达式的子字符串替换为另一个子字符串。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReplaceAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;a1b2c3d54e43f&quot;</span>.replaceAll(<span class="string">&quot;\\d&quot;</span>, <span class="string">&quot;&quot;</span>);  <span class="comment">//将所有数字替换为空白</span></span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>String[] split(String regex)</code><br>String 类中的 split 方法用于根据一个正则表达式将字符串拆分为子字符串数组。<br>这个方法允许你使用正则表达式来定义拆分点，从而能灵活地处理各种字符串格式。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSplit</span><span class="params">()</span>&#123;</span><br><span class="line">    String[] split = <span class="string">&quot;重 剑 无 锋，大 巧 无 工。&quot;</span>.split(<span class="string">&quot;\\s|，|。&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(String s:split) System.out.println(s);</span><br><span class="line">    String data=<span class="string">&quot;name=camellia&amp;password=123&amp;email=camellia@gmail.com&amp;gender=女&quot;</span>;</span><br><span class="line">    String[] params = data.split(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(String param :params) System.out.println(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>boolean matches(String regex)</code><br>String 类中的 matches 方法用于判断字符串是否完全匹配给定的正则表达式。这个方法在字符串匹配方面非常有用，可以用于验证输入是否符合特定的格式。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMatches</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//邮箱地址的正则表达式</span></span><br><span class="line">       String emailRegExp=<span class="string">&quot;^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$&quot;</span>;</span><br><span class="line">       String email=<span class="string">&quot;camellia@gmail.com&quot;</span>;</span><br><span class="line">       System.out.println(email.matches(emailRegExp));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用正则表达式</title>
      <link href="/2024/06/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/2.%20%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2024/06/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/2.%20%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="校验数字的表达式"><a href="#校验数字的表达式" class="headerlink" title="校验数字的表达式"></a>校验数字的表达式</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1. 数字：^[0-9]*$</span><br><span class="line"></span><br><span class="line">2. n位的数字：^\d&#123;n&#125;$</span><br><span class="line"></span><br><span class="line">3. 至少n位的数字：^\d&#123;n,&#125;$</span><br><span class="line"></span><br><span class="line">4. m-n位的数字：^\d&#123;m,n&#125;$</span><br><span class="line"></span><br><span class="line">5. 零和非零开头的数字：^(0|[1-9][0-9]*)$</span><br><span class="line"></span><br><span class="line">6. 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$</span><br><span class="line"></span><br><span class="line">7. 带1-2位小数的正数或负数：^(\-)?\d+(\.\d&#123;1,2&#125;)?$</span><br><span class="line"></span><br><span class="line">8. 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$</span><br><span class="line"></span><br><span class="line">9. 有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$</span><br><span class="line"></span><br><span class="line">10. 有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$</span><br><span class="line"></span><br><span class="line">11. 非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\+?[1-9][0-9]*$</span><br><span class="line"></span><br><span class="line">12. 非零的负整数：^\-[1-9][]0-9&quot;*$ 或 ^-[1-9]\d*$</span><br><span class="line"></span><br><span class="line">13. 非负整数：^\d+$ 或 ^[1-9]\d*|0$</span><br><span class="line"></span><br><span class="line">14. 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</span><br><span class="line"></span><br><span class="line">15. 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</span><br><span class="line"></span><br><span class="line">16. 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</span><br><span class="line"></span><br><span class="line">17. 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</span><br><span class="line"></span><br><span class="line">18. 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</span><br><span class="line"></span><br><span class="line">19. 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</span><br></pre></td></tr></table></figure><h1 id="校验字符的表达式"><a href="#校验字符的表达式" class="headerlink" title="校验字符的表达式"></a>校验字符的表达式</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1. 汉字：^[\u4e00-\u9fa5]&#123;0,&#125;$</span><br><span class="line"></span><br><span class="line">2. 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$</span><br><span class="line"></span><br><span class="line">3. 长度为3-20的所有字符：^.&#123;3,20&#125;$</span><br><span class="line"></span><br><span class="line">4. 由26个英文字母组成的字符串：^[A-Za-z]+$</span><br><span class="line"></span><br><span class="line">5. 由26个大写英文字母组成的字符串：^[A-Z]+$</span><br><span class="line"></span><br><span class="line">6. 由26个小写英文字母组成的字符串：^[a-z]+$</span><br><span class="line"></span><br><span class="line">7. 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</span><br><span class="line"></span><br><span class="line">8. 由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;3,20&#125;$</span><br><span class="line"></span><br><span class="line">9. 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</span><br><span class="line"></span><br><span class="line">10. 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]&#123;2,20&#125;$</span><br><span class="line"></span><br><span class="line">11. 可以输入含有^%&amp;&#x27;,;=?$\&quot;等字符：[^%&amp;&#x27;,;=?$\x22]+</span><br><span class="line"></span><br><span class="line">12. 禁止输入含有~的字符：[^~\x22]+</span><br></pre></td></tr></table></figure><h1 id="特殊需求表达式"><a href="#特殊需求表达式" class="headerlink" title="特殊需求表达式"></a>特殊需求表达式</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">1. Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</span><br><span class="line"></span><br><span class="line">2. 域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</span><br><span class="line"></span><br><span class="line">3. InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</span><br><span class="line"></span><br><span class="line">4. 手机号码：^(13[0-9]|14[0-9]|15[0-9]|16[0-9]|17[0-9]|18[0-9]|19[0-9])\d&#123;8&#125;$ (由于工信部放号段不定时，所以建议使用泛解析 ^([1][3,4,5,6,7,8,9])\d&#123;9&#125;$)</span><br><span class="line"></span><br><span class="line">5. 电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$ </span><br><span class="line"></span><br><span class="line">6. 国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125; </span><br><span class="line"></span><br><span class="line">7. 18位身份证号码(数字、字母x结尾)：^((\d&#123;18&#125;)|([0-9x]&#123;18&#125;)|([0-9X]&#123;18&#125;))$</span><br><span class="line"></span><br><span class="line">8. 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</span><br><span class="line"></span><br><span class="line">9. 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$</span><br><span class="line"></span><br><span class="line">10. 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$  </span><br><span class="line"></span><br><span class="line">11. 日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</span><br><span class="line"></span><br><span class="line">12. 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</span><br><span class="line"></span><br><span class="line">13. 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ </span><br><span class="line"></span><br><span class="line">14. xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$</span><br><span class="line"></span><br><span class="line">15. 中文字符的正则表达式：[\u4e00-\u9fa5]</span><br><span class="line"></span><br><span class="line">16. 双字节字符：[^\x00-\xff]    (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</span><br><span class="line"></span><br><span class="line">17. 空白行的正则表达式：\n\s*\r    (可以用来删除空白行)</span><br><span class="line"></span><br><span class="line">18. HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt;    (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</span><br><span class="line"></span><br><span class="line">19. 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$)    (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</span><br><span class="line"></span><br><span class="line">20. 腾讯QQ号：[1-9][0-9]&#123;4,&#125;    (腾讯QQ号从10000开始)</span><br><span class="line"></span><br><span class="line">21. 中国邮政编码：[1-9]\d&#123;5&#125;(?!\d)    (中国邮政编码为6位数字)</span><br><span class="line"></span><br><span class="line">22. IP地址：\d+\.\d+\.\d+\.\d+    (提取IP地址时有用)</span><br><span class="line"></span><br><span class="line">23. IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式介绍</title>
      <link href="/2024/06/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1.%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BB%8B%E7%BB%8D/"/>
      <url>/2024/06/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1.%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">note</p><!-- toc --></div><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式（Regular Expression，简称正则或regex）是一种用于匹配文本模式的强大工具。<br>它被广泛应用于文本处理、数据验证、信息提取等领域。正则表达式使用特定的语法规则来描述文本的搜索模式。</p><h2 id="正则表达式常见符号"><a href="#正则表达式常见符号" class="headerlink" title="正则表达式常见符号"></a>正则表达式常见符号</h2><ol><li>元字符<ul><li><code>.</code>：匹配除换行符以外的任何单个字符。</li><li><code>\w</code>：匹配一个单词字符（字母、数字或下划线）</li><li><code>\s</code>：匹配一个空白字符（空格、制表符、换页符等）。</li><li><code>\d</code>：匹配一个数字字符。</li><li><code>\b</code>：匹配单词的开始或者结束。</li><li><code>^</code>：匹配字符串的开头。</li><li><code>$</code>：匹配字符串的结尾。</li></ul></li><li>转义字符<ul><li><code>\.</code>：表示一个普通的.字符。</li><li><code>\*</code>：表示一个普通的*字符。</li><li>等. . .</li></ul></li><li>重复次数<ul><li><code>*</code>：重复零次或者更多次。</li><li><code>+</code>：重复一次或者更多次。</li><li><code>?</code>：重复零次或者一次。</li><li><code>&#123;n&#125;</code>：重复n次。</li><li><code>&#123;n,&#125;</code>：重复n次或者更多次。</li><li><code>&#123;n,m&#125;</code>：重复n到m次。</li></ul></li><li>字符类<code>[]</code><ul><li><code>[abcdef]</code>：匹配abcdef这几个字符中的任意一个字符。</li><li><code>[0-9]</code>：匹配0-9中的任意一个数字。</li><li><code>[a-zA-Z0-9]</code>：匹配a-z、A-Z、0-9的任意一个字符。</li><li><code>[.?!]</code>：匹配标点符号。（.或？或！）</li><li><code>[abc-]</code>：匹配abc-四个字符中的任意一个字符。（注意：-只能出现在末尾，如果-在中间则表示区间）</li></ul></li><li>分支条件<code>|</code><ul><li><code>0\d&#123;2&#125;-\d&#123;8&#125;|0\d&#123;3&#125;-\d&#123;7&#125;</code>：这个表达式能匹配两种以连字符分割的电话号码。一种是三位区号，八位本地号（eg：010-12345678）。另一种是四位区号，七位本地号（eg：0376-1234567）。</li></ul></li><li>分组<code>()</code><ul><li><code>(\d&#123;1,3&#125;.)&#123;3&#125;\d&#123;1,3&#125;</code>：是一个简单的ip匹配表达式，其中<code>(\d&#123;1,3&#125;.)</code>匹配由1到3个数字和一个点 . 组成的模式，重复三次。</li></ul></li><li>反义<ul><li><code>\W</code>：匹配任意不是字母、数字、下划线、汉字的字符，相当于 <code>[^a-zA-Z0-9_]</code></li><li><code>\S</code>：匹配任意不是空白符的字符。</li><li><code>\D</code>：匹配任意非数字的字符。</li><li><code>\B</code>：匹配不是以单词开头或结束的位置。</li><li><code>[^x]</code>：匹配除了x以外的任意字符。</li><li><code>[^aeiou]</code>：匹配除了aeiou这几个字母以外的任意字符。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>String的常用方法</title>
      <link href="/2024/06/02/Java%20SE/21.%20String%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2024/06/02/Java%20SE/21.%20String%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="字符串的常用方法"><a href="#字符串的常用方法" class="headerlink" title="字符串的常用方法"></a>字符串的常用方法</h1><h2 id="一、第一部分"><a href="#一、第一部分" class="headerlink" title="一、第一部分"></a>一、第一部分</h2><h3 id="1-1-char-charAt-int-index"><a href="#1-1-char-charAt-int-index" class="headerlink" title="1.1  char  charAt(int index)"></a>1.1  char  charAt(int index)</h3><p><code>charAt(int index) </code>方法在 Java 中用于从字符串中获取指定索引位置的字符。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCharAt</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;重剑无锋，大道无工。&quot;</span>;</span><br><span class="line">    System.out.println(str.charAt(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-int-length"><a href="#1-2-int-length" class="headerlink" title="1.2 int length()"></a>1.2 int length()</h3><p>对于字符串，<code>length() </code>是一个方法，用于获取字符串的长度（即字符串中字符的个数）。   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLength</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//注意：数组是length属性，字符串是length()方法。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;重剑无锋，大道无工。&quot;</span>.length());</span><br><span class="line">        <span class="type">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        System.out.println(arr.length);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-boolean-isEmpty"><a href="#1-3-boolean-isEmpty" class="headerlink" title="1.3 boolean isEmpty()"></a>1.3 boolean isEmpty()</h3><p><code>isEmpty() </code>方法在 Java 中用于检查字符串是否为空。该方法返回一个布尔值<code>true</code>或 <code>false</code>，用以指示字符串是否不包含任何字符。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIsEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//只要数组长度为0，就是空。</span></span><br><span class="line">        String s=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        System.out.println(s.isEmpty());   <span class="comment">//true</span></span><br><span class="line">        s=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        System.out.println(s.isEmpty());   <span class="comment">//false</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-boolean-equals-Object-anObject"><a href="#1-4-boolean-equals-Object-anObject" class="headerlink" title="1.4 boolean equals(Object anObject)"></a>1.4 boolean equals(Object anObject)</h3><p><code>equals(Object anObject) </code>方法在 Java 中用于比较两个对象是否相等。<strong>对于字符串对象</strong>，<code>equals </code>方法比较的是字符串的内容，而不是它们的引用地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEquals</span><span class="params">()</span>&#123;</span><br><span class="line">        String s1=<span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        String s2=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        System.out.println(s1.equals(s2));  <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-boolean-equalsIgnoreCase-String-anotherString"><a href="#1-5-boolean-equalsIgnoreCase-String-anotherString" class="headerlink" title="1.5 boolean equalsIgnoreCase(String anotherString)"></a>1.5 boolean equalsIgnoreCase(String anotherString)</h3><p><code>equalsIgnoreCase(String anotherString) </code>方法在 Java 中用于比较两个字符串是否相等，而忽略大小写。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEquals</span><span class="params">()</span>&#123;</span><br><span class="line">      String s3=<span class="string">&quot;Java&quot;</span>;</span><br><span class="line">      String s4=<span class="string">&quot;java&quot;</span>;</span><br><span class="line">      System.out.println(s3.equals(s4));    <span class="comment">//false</span></span><br><span class="line">      System.out.println(s3.equalsIgnoreCase(s4));  <span class="comment">//true</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-boolean-contains-CharSequence-s"><a href="#1-6-boolean-contains-CharSequence-s" class="headerlink" title="1.6 boolean contains(CharSequence s)"></a>1.6 boolean contains(CharSequence s)</h3><p><code>contains(CharSequence s) </code>方法在 Java 中用于判断一个字符串是否包含指定的字符序列。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testContains</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;Hello World.java&quot;</span>.contains(<span class="string">&quot;.java&quot;</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="1-7-boolean-startsWith-String-prefix"><a href="#1-7-boolean-startsWith-String-prefix" class="headerlink" title="1.7 boolean startsWith(String prefix)"></a>1.7 boolean startsWith(String prefix)</h3><p><code>startsWith(String prefix)</code> 方法在 Java 中用于检查字符串是否以指定的前缀开始。该方法返回一个布尔值 true 或 false，用以指示字符串是否以指定的前缀开头。   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStartsWith</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;https://camelliaxiaohua.online&quot;</span>.startsWith(<span class="string">&quot;https://&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-8-boolean-endsWith-String-suffix"><a href="#1-8-boolean-endsWith-String-suffix" class="headerlink" title="1.8 boolean endsWith(String suffix)"></a>1.8 boolean endsWith(String suffix)</h3><p><code>endsWith(String suffix) </code>方法在 Java 中用于检查字符串是否以指定的后缀结尾。该方法返回一个布尔值 true 或 false，用以指示字符串是否以指定的后缀结尾。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEndsWith</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;https://camelliaxiaohua.online&quot;</span>.endsWith(<span class="string">&quot;.online&quot;</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="1-9-int-compareTo-String-anotherString"><a href="#1-9-int-compareTo-String-anotherString" class="headerlink" title="1.9 int compareTo(String anotherString)"></a>1.9 int compareTo(String anotherString)</h3><p><code>compareTo(String anotherString) </code>方法在 Java 中用于比较两个字符串的字典顺序。它返回一个整数，表示字符串的相对顺序。</p><ul><li>返回<strong>负整数</strong>，表示当前字符串在字典顺序中位于 anotherString 之前。</li><li>返回<strong>零</strong>，表示两个字符串在字典顺序中相等。</li><li>返回<strong>正整数</strong>，表示当前字符串在字典顺序中位于 anotherString 之后。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCompareTo</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;apple&quot;</span>.compareTo(<span class="string">&quot;banana&quot;</span>));  <span class="comment">//-1</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-10-int-compareToIgnoreCase-String-str"><a href="#1-10-int-compareToIgnoreCase-String-str" class="headerlink" title="1.10 int compareToIgnoreCase(String str)"></a>1.10 int compareToIgnoreCase(String str)</h3><p><code>compareToIgnoreCase(String str)</code>方法在 Java 中用于比较两个字符串的字典顺序，忽略大小写。它返回一个整数，表示字符串的相对顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">testCompareToIgnoreCase</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;apple&quot;</span>.compareTo(<span class="string">&quot;Apple&quot;</span>));    <span class="comment">// 32</span></span><br><span class="line">       System.out.println(<span class="string">&quot;apple&quot;</span>.compareToIgnoreCase(<span class="string">&quot;Apple&quot;</span>));  <span class="comment">// 0</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="1-11-int-indexOf-String-str"><a href="#1-11-int-indexOf-String-str" class="headerlink" title="1.11 int indexOf(String str)"></a>1.11 int indexOf(String str)</h3><p><code>indexOf(String str) </code>方法在 Java 中用于查找子字符串在字符串中首次出现的索引位置。如果子字符串不在字符串中，则返回-1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIndesOf</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;重剑无锋，大巧无工。&quot;</span>.indexOf(<span class="string">&quot;锋&quot;</span>));  <span class="comment">//3</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="1-12-int-indexOf-String-str-int-fromIndex"><a href="#1-12-int-indexOf-String-str-int-fromIndex" class="headerlink" title="1.12 int indexOf(String str , int fromIndex)"></a>1.12 int indexOf(String str , int fromIndex)</h3><p><code>indexOf(String str, int fromIndex) </code>方法在 Java 中用于查找子字符串在字符串中首次出现的索引位置，从指定的索引位置开始。如果子字符串不在字符串中，则返回-1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIndesOf</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;重剑无锋，大巧无工。&quot;</span>.indexOf(<span class="string">&quot;工&quot;</span>,<span class="number">5</span>));  <span class="comment">// 8</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-13-int-lastIndexOf-String-str"><a href="#1-13-int-lastIndexOf-String-str" class="headerlink" title="1.13 int lastIndexOf(String str)"></a>1.13 int lastIndexOf(String str)</h3><p><code>lastIndexOf(String str) </code>方法在 Java 中用于查找子字符串在字符串中最后一次出现的索引位置。如果子字符串不在字符串中，则返回-1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLastIndexOf</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;javac++andmysqlc++&quot;</span>.lastIndexOf(<span class="string">&quot;c++&quot;</span>));  <span class="comment">//15</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-14-int-lastIndexOf-String-str-int-fromIndex"><a href="#1-14-int-lastIndexOf-String-str-int-fromIndex" class="headerlink" title="1.14 int lastIndexOf(String str, int fromIndex)"></a>1.14 int lastIndexOf(String str, int fromIndex)</h3><p><code>lastIndexOf(String str, int fromIndex)</code> 方法在 Java 中用于查找子字符串在字符串中最后一次出现的索引位置，从指定的索引位置开始向前查找。如果子字符串不在字符串中，则返回-1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLastIndexOf</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;javac++andmysqlc++&quot;</span>.lastIndexOf(<span class="string">&quot;c++&quot;</span>,<span class="number">14</span>));  <span class="comment">//4</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="二、第二部分"><a href="#二、第二部分" class="headerlink" title="二、第二部分"></a>二、第二部分</h2><h3 id="2-1-char-toCharArray"><a href="#2-1-char-toCharArray" class="headerlink" title="2.1 char[] toCharArray()"></a>2.1 char[] toCharArray()</h3><p><code>toCharArray() </code>方法在 Java 中用于将字符串转换为一个新的字符数组。该方法返回一个字符数组，其中包含此字符串中的每个字符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testToCharArray</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">char</span>[] charArray = <span class="string">&quot;重剑无锋，大巧无工。&quot;</span>.toCharArray();</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">char</span> ch: charArray)&#123;</span><br><span class="line">          System.out.print(ch+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-String-toLowerCase"><a href="#2-2-String-toLowerCase" class="headerlink" title="2.2 String toLowerCase()"></a>2.2 String toLowerCase()</h3><p><code>toLowerCase() </code>方法在 Java 中用于将字符串转换为小写形式。该方法返回一个新的字符串，表示将此字符串中的所有字符都转换为小写后的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testToLowerCase</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Camellia.xiaohua&quot;</span>.toLowerCase());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-String-toUpperCase"><a href="#2-3-String-toUpperCase" class="headerlink" title="2.3 String toUpperCase()"></a>2.3 String toUpperCase()</h3><p><code>toUpperCase()</code> 方法在 Java 中用于将字符串转换为大写形式。该方法返回一个新的字符串，表示将此字符串中的所有字符都转换为大写后的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testToUpperCase</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Camellia.xiaohua&quot;</span>.toUpperCase());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-String-concat-String-str-以及和-的区别"><a href="#2-4-String-concat-String-str-以及和-的区别" class="headerlink" title="2.4 String concat(String str)以及和 + 的区别"></a>2.4 String concat(String str)以及和 + 的区别</h3><ol><li><code>concat(String str) </code>方法在 Java 中用于将指定的字符串连接到此字符串的末尾。该方法返回一个新的字符串，表示将指定字符串连接到此字符串末尾后的结果。   </li><li>和 + 号的区别<ul><li>+既可以求和，也可以进行字符串的拼接，底层拼接时会<strong>创建</strong>String Builder对象进行拼接，然后通过调用toString转成字符串。</li><li>+拼接null时<strong>不会出现空指针异常</strong>。</li><li>concat方法参数<strong>只能</strong>是字符串类型，拼接时<strong>不会创建</strong>StringBulider对象，拼接完成后直接返回一个新的String对象。</li><li>concat拼接null<strong>会出现空指针异常</strong>。</li><li>+使用较多，如果进行大量字符拼接，这两个都不合适。</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConcat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;重剑无锋,&quot;</span>.concat(<span class="string">&quot;大巧无工。&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-String-substring-int-beginIndex"><a href="#2-5-String-substring-int-beginIndex" class="headerlink" title="2.5 String substring(int beginIndex)"></a>2.5 String substring(int beginIndex)</h3><p><code>substring(int beginIndex)</code> 方法在 Java 中用于返回一个新的字符串，该字符串是从指定的 beginIndex 开始到此字符串末尾的一个子字符串。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSubstring</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;https://camelliaxiaohua.online&quot;</span>.substring(<span class="number">8</span>));  <span class="comment">//camelliaxiaohua.online</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-String-substring-int-beginIndex-int-endIndex"><a href="#2-6-String-substring-int-beginIndex-int-endIndex" class="headerlink" title="2.6 String substring(int beginIndex,int endIndex)"></a>2.6 String substring(int beginIndex,int endIndex)</h3><p><code>substring(int beginIndex, int endIndex)</code> 方法在 Java 中用于返回一个新的字符串，该字符串是从指定的 <code>beginIndex </code>开始到指定的 <code>endIndex </code>结束的一个子字符串。</p><blockquote><p>注意，子字符串包括 <code>beginIndex</code> 处的字符，但不包括<code>endIndex</code>处的字符。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSubstring</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;https://camelliaxiaohua.online/archives/&quot;</span>.substring(<span class="number">31</span>,<span class="number">39</span>)); <span class="comment">//archives</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-7-String-trim"><a href="#2-7-String-trim" class="headerlink" title="2.7 String trim()"></a>2.7 String trim()</h3><p><code>trim() </code>方法在 Java 中用于<strong>移除字符串两端的空白字符</strong>，包括空格、制表符（Tab）、换行符等。该方法返回一个新的字符串，表示移除两端空白字符后的结果。   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTrim</span><span class="params">()</span>&#123;</span><br><span class="line">       String s1=<span class="string">&quot;   重剑无锋  大巧无工   &quot;</span>;</span><br><span class="line">       System.out.println(s1.trim());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>去除字符串的前后空白<br>注意：trim()方法只能去除什么空白？ASCII码的空白以及制表符tab。（无法去除全角空白）</p></blockquote><h3 id="2-8-String-strip"><a href="#2-8-String-strip" class="headerlink" title="2.8 String strip()"></a>2.8 String strip()</h3><p><code>strip() </code>方法在 Java 中用于移除字符串两端的空白字符，包括空格、制表符（Tab）、换行符等。<br>这个方法与 trim() 类似，但在处理空白字符上更加全面和严格。strip() 方法是在 Java 11 中引入的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStrip</span><span class="params">()</span>&#123;</span><br><span class="line">        String s1=<span class="string">&quot;\u3000\u3000重剑无锋  大巧无工\u3000\u3000&quot;</span>;</span><br><span class="line">        System.out.println(s1.strip());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>strip可以处理全角空格，但是性能比trim弱。<br>一般很少使用全角空格，所以推荐trim。</p></blockquote><h3 id="2-9-String-stripLeading"><a href="#2-9-String-stripLeading" class="headerlink" title="2.9 String stripLeading()"></a>2.9 String stripLeading()</h3><p><code>stripLeading() </code>方法在 Java 中用于移除字符串前端的空白字符，包括空格、制表符（Tab）、换行符等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStripLeading</span><span class="params">()</span>&#123;</span><br><span class="line">        String s1=<span class="string">&quot;   重剑无锋  大巧无工   &quot;</span>;</span><br><span class="line">        System.out.println(s1.stripLeading());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-10-Stirng-stripTrailing"><a href="#2-10-Stirng-stripTrailing" class="headerlink" title="2.10 Stirng stripTrailing()"></a>2.10 Stirng stripTrailing()</h3><p><code>stripTrailing() </code>方法在 Java 中用于移除字符串后端的空白字符，包括空格、制表符（Tab）、换行符等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStripTrailing</span><span class="params">()</span>&#123;</span><br><span class="line">        String s1=<span class="string">&quot;   重剑无锋  大巧无工   &quot;</span>;</span><br><span class="line">        System.out.println(s1.stripTrailing());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-11-String-intern"><a href="#2-11-String-intern" class="headerlink" title="2.11 String intern()"></a>2.11 String intern()</h3><p><code>intern() </code>方法在 Java 中用于将字符串放入字符串池<code>（string pool）</code>中，并返回字符串池中的字符串引用。字符串池是 JVM 内部维护的一组唯一字符串对象，目的是为了优化内存使用和提高性能。</p><ul><li><strong>返回值</strong><ol><li>如果字符串池中已经包含了与该字符串内容相同的字符串，则返回池中的该字符串的引用；</li><li>否则，将该字符串添加到字符串池中，并返回其引用。</li></ol></li></ul><p><strong>工作原理</strong></p><ol><li>字符串常量池：在 Java 中，字符串常量池是一个专门存储字符串常量的区域。当你使用字面量创建字符串时，这个字符串会被自动放入字符串池中。</li><li>字符串池：当你通过 new 关键字创建字符串时，会在堆内存中创建一个新的字符串对象，不会自动将其放入字符串池中。调用 intern() 方法可以手动将其放入字符串池中。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIntern</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes=&#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>&#125;;</span><br><span class="line">        String s1=<span class="keyword">new</span> <span class="title class_">String</span>(bytes);</span><br><span class="line">        s1.intern();</span><br><span class="line">        String s2=<span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">        System.out.println(s1==s2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="三、第三部分-静态方法，直接用类名调用"><a href="#三、第三部分-静态方法，直接用类名调用" class="headerlink" title="三、第三部分(静态方法，直接用类名调用)"></a>三、第三部分(静态方法，直接用类名调用)</h2><h3 id="3-1-static-String-join-CharSequence-d-CharSequence…elements"><a href="#3-1-static-String-join-CharSequence-d-CharSequence…elements" class="headerlink" title="3.1 static String join(CharSequence d,CharSequence…elements)"></a>3.1 static String join(CharSequence d,CharSequence…elements)</h3><p><code>join(CharSequence delimiter, CharSequence... elements)</code> 是 Java 中<code>String</code>类的一个静态方法，<br>用于将多个<code>CharSequence</code>元素连接成一个字符串，中间用指定的分隔符分隔。这个方法是在 Java 8 中引入的，<br>非常方便用于构建带有分隔符的字符串，例如构建 CSV 行或路径等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJoin</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">join</span> <span class="operator">=</span> String.join(<span class="string">&quot;、&quot;</span>, <span class="string">&quot;Java&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;PHP&quot;</span>, <span class="string">&quot;Go&quot;</span>, <span class="string">&quot;C#&quot;</span>);</span><br><span class="line">        System.out.println(join);</span><br><span class="line">        String year=<span class="string">&quot;2002&quot;</span>;</span><br><span class="line">        String month=<span class="string">&quot;10&quot;</span>;</span><br><span class="line">        String day=<span class="string">&quot;01&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.join(<span class="string">&quot;/&quot;</span>, year, month, day);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-static-String-join-CharSequence-delimiter-Iterable-elements"><a href="#3-2-static-String-join-CharSequence-delimiter-Iterable-elements" class="headerlink" title="3.2 static String join(CharSequence delimiter,Iterable&lt;? extends CharSequence&gt; elements)"></a>3.2 static String join(CharSequence delimiter,Iterable&lt;? extends CharSequence&gt; elements)</h3><p>join(CharSequence delimiter, Iterable&lt;? extends CharSequence&gt; elements) 是 Java 中 String 类的一个静态方法，<br>用于将多个 CharSequence 元素连接成一个字符串，中间用指定的分隔符分隔。这个方法是在 Java 8 中引入的，<br>与上一个方法相似，但它接受一个 <strong>Iterable 对象</strong>作为参数，可以方便地<strong>处理集合类</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJoin</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建一个集合</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="string">&quot;camellia&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;xiao&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;hua&quot;</span>);</span><br><span class="line">        System.out.println(String.join(<span class="string">&quot;-&quot;</span>, list));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-static-String-valueOf"><a href="#3-3-static-String-valueOf" class="headerlink" title="3.3 static String valueOf()"></a>3.3 static String valueOf()</h3><p><code>valueOf() </code>方法是 Java 中 String 类的静态方法之一，用于将其他数据类型转换为字符串。</p><ol><li><code>public static String valueOf(boolean b)</code></li><li><code>public static String valueOf(char c)</code></li><li><code>public static String valueOf(char[] data)</code></li><li><code>public static String valueOf(char[] data, int offset, int count)</code></li><li><code>public static String valueOf(double d)</code></li><li><code>public static String valueOf(float f)</code></li><li><code>public static String valueOf(int i)</code></li><li><code>public static String valueOf(long l)</code></li><li><code>public static String valueOf(Object obj)</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第04章02节 查询DQL--条件查询</title>
      <link href="/2024/05/30/MySQL/6.%20%E7%AC%AC04%E7%AB%A002%E8%8A%82-%E6%9F%A5%E8%AF%A2DQL-%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/"/>
      <url>/2024/05/30/MySQL/6.%20%E7%AC%AC04%E7%AB%A002%E8%8A%82-%E6%9F%A5%E8%AF%A2DQL-%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h1><p>通常在进行查询操作的时候，都是查询符合某些条件的数据，很少将表中所有数据都取出来。怎么取出表的部分数据？需要在查询语句中添加条件进行数据的过滤。常见的过滤条件如下：</p><table><thead><tr><th><strong>条件</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>&#x3D;</strong></td><td>等于</td></tr><tr><td>&lt;&gt;或!&#x3D;</td><td>不等于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>between…and…</td><td>等同于 &gt;&#x3D; and &lt;&#x3D;</td></tr><tr><td>is null</td><td>为空</td></tr><tr><td>is not null</td><td>不为空</td></tr><tr><td>&lt;&#x3D;&gt;</td><td>安全等于（可读性差，很少使用了）。</td></tr><tr><td>and 或 &amp;&amp;</td><td>并且</td></tr><tr><td>or 或 &#124;&#124;</td><td>或者</td></tr><tr><td>in</td><td>在指定的值当中</td></tr><tr><td>not in</td><td>不在指定的值当中</td></tr><tr><td>exists</td><td></td></tr><tr><td>not exists</td><td></td></tr><tr><td>like</td><td>模糊查询</td></tr></tbody></table><h2 id="一、条件查询语法格式"><a href="#一、条件查询语法格式" class="headerlink" title="一、条件查询语法格式"></a>一、条件查询语法格式</h2><hr><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  过滤条件;</span><br></pre></td></tr></table></figure><p><strong>过滤条件放在where子句当中，以上语句的执行顺序是</strong>：<br>    第一步：先执行from<br>    第二步：再通过where条件过滤<br>    第三步：最后执行select，查询并将结果展示到控制台</p><h2 id="二、等于、不等于"><a href="#二、等于、不等于" class="headerlink" title="二、等于、不等于"></a>二、等于、不等于</h2><hr><h3 id="2-1-等于"><a href="#2-1-等于" class="headerlink" title="2.1 等于 &#x3D;"></a>2.1 等于 &#x3D;</h3><p>判断等量关系，支持多种数据类型，比如：数字、字符串、日期等。<br>案例1：查询月薪3000的员工编号及姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">  empno,ename</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  sal <span class="operator">=</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301706534.png" alt="image.png" style="zoom:80%;" /><p>案例2：查询员工FORD的岗位及月薪</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">job, sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">ename <span class="operator">=</span> <span class="string">&#x27;FORD&#x27;</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301706877.png" alt="image.png" style="zoom:80%;" /><p>存储在表emp中的员工姓名是FORD，全部大写，如果在查询的时候，写成全部小写会怎样呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">job, sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">ename <span class="operator">=</span> <span class="string">&#x27;ford&#x27;</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301706699.png" alt="image.png" style="zoom:80%;" /><p>通过测试发现，即使写成小写ford，也是可以查询到结果的，<strong>不过这里需要注意的是：在Oracle数据库当中是查询不到数据的，Oracle的语法要比MySQL的语法严谨。对于SQL语句本身来说是不区分大小写的，但是对于表中真实存储的数据，大写A和小写a还是不一样的，这一点Oracle做的很好。MySQL的语法更随性。另外在Oracle当中，字符串是必须使用单引号括起来的，但在MySQL当中，字符串可以使用单引号，也可以使用双引号</strong>，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">job, sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  ename <span class="operator">=</span> &quot;FORD&quot;;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301707343.png" alt="image.png" style="zoom:80%;" /><p>案例3：查询岗位是MANAGER的员工编号及姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  empno, ename</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301707413.png" alt="image.png" style="zoom:80%;" /><ul><li><input disabled="" type="checkbox"> 任务：查询工资级别是1的最低工资以及最高工资</li></ul><h3 id="2-2-不等于-或"><a href="#2-2-不等于-或" class="headerlink" title="2.2 不等于 &lt;&gt; 或 !&#x3D;"></a>2.2 不等于 &lt;&gt; 或 !&#x3D;</h3><p>判断非等量关系，支持字符串、数字、日期类型等。不等号有两种写法，第一种&lt;&gt;，第二种!&#x3D;，第二种写法和Java程序中的不等号相同，第一种写法比较诡异，不过也很好理解，比如&lt;&gt;3，表示小于3、大于3，就是不等于3。你get到了吗？<br>案例1：查询工资不是3000的员工编号、姓名、薪资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  empno,ename,sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  sal <span class="operator">&lt;&gt;</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301707330.png" alt="image.png" style="zoom:80%;" /><p>案例2：查询工作岗位不是MANAGER的员工姓名和岗位</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  ename,job</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">job <span class="operator">&lt;&gt;</span> <span class="string">&#x27;MANAGER&#x27;</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301707837.png" alt="image.png" style="zoom:80%;" /><ul><li><input disabled="" type="checkbox"> 任务：查询不在部门编号为10的部门工作的员工信息</li><li><input disabled="" type="checkbox"> </li></ul><h2 id="三、-大于、大于等于、小于、小于等于"><a href="#三、-大于、大于等于、小于、小于等于" class="headerlink" title="三、 大于、大于等于、小于、小于等于"></a>三、 大于、大于等于、小于、小于等于</h2><hr><h3 id="3-1-大于"><a href="#3-1-大于" class="headerlink" title="3.1 大于 &gt;"></a>3.1 大于 &gt;</h3><p>案例：找出薪资大于3000的员工姓名、薪资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">  ename, sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  sal <span class="operator">&gt;</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301708668.png" alt="image.png" style="zoom:80%;" /><h3 id="3-2-大于等于"><a href="#3-2-大于等于" class="headerlink" title="3.2 大于等于 &gt;&#x3D;"></a>3.2 大于等于 &gt;&#x3D;</h3><p>案例：找出薪资大于等于3000的员工姓名、薪资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">  ename, sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  sal <span class="operator">&gt;=</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301708279.png" alt="image.png" style="zoom:80%;" /><h3 id="3-3-小于"><a href="#3-3-小于" class="headerlink" title="3.3 小于 &lt;"></a>3.3 小于 &lt;</h3><p>案例：找出薪资小于3000的员工姓名、薪资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">  ename, sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  sal <span class="operator">&lt;</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301708676.png" alt="image.png" style="zoom:80%;" /><h3 id="3-4-小于等于"><a href="#3-4-小于等于" class="headerlink" title="3.4 小于等于 &lt;&#x3D;"></a>3.4 小于等于 &lt;&#x3D;</h3><p>案例：找出薪资小于等于3000的员工姓名、薪资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">  ename, sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  sal <span class="operator">&lt;=</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301708488.png" alt="image.png" style="zoom:80%;" /><h2 id="四、and"><a href="#四、and" class="headerlink" title="四、and"></a>四、and</h2><hr><p>and表示并且，还有另一种写法：&amp;&amp;<br>案例：找出薪资大于等于3000并且小于等于5000的员工姓名、薪资。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  ename,sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  sal <span class="operator">&gt;=</span> <span class="number">3000</span> <span class="keyword">and</span> sal <span class="operator">&lt;=</span> <span class="number">5000</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301708229.png" alt="image.png" style="zoom:80%;" /><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301708356.png" alt="image.png" style="zoom:80%;" /><ul><li><input disabled="" type="checkbox"> 任务：找出工资级别为2~4（包含2和4）的最低工资和最高工资。</li></ul><h2 id="五、or"><a href="#五、or" class="headerlink" title="五、or"></a>五、or</h2><hr><p>or表示或者，还有另一种写法：||<br>案例：找出工作岗位是MANAGER和SALESMAN的员工姓名、工作岗位</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">  ename, job</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">or</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301709439.png" alt="image.png" style="zoom:80%;" /><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301709556.png" alt="image.png" style="zoom:80%;" /><p>注意：这个题目描述中有这样一句话：MANAGER和SALESMAN，有的同学一看到“和”，就直接使用“and”了，因为“和”对应的英文单词是“and”，如果是这样的话，就大错特错了，因为and表示并且，使用and表示工作岗位既是MANAGER又是SALESMAN的员工，这样的员工是不存在的，因为每一个员工只有一个岗位，不可能同时从事两个岗位。所以使用and是查询不到任何结果的。如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">  ename, job</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">and</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301709173.png" alt="image.png" style="zoom:80%;" /><ul><li><input disabled="" type="checkbox"> 任务：查询20和30部门的员工信息。</li></ul><h2 id="六、and和or的优先级问题"><a href="#六、and和or的优先级问题" class="headerlink" title="六、and和or的优先级问题"></a>六、and和or的优先级问题</h2><hr><p>and和or同时出现时，<strong>and优先级较高</strong>，会先执行，<strong>如果希望or先执行，这个时候需要给or条件添加小括号</strong>。另外，以后遇到不确定的优先级时，可以通过添加小括号的方式来解决。对于优先级问题没必要记忆。<br>案例：找出薪资小于1500，并且部门编号是20或30的员工姓名、薪资、部门编号。<br>先来看一下错误写法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  ename,sal,deptno</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  sal <span class="operator">&lt;</span> <span class="number">1500</span> <span class="keyword">and</span> deptno <span class="operator">=</span> <span class="number">20</span> <span class="keyword">or</span> deptno <span class="operator">=</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301709903.png" alt="image.png" style="zoom:80%;" /><p>认真解读题意得知：薪资小于1500是一个大前提，要找出的是薪资小于1500的，满足这个条件的前提下，再找部门编号是20或30的，显然以上的运行结果中出现了薪资为1600的，为什么1600的会出现呢？这是因为“sal &lt; 1500 and deptno &#x3D; 20”结合在一起了，“depnto &#x3D; 30”成了一个独立的条件。会导致部门编号为30的所有员工全部查询出来。我们应该让“deptno &#x3D; 20 or deptno &#x3D; 30”结合在一起，正确写法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  ename,sal,deptno</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  sal <span class="operator">&lt;</span> <span class="number">1500</span> <span class="keyword">and</span> (deptno <span class="operator">=</span> <span class="number">20</span> <span class="keyword">or</span> deptno <span class="operator">=</span> <span class="number">30</span>);</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301709093.png" alt="image.png" style="zoom:80%;" /><ul><li><input disabled="" type="checkbox"> 任务：找出薪资小于1500的，并且工作岗位是CLERK和SALESMAN的员工姓名、薪资、岗位。</li></ul><h2 id="七、between…and…"><a href="#七、between…and…" class="headerlink" title="七、between…and…"></a>七、between…and…</h2><hr><p><strong>between…and…等同于 &gt;&#x3D; and &lt;&#x3D;</strong><br>做区间判断的，包含左右两个边界值。<br>它支持数字、日期、字符串等数据类型。</p><blockquote><p>between…and…在使用时一定是<strong>左小右大</strong>。左大右小时无法查询到数据。<br>between…and… 和 &gt;&#x3D; and &lt;&#x3D;只是在写法结构上有区别，执行原理和效率方面没有区别。    </p></blockquote><p>案例：找出薪资在1600到3000的员工姓名、薪资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">  ename,sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">sal <span class="keyword">between</span> <span class="number">1600</span> <span class="keyword">and</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301710996.png" alt="image.png" style="zoom:80%;" /><p>采用左大右小的方式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">  ename,sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">sal <span class="keyword">between</span> <span class="number">3000</span> <span class="keyword">and</span> <span class="number">1600</span>;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301710705.png" alt="image.png"></p><blockquote><p>没有查询到任何数据，所以在使用的时候一定要注意：<strong>左小右大</strong>。</p></blockquote><ul><li><input disabled="" type="checkbox"> 任务：查询在1982-01-23到1987-04-19之间入职的员工</li></ul><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301710232.png" alt="image.png" style="zoom:80%;" /><p>注意：以上SQL语句中日期需要加上单引号。</p><h2 id="八、is-null、is-not-null"><a href="#八、is-null、is-not-null" class="headerlink" title="八、is null、is not null"></a>八、is null、is not null</h2><hr><blockquote><p>判断某个数据是否为null，不能使用等号，只能使用 is null<br>判断某个数据是否不为null，不能使用不等号，只能使用 is not null<br>在数据库中null不是一个值，不能用等号和不等号衡量，null代表什么也没有，没有数据，没有值</p></blockquote><h3 id="8-1-is-null"><a href="#8-1-is-null" class="headerlink" title="8.1 is null"></a>8.1 is null</h3><p>案例1：找出津贴为空的员工姓名、薪资、津贴。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  ename,sal,comm</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  comm <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301710020.png" alt="image.png" style="zoom:80%;" /><p>我们使用等号，尝试一下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  ename,sal,comm</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  comm <span class="operator">=</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301710018.png" alt="image.png"></p><p>查询不到任何数据，所以判断是否为空，不能用等号。</p><h3 id="8-2-is-not-null"><a href="#8-2-is-not-null" class="headerlink" title="8.2 is not null"></a>8.2 is not null</h3><p>案例2：找出津贴不为空的员工姓名、薪资、津贴</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  ename,sal,comm</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  comm <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301710780.png" alt="image.png"></p><h2 id="九、in、not-in"><a href="#九、in、not-in" class="headerlink" title="九、in、not in"></a>九、in、not in</h2><hr><h3 id="9-1-in"><a href="#9-1-in" class="headerlink" title="9.1 in"></a>9.1 in</h3><p>job in(‘MANAGER’,’SALESMAN’,’CLERK’) 等同于 job &#x3D; ‘MANAGER’ or job &#x3D; ‘SALESMAN’ or job &#x3D; ‘CLERK’<br>sal in(1600, 3000, 5000) 等同于 sal &#x3D; 1600 or sal &#x3D; 3000 or sal &#x3D; 5000<br><strong>in后面有一个小括号，小括号当中有多个值，值和值之间采用逗号隔开</strong><br>sal in(1500, 5000)，需要注意的是：这个并不是说薪资在1500到5000之间，in不代表区间，表示sal是1500的和sal是5000的<br>案例1：找出工作岗位是MANAGER和SALESMAN的员工姓名、薪资、工作岗位<br>第一种：使用or</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  ename,sal,job</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">or</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301710046.png" alt="image.png" style="zoom:80%;" /><p>第二种：使用in</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  ename,sal,job</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  job <span class="keyword">in</span>(<span class="string">&#x27;MANAGER&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>);</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301711501.png" alt="image.png" style="zoom:80%;" /><p>案例2：找出薪资是1500&#x2F;1600&#x2F;3000的员工姓名、工作岗位</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  ename,job</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  sal <span class="keyword">in</span>(<span class="number">1500</span>, <span class="number">1600</span>, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301711930.png" alt="image.png" style="zoom:80%;" /><ul><li><input disabled="" type="checkbox"> 任务：找出部门编号是10和20的员工编号、姓名。（要求使用两种方案）</li></ul><h3 id="9-2-not-in"><a href="#9-2-not-in" class="headerlink" title="9.2 not in"></a>9.2 not in</h3><p>job not in(‘MANAGER’,’SALESMAN’) 等同于 job &lt;&gt; ‘MANAGER’ and job &lt;&gt; ‘SALESMAN’<br>sal not in(1600, 5000) 等同于 sal &lt;&gt; 1600 and sal &lt;&gt; 5000<br>案例：找出工作岗位不是MANAGER和SALESMAN的员工姓名、工作岗位<br>第一种：使用and</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">  ename,job</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  job <span class="operator">&lt;&gt;</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">and</span> job <span class="operator">&lt;&gt;</span> <span class="string">&#x27;SALESMAN&#x27;</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301711897.png" alt="image.png" style="zoom:80%;" /><p>第二种：使用not in</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">  ename,job</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  job <span class="keyword">not</span> <span class="keyword">in</span>(<span class="string">&#x27;MANAGER&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>);</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301711080.png" alt="image.png" style="zoom:80%;" /><ul><li><input disabled="" type="checkbox"> 任务：找出薪资不是1600和3000的员工姓名、薪资。</li></ul><h3 id="9-3-in、not-in-与-NULL"><a href="#9-3-in、not-in-与-NULL" class="headerlink" title="* 9.3 in、not in 与 NULL"></a>* 9.3 in、not in 与 NULL</h3><p>先来看一下emp表中的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301712703.png" alt="image.png" style="zoom: 67%;" /><p>通过表中数据观察到，有4个员工的津贴不为NULL，剩下10个员工的津贴都是NULL。<br>写这样一条SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> comm <span class="keyword">in</span>(<span class="keyword">NULL</span>, <span class="number">300</span>);</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301712105.png" alt="image.png" style="zoom:80%;" /><p>为什么以上执行结果只有一条记录呢？分析一下：<br>首先你要知道in的执行原理实际上是采用&#x3D;和or的方式，也就是说，以上SQL语句实际上是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> comm <span class="operator">=</span> <span class="keyword">NULL</span> <span class="keyword">or</span> comm <span class="operator">=</span> <span class="number">300</span>;</span><br></pre></td></tr></table></figure><p>其中NULL不能用等号&#x3D;进行判断，所以comm &#x3D; NULL结果是false，然而中间使用的是or，所以comm &#x3D; NULL被忽略了。所以查询结果就以上一条数据。<br>通过以上的测试得知：<strong>in是自动忽略NULL的</strong>。<br>再写这样一条SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> comm <span class="keyword">not</span> <span class="keyword">in</span>(<span class="keyword">NULL</span>, <span class="number">300</span>);</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301712505.png" alt="image.png"></p><p>以上的执行结果奇怪了，为什么没有查到任何数据呢？我们分析一下：<br>首先你要知道not in的执行原理实际上是采用&lt;&gt;和and的方式，也就是说，以上SQL语句实际上是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> comm <span class="operator">&lt;&gt;</span> <span class="keyword">NULL</span> <span class="keyword">and</span> comm <span class="operator">&lt;&gt;</span> <span class="number">300</span>;</span><br></pre></td></tr></table></figure><p>其中NULL的判断不能使用&lt;&gt;，所以comm &lt;&gt; NULL结果是false，由于后面是and，and表示并且，comm &lt;&gt; NULL已经是false了，所以and右边的就没必要运算了，comm &lt;&gt; NULL and comm &lt;&gt; 300的整体运算结果就是false。所以查询不到任何数据。<br>通过以上测试得知，<strong>not in是不会自动忽略NULL的</strong>，所以在使用not in的时候一定要提前过滤掉NULL。</p><h2 id="十、in和or的效率比拼"><a href="#十、in和or的效率比拼" class="headerlink" title="十、in和or的效率比拼"></a>十、in和or的效率比拼</h2><hr><p>在MySQL当中，如何统计一个SQL语句的执行时长？</p><ul><li>可以使用这个命令：show profiles;  这个命令可以查看在mysql中执行的所有SQL以及命令的耗费时长。</li><li>show profiles; 是在mysql5.0.37之后添加的。所以要确保你的mysql版本没问题。</li><li>如何开启时长统计功能：set profiling &#x3D; 1;</li><li>查看时长统计功能是否开启：show variables like ‘%pro%’;</li><li>查看每条SQL的耗时：show profiles;</li><li>查看其中某条SQL耗时明细：show profile for query query_id;</li><li>查看最新一条SQL的耗时明细：show profile;</li><li>查看cpu，io等信息：show profile block io, cpu for query query_id;</li></ul><p>or的效率为O(n)，而in的效率为O(log n), 当n越大的时候效率相差越明显（<strong>也就是说数据量越大的时候，in的效率越高</strong>）。以下是测试过程：<br>第一步，创建测试表，并生成测试数据，测试数据为1000万条记录。数据库中关闭了query cache，因此数据库缓存不会对查询造成影响。具体的代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#创建测试的test表</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> test; </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test( </span><br><span class="line">    ID <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">    `Name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY( ID ) </span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET utf8; </span><br><span class="line"></span><br><span class="line">#创建生成测试数据的存储过程</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> pre_test; </span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pre_test() </span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>; </span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>; </span><br><span class="line">WHILE i<span class="operator">&lt;</span><span class="number">10000000</span> DO </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test ( ID,`Name` ) <span class="keyword">VALUES</span>( i, CONCAT( <span class="string">&#x27;Carl&#x27;</span>, i ) ); </span><br><span class="line"><span class="keyword">SET</span> i <span class="operator">=</span> i<span class="operator">+</span><span class="number">1</span>; </span><br><span class="line">IF i<span class="operator">%</span><span class="number">2000</span> <span class="operator">=</span> <span class="number">0</span> <span class="keyword">THEN</span> </span><br><span class="line"><span class="keyword">COMMIT</span>; </span><br><span class="line"><span class="keyword">END</span> IF; </span><br><span class="line"><span class="keyword">END</span> WHILE; </span><br><span class="line"><span class="keyword">END</span>; <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line">#执行存储过程生成测试数据</span><br><span class="line"><span class="keyword">CALL</span> pre_test();</span><br></pre></td></tr></table></figure><p>以上SQL看不懂没关系，先执行它，进行数据初始化准备工作。<br>第二步：分三种情况进行测试，分别是：<br>第1种情况：in和or所在列为主键的情形。<br>第2种情况：in和or所在列创建有索引的情形。<br>第3种情况：in和or所在列没有索引的情形。<br>每种情况又采用不同的in和or的数量进行测试。由于测试语句的数据量有4种情况，我这里就称为A组、B组、C组、D组，其中A组为3个值，B组为150个值，C组为300个值，D组为1000个值。具体的测试语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#A组</span><br><span class="line">#<span class="keyword">in</span>和<span class="keyword">or</span>中有<span class="number">3</span>条数据的情况</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test <span class="keyword">WHERE</span> id <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">23</span>,<span class="number">48</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test <span class="keyword">WHERE</span> id <span class="operator">=</span><span class="number">1</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">23</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">48</span>;</span><br><span class="line"></span><br><span class="line">#B组</span><br><span class="line">#<span class="keyword">in</span>和<span class="keyword">or</span>中有<span class="number">150</span>条数据的情况</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test <span class="keyword">WHERE</span> id <span class="keyword">IN</span> (<span class="number">59617932</span>,<span class="number">98114476</span>,<span class="number">89047409</span>,<span class="number">26968186</span>,<span class="number">56586105</span>,<span class="number">35488201</span>,<span class="number">53251989</span>,<span class="number">18182139</span>,<span class="number">71164231</span>,<span class="number">57655852</span>,<span class="number">7948544</span>,<span class="number">60658339</span>,<span class="number">50758185</span>,<span class="number">66667117</span>,<span class="number">34771253</span>,<span class="number">68699137</span>,<span class="number">27877290</span>,<span class="number">44275282</span>,<span class="number">1585444</span>,<span class="number">71219424</span>,<span class="number">90937482</span>,<span class="number">83928635</span>,<span class="number">24588528</span>,<span class="number">81933207</span>,<span class="number">9607562</span>,<span class="number">12013895</span>,<span class="number">84640278</span>,<span class="number">85549596</span>,<span class="number">53249244</span>,<span class="number">8567444</span>,<span class="number">85402877</span>,<span class="number">15040223</span>,<span class="number">54266509</span>,<span class="number">17718135</span>,<span class="number">91687882</span>,<span class="number">22930500</span>,<span class="number">94756430</span>,<span class="number">66031097</span>,<span class="number">13084573</span>,<span class="number">18137443</span>,<span class="number">89917778</span>,<span class="number">46845456</span>,<span class="number">43939093</span>,<span class="number">35943480</span>,<span class="number">18213703</span>,<span class="number">46362815</span>,<span class="number">49835919</span>,<span class="number">83137546</span>,<span class="number">2101409</span>,<span class="number">74932951</span>,<span class="number">11984477</span>,<span class="number">93113331</span>,<span class="number">77848222</span>,<span class="number">68546065</span>,<span class="number">33728734</span>,<span class="number">90793684</span>,<span class="number">44975642</span>,<span class="number">61387237</span>,<span class="number">52483391</span>,<span class="number">97716233</span>,<span class="number">49449060</span>,<span class="number">22411182</span>,<span class="number">30776331</span>,<span class="number">60597240</span>,<span class="number">6911731</span>,<span class="number">45789095</span>,<span class="number">62075344</span>,<span class="number">8379933</span>,<span class="number">97910423</span>,<span class="number">86861971</span>,<span class="number">81342386</span>,<span class="number">93423963</span>,<span class="number">83852896</span>,<span class="number">18566482</span>,<span class="number">22747687</span>,<span class="number">51420625</span>,<span class="number">75862064</span>,<span class="number">26402882</span>,<span class="number">93958561</span>,<span class="number">85202979</span>,<span class="number">97049369</span>,<span class="number">67674725</span>,<span class="number">9475653</span>,<span class="number">92302381</span>,<span class="number">78133617</span>,<span class="number">49295001</span>,<span class="number">36517340</span>,<span class="number">81387142</span>,<span class="number">15707241</span>,<span class="number">60832834</span>,<span class="number">93157830</span>,<span class="number">64171432</span>,<span class="number">58537826</span>,<span class="number">70141767</span>,<span class="number">7326025</span>,<span class="number">36632075</span>,<span class="number">9639624</span>,<span class="number">8900056</span>,<span class="number">99702164</span>,<span class="number">35108945</span>,<span class="number">87820933</span>,<span class="number">57302965</span>,<span class="number">16652391</span>,<span class="number">41845132</span>,<span class="number">62184393</span>,<span class="number">70136913</span>,<span class="number">79574630</span>,<span class="number">32562398</span>,<span class="number">94616790</span>,<span class="number">61258220</span>,<span class="number">73162018</span>,<span class="number">81644480</span>,<span class="number">19453596</span>,<span class="number">97380163</span>,<span class="number">1204733</span>,<span class="number">33357040</span>,<span class="number">84854495</span>,<span class="number">13888863</span>,<span class="number">49041868</span>,<span class="number">89272326</span>,<span class="number">38405345</span>,<span class="number">571248</span>,<span class="number">6349029</span>,<span class="number">70755321</span>,<span class="number">79307694</span>,<span class="number">60619684</span>,<span class="number">92624181</span>,<span class="number">73135306</span>,<span class="number">23279848</span>,<span class="number">95612954</span>,<span class="number">55845916</span>,<span class="number">6223606</span>,<span class="number">43836918</span>,<span class="number">37459781</span>,<span class="number">67969314</span>,<span class="number">99398872</span>,<span class="number">7616960</span>,<span class="number">37189193</span>,<span class="number">50151920</span>,<span class="number">62881879</span>,<span class="number">12364637</span>,<span class="number">33204320</span>,<span class="number">27135672</span>,<span class="number">28441504</span>,<span class="number">47373461</span>,<span class="number">87967926</span>,<span class="number">30631796</span>,<span class="number">20053540</span>,<span class="number">18735984</span>,<span class="number">83406724</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">59617932</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">98114476</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">89047409</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">26968186</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">56586105</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35488201</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">53251989</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">18182139</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">71164231</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">57655852</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">7948544</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">60658339</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">50758185</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">66667117</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">34771253</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">68699137</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">27877290</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">44275282</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">1585444</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">71219424</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">90937482</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83928635</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">24588528</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">81933207</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">9607562</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">12013895</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">84640278</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">85549596</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">53249244</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">8567444</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">85402877</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">15040223</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">54266509</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">17718135</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">91687882</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">22930500</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">94756430</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">66031097</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">13084573</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">18137443</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">89917778</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">46845456</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">43939093</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35943480</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">18213703</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">46362815</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">49835919</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83137546</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">2101409</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">74932951</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">11984477</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">93113331</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">77848222</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">68546065</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">33728734</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">90793684</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">44975642</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">61387237</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">52483391</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">97716233</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">49449060</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">22411182</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">30776331</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">60597240</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">6911731</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">45789095</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">62075344</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">8379933</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">97910423</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">86861971</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">81342386</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">93423963</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83852896</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">18566482</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">22747687</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">51420625</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">75862064</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">26402882</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">93958561</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">85202979</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">97049369</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">67674725</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">9475653</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">92302381</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">78133617</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">49295001</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">36517340</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">81387142</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">15707241</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">60832834</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">93157830</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">64171432</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">58537826</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">70141767</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">7326025</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">36632075</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">9639624</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">8900056</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">99702164</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35108945</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">87820933</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">57302965</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">16652391</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">41845132</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">62184393</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">70136913</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">79574630</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">32562398</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">94616790</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">61258220</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">73162018</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">81644480</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">19453596</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">97380163</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">1204733</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">33357040</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">84854495</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">13888863</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">49041868</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">89272326</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">38405345</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">571248</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">6349029</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">70755321</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">79307694</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">60619684</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">92624181</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">73135306</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">23279848</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">95612954</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">55845916</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">6223606</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">43836918</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">37459781</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">67969314</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">99398872</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">7616960</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">37189193</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">50151920</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">62881879</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">12364637</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">33204320</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">27135672</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">28441504</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">47373461</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">87967926</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">30631796</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">20053540</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">18735984</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83406724</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#C组</span><br><span class="line">#<span class="keyword">in</span>和<span class="keyword">or</span>中有<span class="number">300</span>条数据的情况</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test <span class="keyword">WHERE</span> id <span class="keyword">IN</span> (<span class="number">37092877</span>,<span class="number">94859722</span>,<span class="number">74276090</span>,<span class="number">8763830</span>,<span class="number">38727241</span>,<span class="number">95732954</span>,<span class="number">93414819</span>,<span class="number">55070016</span>,<span class="number">3591352</span>,<span class="number">73857925</span>,<span class="number">92290525</span>,<span class="number">15210159</span>,<span class="number">83905516</span>,<span class="number">54934589</span>,<span class="number">83004136</span>,<span class="number">31442143</span>,<span class="number">6060569</span>,<span class="number">22209206</span>,<span class="number">27649629</span>,<span class="number">11464943</span>,<span class="number">77822402</span>,<span class="number">28714780</span>,<span class="number">10058522</span>,<span class="number">62252663</span>,<span class="number">13751461</span>,<span class="number">38997875</span>,<span class="number">47320577</span>,<span class="number">64507359</span>,<span class="number">36137908</span>,<span class="number">54297630</span>,<span class="number">97411161</span>,<span class="number">56542672</span>,<span class="number">22017966</span>,<span class="number">55190708</span>,<span class="number">70072386</span>,<span class="number">24300664</span>,<span class="number">93413617</span>,<span class="number">23621629</span>,<span class="number">74772508</span>,<span class="number">62774612</span>,<span class="number">43001947</span>,<span class="number">46161388</span>,<span class="number">85563006</span>,<span class="number">70177147</span>,<span class="number">63960440</span>,<span class="number">18001207</span>,<span class="number">81734850</span>,<span class="number">10635060</span>,<span class="number">6551152</span>,<span class="number">54877885</span>,<span class="number">44426798</span>,<span class="number">73950635</span>,<span class="number">18713144</span>,<span class="number">21690065</span>,<span class="number">82153543</span>,<span class="number">26048520</span>,<span class="number">79954773</span>,<span class="number">22411093</span>,<span class="number">97307339</span>,<span class="number">74193176</span>,<span class="number">1413532</span>,<span class="number">88006544</span>,<span class="number">36062746</span>,<span class="number">24043946</span>,<span class="number">17132007</span>,<span class="number">95958217</span>,<span class="number">26112542</span>,<span class="number">27303972</span>,<span class="number">17247403</span>,<span class="number">56778979</span>,<span class="number">60928031</span>,<span class="number">69369613</span>,<span class="number">90584759</span>,<span class="number">86234538</span>,<span class="number">41726089</span>,<span class="number">25315005</span>,<span class="number">27568726</span>,<span class="number">25091624</span>,<span class="number">15307765</span>,<span class="number">83130887</span>,<span class="number">42726438</span>,<span class="number">75872353</span>,<span class="number">18991223</span>,<span class="number">47819224</span>,<span class="number">75457713</span>,<span class="number">54659391</span>,<span class="number">54889687</span>,<span class="number">65229322</span>,<span class="number">17124556</span>,<span class="number">38376043</span>,<span class="number">1989975</span>,<span class="number">45973571</span>,<span class="number">48597804</span>,<span class="number">58632319</span>,<span class="number">43388664</span>,<span class="number">97010450</span>,<span class="number">94745635</span>,<span class="number">13217373</span>,<span class="number">40472912</span>,<span class="number">40220510</span>,<span class="number">58319808</span>,<span class="number">48228318</span>,<span class="number">48936085</span>,<span class="number">86281500</span>,<span class="number">65466706</span>,<span class="number">96815281</span>,<span class="number">11751559</span>,<span class="number">50188155</span>,<span class="number">76649755</span>,<span class="number">35315411</span>,<span class="number">20360954</span>,<span class="number">17739218</span>,<span class="number">10918461</span>,<span class="number">51429591</span>,<span class="number">41447650</span>,<span class="number">65170472</span>,<span class="number">26810295</span>,<span class="number">80912347</span>,<span class="number">17157209</span>,<span class="number">75851858</span>,<span class="number">61150903</span>,<span class="number">4408208</span>,<span class="number">61200404</span>,<span class="number">6655467</span>,<span class="number">66863737</span>,<span class="number">51549112</span>,<span class="number">61951371</span>,<span class="number">14368308</span>,<span class="number">14663119</span>,<span class="number">8762531</span>,<span class="number">31765056</span>,<span class="number">30560647</span>,<span class="number">41048147</span>,<span class="number">95526521</span>,<span class="number">94929131</span>,<span class="number">56881239</span>,<span class="number">79014587</span>,<span class="number">62705983</span>,<span class="number">15892901</span>,<span class="number">66151473</span>,<span class="number">98846144</span>,<span class="number">79336731</span>,<span class="number">35949035</span>,<span class="number">26250054</span>,<span class="number">97536202</span>,<span class="number">40575682</span>,<span class="number">6965144</span>,<span class="number">91059908</span>,<span class="number">97939380</span>,<span class="number">30854180</span>,<span class="number">1965937</span>,<span class="number">17193347</span>,<span class="number">76584991</span>,<span class="number">70467475</span>,<span class="number">6559872</span>,<span class="number">97386594</span>,<span class="number">13939914</span>,<span class="number">20379091</span>,<span class="number">84906436</span>,<span class="number">45989448</span>,<span class="number">17337270</span>,<span class="number">4949675</span>,<span class="number">96963499</span>,<span class="number">12561575</span>,<span class="number">77153018</span>,<span class="number">73213368</span>,<span class="number">68283041</span>,<span class="number">33977574</span>,<span class="number">86290771</span>,<span class="number">70381017</span>,<span class="number">73095085</span>,<span class="number">454900</span>,<span class="number">44614195</span>,<span class="number">48171334</span>,<span class="number">49603342</span>,<span class="number">7430998</span>,<span class="number">29447060</span>,<span class="number">47643508</span>,<span class="number">82393912</span>,<span class="number">83169846</span>,<span class="number">94256496</span>,<span class="number">35275444</span>,<span class="number">40024984</span>,<span class="number">25377535</span>,<span class="number">46571333</span>,<span class="number">32510994</span>,<span class="number">70927802</span>,<span class="number">92017916</span>,<span class="number">97302502</span>,<span class="number">22859741</span>,<span class="number">32726786</span>,<span class="number">79071601</span>,<span class="number">93977472</span>,<span class="number">47409421</span>,<span class="number">49311618</span>,<span class="number">77366144</span>,<span class="number">84838598</span>,<span class="number">59401507</span>,<span class="number">67110877</span>,<span class="number">42075938</span>,<span class="number">76962007</span>,<span class="number">27984930</span>,<span class="number">72982484</span>,<span class="number">81363683</span>,<span class="number">75017478</span>,<span class="number">88624177</span>,<span class="number">67220235</span>,<span class="number">88290070</span>,<span class="number">26311443</span>,<span class="number">87681081</span>,<span class="number">77960250</span>,<span class="number">4996033</span>,<span class="number">68448074</span>,<span class="number">67762279</span>,<span class="number">99650583</span>,<span class="number">36766422</span>,<span class="number">27233152</span>,<span class="number">71436659</span>,<span class="number">25428777</span>,<span class="number">81481679</span>,<span class="number">51070397</span>,<span class="number">88351803</span>,<span class="number">78755075</span>,<span class="number">26783938</span>,<span class="number">83610840</span>,<span class="number">45650662</span>,<span class="number">86305644</span>,<span class="number">1717314</span>,<span class="number">66176062</span>,<span class="number">6507047</span>,<span class="number">45084786</span>,<span class="number">74402982</span>,<span class="number">55661367</span>,<span class="number">35721238</span>,<span class="number">40424913</span>,<span class="number">24294239</span>,<span class="number">30223531</span>,<span class="number">55367671</span>,<span class="number">56777532</span>,<span class="number">12604154</span>,<span class="number">4870493</span>,<span class="number">14750488</span>,<span class="number">74039611</span>,<span class="number">42549918</span>,<span class="number">70710424</span>,<span class="number">56247316</span>,<span class="number">63002053</span>,<span class="number">71117605</span>,<span class="number">16510883</span>,<span class="number">67417211</span>,<span class="number">34057637</span>,<span class="number">74185092</span>,<span class="number">58603491</span>,<span class="number">66987830</span>,<span class="number">73584171</span>,<span class="number">9178319</span>,<span class="number">47096502</span>,<span class="number">1554825</span>,<span class="number">37756804</span>,<span class="number">85168245</span>,<span class="number">92690138</span>,<span class="number">6120773</span>,<span class="number">99586029</span>,<span class="number">74696745</span>,<span class="number">61803307</span>,<span class="number">56631845</span>,<span class="number">42681796</span>,<span class="number">58965644</span>,<span class="number">68703695</span>,<span class="number">69660559</span>,<span class="number">15879062</span>,<span class="number">26713059</span>,<span class="number">85186928</span>,<span class="number">63117471</span>,<span class="number">53007808</span>,<span class="number">74576547</span>,<span class="number">32187857</span>,<span class="number">13701205</span>,<span class="number">88645881</span>,<span class="number">24507258</span>,<span class="number">87453800</span>,<span class="number">39624977</span>,<span class="number">75862710</span>,<span class="number">62419627</span>,<span class="number">70804059</span>,<span class="number">10461373</span>,<span class="number">18265782</span>,<span class="number">56366177</span>,<span class="number">68093007</span>,<span class="number">75760763</span>,<span class="number">43931574</span>,<span class="number">65808002</span>,<span class="number">49148775</span>,<span class="number">98019987</span>,<span class="number">71183123</span>,<span class="number">53762434</span>,<span class="number">78851856</span>,<span class="number">37767085</span>,<span class="number">89124453</span>,<span class="number">47566746</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">37092877</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">94859722</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">74276090</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">8763830</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">38727241</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">95732954</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">93414819</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">55070016</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">3591352</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">73857925</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">92290525</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">15210159</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83905516</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">54934589</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83004136</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">31442143</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">6060569</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">22209206</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">27649629</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">11464943</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">77822402</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">28714780</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">10058522</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">62252663</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">13751461</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">38997875</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">47320577</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">64507359</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">36137908</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">54297630</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">97411161</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">56542672</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">22017966</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">55190708</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">70072386</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">24300664</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">93413617</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">23621629</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">74772508</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">62774612</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">43001947</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">46161388</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">85563006</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">70177147</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">63960440</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">18001207</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">81734850</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">10635060</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">6551152</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">54877885</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">44426798</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">73950635</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">18713144</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">21690065</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">82153543</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">26048520</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">79954773</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">22411093</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">97307339</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">74193176</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">1413532</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">88006544</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">36062746</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">24043946</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">17132007</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">95958217</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">26112542</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">27303972</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">17247403</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">56778979</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">60928031</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">69369613</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">90584759</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">86234538</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">41726089</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">25315005</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">27568726</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">25091624</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">15307765</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83130887</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">42726438</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">75872353</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">18991223</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">47819224</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">75457713</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">54659391</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">54889687</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">65229322</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">17124556</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">38376043</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">1989975</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">45973571</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">48597804</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">58632319</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">43388664</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">97010450</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">94745635</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">13217373</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">40472912</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">40220510</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">58319808</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">48228318</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">48936085</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">86281500</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">65466706</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">96815281</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">11751559</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">50188155</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">76649755</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35315411</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">20360954</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">17739218</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">10918461</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">51429591</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">41447650</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">65170472</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">26810295</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">80912347</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">17157209</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">75851858</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">61150903</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">4408208</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">61200404</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">6655467</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">66863737</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">51549112</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">61951371</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">14368308</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">14663119</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">8762531</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">31765056</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">30560647</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">41048147</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">95526521</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">94929131</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">56881239</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">79014587</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">62705983</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">15892901</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">66151473</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">98846144</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">79336731</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35949035</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">26250054</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">97536202</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">40575682</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">6965144</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">91059908</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">97939380</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">30854180</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">1965937</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">17193347</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">76584991</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">70467475</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">6559872</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">97386594</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">13939914</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">20379091</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">84906436</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">45989448</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">17337270</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">4949675</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">96963499</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">12561575</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">77153018</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">73213368</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">68283041</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">33977574</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">86290771</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">70381017</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">73095085</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">454900</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">44614195</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">48171334</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">49603342</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">7430998</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">29447060</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">47643508</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">82393912</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83169846</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">94256496</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35275444</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">40024984</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">25377535</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">46571333</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">32510994</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">70927802</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">92017916</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">97302502</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">22859741</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">32726786</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">79071601</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">93977472</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">47409421</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">49311618</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">77366144</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">84838598</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">59401507</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">67110877</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">42075938</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">76962007</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">27984930</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">72982484</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">81363683</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">75017478</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">88624177</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">67220235</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">88290070</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">26311443</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">87681081</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">77960250</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">4996033</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">68448074</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">67762279</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">99650583</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">36766422</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">27233152</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">71436659</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">25428777</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">81481679</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">51070397</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">88351803</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">78755075</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">26783938</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83610840</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">45650662</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">86305644</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">1717314</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">66176062</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">6507047</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">45084786</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">74402982</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">55661367</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35721238</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">40424913</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">24294239</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">30223531</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">55367671</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">56777532</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">12604154</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">4870493</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">14750488</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">74039611</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">42549918</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">70710424</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">56247316</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">63002053</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">71117605</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">16510883</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">67417211</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">34057637</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">74185092</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">58603491</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">66987830</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">73584171</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">9178319</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">47096502</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">1554825</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">37756804</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">85168245</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">92690138</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">6120773</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">99586029</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">74696745</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">61803307</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">56631845</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">42681796</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">58965644</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">68703695</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">69660559</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">15879062</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">26713059</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">85186928</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">63117471</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">53007808</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">74576547</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">32187857</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">13701205</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">88645881</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">24507258</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">87453800</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">39624977</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">75862710</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">62419627</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">70804059</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">10461373</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">18265782</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">56366177</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">68093007</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">75760763</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">43931574</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">65808002</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">49148775</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">98019987</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">71183123</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">53762434</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">78851856</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">37767085</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">89124453</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">47566746</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#D组</span><br><span class="line">#<span class="keyword">in</span>和<span class="keyword">or</span>中有<span class="number">1000</span>条数据的情况</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test <span class="keyword">WHERE</span> id <span class="keyword">IN</span> (<span class="number">93674701</span>,<span class="number">9720356</span>,<span class="number">31732184</span>,<span class="number">53855095</span>,<span class="number">33144472</span>,<span class="number">71864888</span>,<span class="number">27541768</span>,<span class="number">27238726</span>,<span class="number">83648428</span>,<span class="number">12942332</span>,<span class="number">26918445</span>,<span class="number">19781953</span>,<span class="number">81861032</span>,<span class="number">74800064</span>,<span class="number">12286132</span>,<span class="number">6624397</span>,<span class="number">64942581</span>,<span class="number">70512799</span>,<span class="number">46356598</span>,<span class="number">88292448</span>,<span class="number">87069909</span>,<span class="number">38175756</span>,<span class="number">98121997</span>,<span class="number">62570414</span>,<span class="number">15900806</span>,<span class="number">51527968</span>,<span class="number">89092372</span>,<span class="number">8084203</span>,<span class="number">53772848</span>,<span class="number">78871524</span>,<span class="number">3608561</span>,<span class="number">85909562</span>,<span class="number">41702172</span>,<span class="number">61800503</span>,<span class="number">57877634</span>,<span class="number">93407278</span>,<span class="number">30824340</span>,<span class="number">13159046</span>,<span class="number">49055339</span>,<span class="number">73058078</span>,<span class="number">983603</span>,<span class="number">73571456</span>,<span class="number">51694978</span>,<span class="number">75136628</span>,<span class="number">82716874</span>,<span class="number">83551181</span>,<span class="number">7964224</span>,<span class="number">47505945</span>,<span class="number">92695321</span>,<span class="number">15885152</span>,<span class="number">79282709</span>,<span class="number">18572099</span>,<span class="number">27392970</span>,<span class="number">14552787</span>,<span class="number">19848227</span>,<span class="number">4518183</span>,<span class="number">11773920</span>,<span class="number">22285326</span>,<span class="number">71605145</span>,<span class="number">2402625</span>,<span class="number">63365854</span>,<span class="number">70973600</span>,<span class="number">10584706</span>,<span class="number">83688869</span>,<span class="number">84268419</span>,<span class="number">6026005</span>,<span class="number">36545233</span>,<span class="number">24462648</span>,<span class="number">19293921</span>,<span class="number">17561083</span>,<span class="number">52105483</span>,<span class="number">59243514</span>,<span class="number">35230465</span>,<span class="number">34650779</span>,<span class="number">30053489</span>,<span class="number">24225251</span>,<span class="number">59642405</span>,<span class="number">81933853</span>,<span class="number">94495716</span>,<span class="number">26364324</span>,<span class="number">25980634</span>,<span class="number">5579237</span>,<span class="number">14569289</span>,<span class="number">89417845</span>,<span class="number">71178959</span>,<span class="number">4143920</span>,<span class="number">20467990</span>,<span class="number">53316808</span>,<span class="number">21288525</span>,<span class="number">82249537</span>,<span class="number">37737589</span>,<span class="number">44712689</span>,<span class="number">36788133</span>,<span class="number">15668654</span>,<span class="number">4697556</span>,<span class="number">63785060</span>,<span class="number">11555169</span>,<span class="number">36401204</span>,<span class="number">92276179</span>,<span class="number">4135929</span>,<span class="number">75453019</span>,<span class="number">28231031</span>,<span class="number">8649240</span>,<span class="number">11576980</span>,<span class="number">20262028</span>,<span class="number">56242424</span>,<span class="number">11305608</span>,<span class="number">5655216</span>,<span class="number">90240601</span>,<span class="number">28569373</span>,<span class="number">5296027</span>,<span class="number">10739594</span>,<span class="number">72751648</span>,<span class="number">22531251</span>,<span class="number">12535926</span>,<span class="number">36347415</span>,<span class="number">19740655</span>,<span class="number">69125465</span>,<span class="number">7523885</span>,<span class="number">88128548</span>,<span class="number">88830806</span>,<span class="number">25010302</span>,<span class="number">29411467</span>,<span class="number">99614288</span>,<span class="number">32646290</span>,<span class="number">16592563</span>,<span class="number">69036910</span>,<span class="number">32604729</span>,<span class="number">88737786</span>,<span class="number">90169676</span>,<span class="number">57646877</span>,<span class="number">72105460</span>,<span class="number">40027541</span>,<span class="number">70362483</span>,<span class="number">37221415</span>,<span class="number">25284914</span>,<span class="number">69691185</span>,<span class="number">17972978</span>,<span class="number">1544661</span>,<span class="number">47324366</span>,<span class="number">25337670</span>,<span class="number">91133621</span>,<span class="number">63697117</span>,<span class="number">48652228</span>,<span class="number">18538437</span>,<span class="number">79966496</span>,<span class="number">26066529</span>,<span class="number">65334307</span>,<span class="number">8305141</span>,<span class="number">86289387</span>,<span class="number">20178085</span>,<span class="number">88836090</span>,<span class="number">74948034</span>,<span class="number">14101728</span>,<span class="number">7837868</span>,<span class="number">83548120</span>,<span class="number">65602502</span>,<span class="number">83129211</span>,<span class="number">24785681</span>,<span class="number">65000269</span>,<span class="number">49140174</span>,<span class="number">62636621</span>,<span class="number">31096695</span>,<span class="number">52276400</span>,<span class="number">28546681</span>,<span class="number">83631937</span>,<span class="number">57100225</span>,<span class="number">42531528</span>,<span class="number">28326396</span>,<span class="number">38641032</span>,<span class="number">93055463</span>,<span class="number">20525612</span>,<span class="number">66073509</span>,<span class="number">35154065</span>,<span class="number">29007664</span>,<span class="number">12600294</span>,<span class="number">76829494</span>,<span class="number">73917074</span>,<span class="number">67226149</span>,<span class="number">12478806</span>,<span class="number">39842542</span>,<span class="number">70312958</span>,<span class="number">82792046</span>,<span class="number">49668650</span>,<span class="number">46280815</span>,<span class="number">96555182</span>,<span class="number">22966062</span>,<span class="number">83158116</span>,<span class="number">87566530</span>,<span class="number">66277804</span>,<span class="number">7944142</span>,<span class="number">90649884</span>,<span class="number">64342810</span>,<span class="number">9881875</span>,<span class="number">14833854</span>,<span class="number">82959569</span>,<span class="number">50523207</span>,<span class="number">48788762</span>,<span class="number">3801076</span>,<span class="number">14677723</span>,<span class="number">63080506</span>,<span class="number">96215352</span>,<span class="number">36302231</span>,<span class="number">35067168</span>,<span class="number">11695282</span>,<span class="number">19447382</span>,<span class="number">66401373</span>,<span class="number">40822285</span>,<span class="number">41406321</span>,<span class="number">48630216</span>,<span class="number">78955925</span>,<span class="number">57194625</span>,<span class="number">52097877</span>,<span class="number">16169037</span>,<span class="number">44834346</span>,<span class="number">2593695</span>,<span class="number">29948466</span>,<span class="number">41842778</span>,<span class="number">50510473</span>,<span class="number">39669493</span>,<span class="number">64590865</span>,<span class="number">26160800</span>,<span class="number">94882286</span>,<span class="number">2703212</span>,<span class="number">41243905</span>,<span class="number">89363549</span>,<span class="number">82819429</span>,<span class="number">25565895</span>,<span class="number">86836890</span>,<span class="number">58385785</span>,<span class="number">55898457</span>,<span class="number">99305620</span>,<span class="number">43332680</span>,<span class="number">98223672</span>,<span class="number">4494624</span>,<span class="number">25408421</span>,<span class="number">28054121</span>,<span class="number">48197701</span>,<span class="number">90633404</span>,<span class="number">25825550</span>,<span class="number">90631154</span>,<span class="number">24867226</span>,<span class="number">61846156</span>,<span class="number">38911183</span>,<span class="number">67826056</span>,<span class="number">10676975</span>,<span class="number">57116645</span>,<span class="number">474292</span>,<span class="number">82387517</span>,<span class="number">56211477</span>,<span class="number">46555785</span>,<span class="number">49282428</span>,<span class="number">99468990</span>,<span class="number">81172472</span>,<span class="number">26720330</span>,<span class="number">38692582</span>,<span class="number">96073680</span>,<span class="number">88412290</span>,<span class="number">28829489</span>,<span class="number">1816508</span>,<span class="number">75321051</span>,<span class="number">81650509</span>,<span class="number">23175973</span>,<span class="number">42008725</span>,<span class="number">60743468</span>,<span class="number">52532114</span>,<span class="number">731909</span>,<span class="number">77811415</span>,<span class="number">86804961</span>,<span class="number">29675484</span>,<span class="number">33584929</span>,<span class="number">180367</span>,<span class="number">93687804</span>,<span class="number">41093066</span>,<span class="number">5987495</span>,<span class="number">27291494</span>,<span class="number">78229979</span>,<span class="number">63194139</span>,<span class="number">34357776</span>,<span class="number">9992084</span>,<span class="number">22643334</span>,<span class="number">22407822</span>,<span class="number">69740170</span>,<span class="number">29581361</span>,<span class="number">50036776</span>,<span class="number">88768091</span>,<span class="number">82537322</span>,<span class="number">83709895</span>,<span class="number">55361776</span>,<span class="number">90616169</span>,<span class="number">44595355</span>,<span class="number">9468440</span>,<span class="number">54552233</span>,<span class="number">73496954</span>,<span class="number">46104486</span>,<span class="number">92947715</span>,<span class="number">38522993</span>,<span class="number">88515232</span>,<span class="number">57725249</span>,<span class="number">48507967</span>,<span class="number">25309486</span>,<span class="number">91597013</span>,<span class="number">85635814</span>,<span class="number">69579638</span>,<span class="number">68775627</span>,<span class="number">57556546</span>,<span class="number">77900275</span>,<span class="number">95965693</span>,<span class="number">9601780</span>,<span class="number">5448068</span>,<span class="number">54075952</span>,<span class="number">64335883</span>,<span class="number">80114875</span>,<span class="number">14793294</span>,<span class="number">21016639</span>,<span class="number">1959922</span>,<span class="number">93176996</span>,<span class="number">7893733</span>,<span class="number">51407895</span>,<span class="number">45849129</span>,<span class="number">33857790</span>,<span class="number">30096194</span>,<span class="number">78021982</span>,<span class="number">66555961</span>,<span class="number">15842998</span>,<span class="number">77678123</span>,<span class="number">56648395</span>,<span class="number">8171848</span>,<span class="number">80152264</span>,<span class="number">78616680</span>,<span class="number">80098122</span>,<span class="number">22882409</span>,<span class="number">77242219</span>,<span class="number">3124519</span>,<span class="number">60865422</span>,<span class="number">43164198</span>,<span class="number">43256621</span>,<span class="number">73261157</span>,<span class="number">12541949</span>,<span class="number">49780175</span>,<span class="number">23167183</span>,<span class="number">10509251</span>,<span class="number">41809106</span>,<span class="number">25655902</span>,<span class="number">6752559</span>,<span class="number">39850293</span>,<span class="number">50992519</span>,<span class="number">40061483</span>,<span class="number">84526968</span>,<span class="number">93056718</span>,<span class="number">53267125</span>,<span class="number">53914467</span>,<span class="number">39404926</span>,<span class="number">83672449</span>,<span class="number">21484465</span>,<span class="number">34147538</span>,<span class="number">13437853</span>,<span class="number">74079093</span>,<span class="number">50400032</span>,<span class="number">85705998</span>,<span class="number">7557614</span>,<span class="number">10300505</span>,<span class="number">79264856</span>,<span class="number">65669946</span>,<span class="number">23899714</span>,<span class="number">53506926</span>,<span class="number">36081544</span>,<span class="number">11113765</span>,<span class="number">65755643</span>,<span class="number">5826515</span>,<span class="number">60392667</span>,<span class="number">55562374</span>,<span class="number">98132987</span>,<span class="number">80904530</span>,<span class="number">92663352</span>,<span class="number">7283593</span>,<span class="number">3709276</span>,<span class="number">52078745</span>,<span class="number">84847057</span>,<span class="number">34235334</span>,<span class="number">63889320</span>,<span class="number">70036669</span>,<span class="number">58603533</span>,<span class="number">27394053</span>,<span class="number">54766781</span>,<span class="number">50920854</span>,<span class="number">80202681</span>,<span class="number">67618417</span>,<span class="number">82912294</span>,<span class="number">20150728</span>,<span class="number">20042189</span>,<span class="number">86403320</span>,<span class="number">38738266</span>,<span class="number">58393070</span>,<span class="number">50887299</span>,<span class="number">12170654</span>,<span class="number">16212895</span>,<span class="number">37361223</span>,<span class="number">13677457</span>,<span class="number">19503506</span>,<span class="number">20213757</span>,<span class="number">84240441</span>,<span class="number">39618969</span>,<span class="number">26401150</span>,<span class="number">47937678</span>,<span class="number">55871130</span>,<span class="number">79189571</span>,<span class="number">5717133</span>,<span class="number">12444503</span>,<span class="number">95283334</span>,<span class="number">14827147</span>,<span class="number">22008485</span>,<span class="number">56345882</span>,<span class="number">43237192</span>,<span class="number">56980197</span>,<span class="number">68699371</span>,<span class="number">46407250</span>,<span class="number">72120555</span>,<span class="number">70694039</span>,<span class="number">46438829</span>,<span class="number">17774982</span>,<span class="number">36484024</span>,<span class="number">138767</span>,<span class="number">89563532</span>,<span class="number">54847019</span>,<span class="number">7815592</span>,<span class="number">44909604</span>,<span class="number">50479084</span>,<span class="number">17462504</span>,<span class="number">96594465</span>,<span class="number">58317102</span>,<span class="number">92426225</span>,<span class="number">91894699</span>,<span class="number">4501659</span>,<span class="number">43315607</span>,<span class="number">9442814</span>,<span class="number">19705166</span>,<span class="number">87751308</span>,<span class="number">95588126</span>,<span class="number">92372510</span>,<span class="number">20281564</span>,<span class="number">19251355</span>,<span class="number">10321183</span>,<span class="number">34573093</span>,<span class="number">19074704</span>,<span class="number">84678191</span>,<span class="number">24383998</span>,<span class="number">27670253</span>,<span class="number">50223562</span>,<span class="number">34091936</span>,<span class="number">99304371</span>,<span class="number">32477827</span>,<span class="number">54273037</span>,<span class="number">86525073</span>,<span class="number">73253547</span>,<span class="number">33316827</span>,<span class="number">6724062</span>,<span class="number">76707318</span>,<span class="number">78171148</span>,<span class="number">44729510</span>,<span class="number">16697684</span>,<span class="number">68966388</span>,<span class="number">57448392</span>,<span class="number">51380186</span>,<span class="number">35344477</span>,<span class="number">98153122</span>,<span class="number">51825492</span>,<span class="number">27202774</span>,<span class="number">26901641</span>,<span class="number">37527637</span>,<span class="number">88241695</span>,<span class="number">15100257</span>,<span class="number">30418000</span>,<span class="number">21821200</span>,<span class="number">95511035</span>,<span class="number">9289513</span>,<span class="number">83870196</span>,<span class="number">54628801</span>,<span class="number">39402988</span>,<span class="number">88345504</span>,<span class="number">84232433</span>,<span class="number">13925255</span>,<span class="number">70816934</span>,<span class="number">6822742</span>,<span class="number">14400466</span>,<span class="number">430652</span>,<span class="number">87397095</span>,<span class="number">89773413</span>,<span class="number">10883914</span>,<span class="number">89939310</span>,<span class="number">39597573</span>,<span class="number">49356789</span>,<span class="number">62857680</span>,<span class="number">93292662</span>,<span class="number">55644642</span>,<span class="number">81922551</span>,<span class="number">94304087</span>,<span class="number">63705961</span>,<span class="number">137763</span>,<span class="number">22392805</span>,<span class="number">65195561</span>,<span class="number">39498904</span>,<span class="number">22576234</span>,<span class="number">59467794</span>,<span class="number">46389072</span>,<span class="number">66341462</span>,<span class="number">44602153</span>,<span class="number">18204976</span>,<span class="number">45366397</span>,<span class="number">3880945</span>,<span class="number">98231882</span>,<span class="number">27999162</span>,<span class="number">38209350</span>,<span class="number">10599910</span>,<span class="number">77139550</span>,<span class="number">35114264</span>,<span class="number">57109708</span>,<span class="number">93064441</span>,<span class="number">34801782</span>,<span class="number">24938667</span>,<span class="number">84955486</span>,<span class="number">53018874</span>,<span class="number">37969943</span>,<span class="number">64372852</span>,<span class="number">69596670</span>,<span class="number">21288762</span>,<span class="number">12774121</span>,<span class="number">97588451</span>,<span class="number">23575359</span>,<span class="number">10954061</span>,<span class="number">50363988</span>,<span class="number">56263940</span>,<span class="number">61520763</span>,<span class="number">85096643</span>,<span class="number">36250068</span>,<span class="number">19807406</span>,<span class="number">20984386</span>,<span class="number">24520668</span>,<span class="number">44631794</span>,<span class="number">62587890</span>,<span class="number">44963362</span>,<span class="number">7663521</span>,<span class="number">78505677</span>,<span class="number">98442373</span>,<span class="number">90280978</span>,<span class="number">14494324</span>,<span class="number">16069861</span>,<span class="number">11397153</span>,<span class="number">87726305</span>,<span class="number">26133866</span>,<span class="number">42024935</span>,<span class="number">93393929</span>,<span class="number">72575268</span>,<span class="number">76384597</span>,<span class="number">42272046</span>,<span class="number">81658814</span>,<span class="number">40811718</span>,<span class="number">86054463</span>,<span class="number">35997739</span>,<span class="number">51075676</span>,<span class="number">62839927</span>,<span class="number">68179261</span>,<span class="number">19292480</span>,<span class="number">10464999</span>,<span class="number">6342696</span>,<span class="number">75842285</span>,<span class="number">28671096</span>,<span class="number">30029838</span>,<span class="number">19617648</span>,<span class="number">94667632</span>,<span class="number">75855376</span>,<span class="number">83477767</span>,<span class="number">456684</span>,<span class="number">81197213</span>,<span class="number">1961395</span>,<span class="number">79590898</span>,<span class="number">470693</span>,<span class="number">64786459</span>,<span class="number">90138714</span>,<span class="number">30486571</span>,<span class="number">75566704</span>,<span class="number">64467558</span>,<span class="number">21380112</span>,<span class="number">17742907</span>,<span class="number">7733647</span>,<span class="number">92017</span>,<span class="number">64615799</span>,<span class="number">72272722</span>,<span class="number">66873854</span>,<span class="number">77198963</span>,<span class="number">35594848</span>,<span class="number">42694993</span>,<span class="number">12431322</span>,<span class="number">2247181</span>,<span class="number">11020746</span>,<span class="number">42416726</span>,<span class="number">19127785</span>,<span class="number">95444937</span>,<span class="number">36842133</span>,<span class="number">4203521</span>,<span class="number">48149533</span>,<span class="number">45322440</span>,<span class="number">59710953</span>,<span class="number">38250773</span>,<span class="number">31370132</span>,<span class="number">26889920</span>,<span class="number">45927952</span>,<span class="number">55298246</span>,<span class="number">31197238</span>,<span class="number">44744953</span>,<span class="number">35531670</span>,<span class="number">38850041</span>,<span class="number">29759177</span>,<span class="number">76433451</span>,<span class="number">33696500</span>,<span class="number">2823716</span>,<span class="number">68574340</span>,<span class="number">68889919</span>,<span class="number">35744793</span>,<span class="number">64772909</span>,<span class="number">41562277</span>,<span class="number">72606631</span>,<span class="number">54617176</span>,<span class="number">76086087</span>,<span class="number">61060196</span>,<span class="number">1593669</span>,<span class="number">4666059</span>,<span class="number">44201567</span>,<span class="number">97015910</span>,<span class="number">51039786</span>,<span class="number">47534369</span>,<span class="number">36899420</span>,<span class="number">95163693</span>,<span class="number">34278055</span>,<span class="number">24361819</span>,<span class="number">93200909</span>,<span class="number">29991418</span>,<span class="number">63172824</span>,<span class="number">53644148</span>,<span class="number">61454424</span>,<span class="number">44726508</span>,<span class="number">64910883</span>,<span class="number">31088636</span>,<span class="number">14005026</span>,<span class="number">83267869</span>,<span class="number">28497493</span>,<span class="number">12406441</span>,<span class="number">34686539</span>,<span class="number">70646963</span>,<span class="number">7687253</span>,<span class="number">23115957</span>,<span class="number">64556990</span>,<span class="number">49701688</span>,<span class="number">76843379</span>,<span class="number">22370877</span>,<span class="number">11199132</span>,<span class="number">15492661</span>,<span class="number">72101877</span>,<span class="number">47154152</span>,<span class="number">54969058</span>,<span class="number">96696025</span>,<span class="number">33567129</span>,<span class="number">95788960</span>,<span class="number">13301506</span>,<span class="number">38695877</span>,<span class="number">52992551</span>,<span class="number">37817234</span>,<span class="number">82136809</span>,<span class="number">28111091</span>,<span class="number">84977065</span>,<span class="number">93404791</span>,<span class="number">56350318</span>,<span class="number">27576451</span>,<span class="number">84170153</span>,<span class="number">37381626</span>,<span class="number">22432144</span>,<span class="number">35119973</span>,<span class="number">23922989</span>,<span class="number">98961080</span>,<span class="number">14336913</span>,<span class="number">49612713</span>,<span class="number">47410677</span>,<span class="number">41559348</span>,<span class="number">64216475</span>,<span class="number">75502736</span>,<span class="number">16203656</span>,<span class="number">81726720</span>,<span class="number">64541981</span>,<span class="number">82181762</span>,<span class="number">95869963</span>,<span class="number">1086041</span>,<span class="number">76856852</span>,<span class="number">99484886</span>,<span class="number">47292021</span>,<span class="number">99746735</span>,<span class="number">79082859</span>,<span class="number">67416188</span>,<span class="number">46391963</span>,<span class="number">58631281</span>,<span class="number">80994168</span>,<span class="number">9464550</span>,<span class="number">5851058</span>,<span class="number">16534935</span>,<span class="number">63307701</span>,<span class="number">91875109</span>,<span class="number">18716507</span>,<span class="number">15870646</span>,<span class="number">6003995</span>,<span class="number">836024</span>,<span class="number">35610568</span>,<span class="number">39574140</span>,<span class="number">76244639</span>,<span class="number">83403189</span>,<span class="number">51252728</span>,<span class="number">6516065</span>,<span class="number">94907007</span>,<span class="number">81605606</span>,<span class="number">40398075</span>,<span class="number">40258386</span>,<span class="number">6692981</span>,<span class="number">50852074</span>,<span class="number">2869416</span>,<span class="number">97682971</span>,<span class="number">44427361</span>,<span class="number">9608914</span>,<span class="number">58464559</span>,<span class="number">81806036</span>,<span class="number">20047387</span>,<span class="number">66264452</span>,<span class="number">58063775</span>,<span class="number">54179837</span>,<span class="number">48463792</span>,<span class="number">17877188</span>,<span class="number">31718426</span>,<span class="number">64192249</span>,<span class="number">35574859</span>,<span class="number">3671766</span>,<span class="number">88905164</span>,<span class="number">78137697</span>,<span class="number">46929619</span>,<span class="number">21063327</span>,<span class="number">83078770</span>,<span class="number">93293821</span>,<span class="number">41618319</span>,<span class="number">3832324</span>,<span class="number">91310612</span>,<span class="number">79854291</span>,<span class="number">68734227</span>,<span class="number">8826717</span>,<span class="number">80881657</span>,<span class="number">95208907</span>,<span class="number">7079422</span>,<span class="number">30037415</span>,<span class="number">5494004</span>,<span class="number">44809486</span>,<span class="number">97620027</span>,<span class="number">35689182</span>,<span class="number">13120783</span>,<span class="number">26108678</span>,<span class="number">1537176</span>,<span class="number">16538727</span>,<span class="number">50841024</span>,<span class="number">36515680</span>,<span class="number">82635278</span>,<span class="number">11112660</span>,<span class="number">16276555</span>,<span class="number">72997511</span>,<span class="number">93487848</span>,<span class="number">88201238</span>,<span class="number">53997085</span>,<span class="number">15198916</span>,<span class="number">61214583</span>,<span class="number">78412499</span>,<span class="number">3585265</span>,<span class="number">1402827</span>,<span class="number">56445518</span>,<span class="number">47661453</span>,<span class="number">25615629</span>,<span class="number">58263458</span>,<span class="number">62155263</span>,<span class="number">46608555</span>,<span class="number">15822703</span>,<span class="number">82285214</span>,<span class="number">76021596</span>,<span class="number">84571697</span>,<span class="number">45999350</span>,<span class="number">40074628</span>,<span class="number">8219220</span>,<span class="number">5429523</span>,<span class="number">74024203</span>,<span class="number">22354037</span>,<span class="number">17605466</span>,<span class="number">60436920</span>,<span class="number">52777032</span>,<span class="number">65801717</span>,<span class="number">43656316</span>,<span class="number">10424270</span>,<span class="number">48035786</span>,<span class="number">29493228</span>,<span class="number">83897372</span>,<span class="number">62101275</span>,<span class="number">84793857</span>,<span class="number">56894828</span>,<span class="number">70636689</span>,<span class="number">72497148</span>,<span class="number">67388694</span>,<span class="number">68146510</span>,<span class="number">64298548</span>,<span class="number">97117498</span>,<span class="number">25553211</span>,<span class="number">54226533</span>,<span class="number">90395845</span>,<span class="number">24172623</span>,<span class="number">91712292</span>,<span class="number">98280822</span>,<span class="number">54042497</span>,<span class="number">25032894</span>,<span class="number">6833135</span>,<span class="number">39011254</span>,<span class="number">9837753</span>,<span class="number">63507766</span>,<span class="number">26747954</span>,<span class="number">45941264</span>,<span class="number">99955245</span>,<span class="number">80051546</span>,<span class="number">78510759</span>,<span class="number">71322333</span>,<span class="number">92407609</span>,<span class="number">95809491</span>,<span class="number">18999217</span>,<span class="number">23430377</span>,<span class="number">11861293</span>,<span class="number">42583098</span>,<span class="number">24163209</span>,<span class="number">11358738</span>,<span class="number">3237302</span>,<span class="number">3176665</span>,<span class="number">87151132</span>,<span class="number">2789150</span>,<span class="number">63905882</span>,<span class="number">59864282</span>,<span class="number">3673596</span>,<span class="number">19570439</span>,<span class="number">22883042</span>,<span class="number">72375525</span>,<span class="number">51614404</span>,<span class="number">47526636</span>,<span class="number">98443133</span>,<span class="number">99140135</span>,<span class="number">33855918</span>,<span class="number">28333489</span>,<span class="number">81416033</span>,<span class="number">2670097</span>,<span class="number">4897577</span>,<span class="number">24439616</span>,<span class="number">36643479</span>,<span class="number">40817600</span>,<span class="number">76022791</span>,<span class="number">40072872</span>,<span class="number">95193435</span>,<span class="number">96967607</span>,<span class="number">24983145</span>,<span class="number">49883271</span>,<span class="number">94602753</span>,<span class="number">83555050</span>,<span class="number">85455145</span>,<span class="number">34563229</span>,<span class="number">72328311</span>,<span class="number">12002151</span>,<span class="number">71481181</span>,<span class="number">72998351</span>,<span class="number">1489188</span>,<span class="number">38426973</span>,<span class="number">91893116</span>,<span class="number">61594591</span>,<span class="number">89693630</span>,<span class="number">6268166</span>,<span class="number">20056665</span>,<span class="number">62169880</span>,<span class="number">17143472</span>,<span class="number">35103925</span>,<span class="number">22452590</span>,<span class="number">54272289</span>,<span class="number">34236829</span>,<span class="number">78028543</span>,<span class="number">84474414</span>,<span class="number">40386926</span>,<span class="number">50550952</span>,<span class="number">49413559</span>,<span class="number">48781941</span>,<span class="number">22927237</span>,<span class="number">44447815</span>,<span class="number">29960478</span>,<span class="number">47578119</span>,<span class="number">10192558</span>,<span class="number">87733936</span>,<span class="number">88699383</span>,<span class="number">38808712</span>,<span class="number">79944807</span>,<span class="number">84014713</span>,<span class="number">31865463</span>,<span class="number">72617685</span>,<span class="number">19557568</span>,<span class="number">47865990</span>,<span class="number">39069638</span>,<span class="number">20086122</span>,<span class="number">1777562</span>,<span class="number">29018078</span>,<span class="number">78358083</span>,<span class="number">94561719</span>,<span class="number">46281152</span>,<span class="number">99789008</span>,<span class="number">86929490</span>,<span class="number">16534451</span>,<span class="number">55989144</span>,<span class="number">52455669</span>,<span class="number">54561585</span>,<span class="number">97379646</span>,<span class="number">20416183</span>,<span class="number">87617750</span>,<span class="number">76115505</span>,<span class="number">3282482</span>,<span class="number">8383619</span>,<span class="number">45456319</span>,<span class="number">29576432</span>,<span class="number">67750627</span>,<span class="number">61736333</span>,<span class="number">33745442</span>,<span class="number">51502165</span>,<span class="number">35349384</span>,<span class="number">78106651</span>,<span class="number">23232822</span>,<span class="number">94851387</span>,<span class="number">78254073</span>,<span class="number">82406754</span>,<span class="number">10317954</span>,<span class="number">70125940</span>,<span class="number">45067526</span>,<span class="number">27061875</span>,<span class="number">25640164</span>,<span class="number">52574899</span>,<span class="number">93819227</span>,<span class="number">93789607</span>,<span class="number">96122951</span>,<span class="number">31673246</span>,<span class="number">70431904</span>,<span class="number">54067896</span>,<span class="number">37146857</span>,<span class="number">37817889</span>,<span class="number">14058940</span>,<span class="number">60710246</span>,<span class="number">64844350</span>,<span class="number">91604383</span>,<span class="number">71972005</span>,<span class="number">13888349</span>,<span class="number">19093493</span>,<span class="number">27397281</span>,<span class="number">61085409</span>,<span class="number">66529387</span>,<span class="number">82761299</span>,<span class="number">72236310</span>,<span class="number">19277077</span>,<span class="number">96599501</span>,<span class="number">68304096</span>,<span class="number">48292937</span>,<span class="number">97503321</span>,<span class="number">88011133</span>,<span class="number">29224803</span>,<span class="number">79782945</span>,<span class="number">79965966</span>,<span class="number">83716914</span>,<span class="number">90432214</span>,<span class="number">48938902</span>,<span class="number">12498489</span>,<span class="number">30246261</span>,<span class="number">91624049</span>,<span class="number">68652396</span>,<span class="number">23677785</span>,<span class="number">44084687</span>,<span class="number">3865123</span>,<span class="number">37823170</span>,<span class="number">45287730</span>,<span class="number">38784682</span>,<span class="number">28058351</span>,<span class="number">68226368</span>,<span class="number">61569897</span>,<span class="number">44737876</span>,<span class="number">70575908</span>,<span class="number">25568463</span>,<span class="number">24668386</span>,<span class="number">88650569</span>,<span class="number">35559584</span>,<span class="number">1897737</span>,<span class="number">77844785</span>,<span class="number">29780669</span>,<span class="number">84004602</span>,<span class="number">29029776</span>,<span class="number">91003545</span>,<span class="number">48058106</span>,<span class="number">9463847</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">93674701</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">9720356</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">31732184</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">53855095</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">33144472</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">71864888</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">27541768</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">27238726</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83648428</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">12942332</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">26918445</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">19781953</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">81861032</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">74800064</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">12286132</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">6624397</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">64942581</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">70512799</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">46356598</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">88292448</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">87069909</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">38175756</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">98121997</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">62570414</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">15900806</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">51527968</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">89092372</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">8084203</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">53772848</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">78871524</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">3608561</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">85909562</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">41702172</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">61800503</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">57877634</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">93407278</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">30824340</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">13159046</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">49055339</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">73058078</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">983603</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">73571456</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">51694978</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">75136628</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">82716874</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83551181</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">7964224</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">47505945</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">92695321</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">15885152</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">79282709</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">18572099</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">27392970</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">14552787</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">19848227</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">4518183</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">11773920</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">22285326</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">71605145</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">2402625</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">63365854</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">70973600</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">10584706</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83688869</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">84268419</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">6026005</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">36545233</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">24462648</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">19293921</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">17561083</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">52105483</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">59243514</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35230465</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">34650779</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">30053489</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">24225251</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">59642405</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">81933853</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">94495716</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">26364324</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">25980634</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">5579237</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">14569289</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">89417845</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">71178959</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">4143920</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">20467990</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">53316808</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">21288525</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">82249537</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">37737589</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">44712689</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">36788133</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">15668654</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">4697556</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">63785060</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">11555169</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">36401204</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">92276179</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">4135929</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">75453019</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">28231031</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">8649240</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">11576980</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">20262028</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">56242424</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">11305608</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">5655216</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">90240601</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">28569373</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">5296027</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">10739594</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">72751648</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">22531251</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">12535926</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">36347415</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">19740655</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">69125465</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">7523885</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">88128548</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">88830806</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">25010302</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">29411467</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">99614288</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">32646290</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">16592563</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">69036910</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">32604729</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">88737786</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">90169676</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">57646877</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">72105460</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">40027541</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">70362483</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">37221415</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">25284914</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">69691185</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">17972978</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">1544661</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">47324366</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">25337670</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">91133621</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">63697117</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">48652228</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">18538437</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">79966496</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">26066529</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">65334307</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">8305141</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">86289387</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">20178085</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">88836090</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">74948034</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">14101728</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">7837868</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83548120</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">65602502</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83129211</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">24785681</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">65000269</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">49140174</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">62636621</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">31096695</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">52276400</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">28546681</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83631937</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">57100225</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">42531528</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">28326396</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">38641032</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">93055463</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">20525612</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">66073509</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35154065</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">29007664</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">12600294</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">76829494</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">73917074</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">67226149</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">12478806</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">39842542</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">70312958</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">82792046</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">49668650</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">46280815</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">96555182</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">22966062</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83158116</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">87566530</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">66277804</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">7944142</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">90649884</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">64342810</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">9881875</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">14833854</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">82959569</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">50523207</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">48788762</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">3801076</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">14677723</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">63080506</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">96215352</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">36302231</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35067168</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">11695282</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">19447382</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">66401373</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">40822285</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">41406321</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">48630216</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">78955925</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">57194625</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">52097877</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">16169037</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">44834346</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">2593695</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">29948466</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">41842778</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">50510473</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">39669493</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">64590865</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">26160800</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">94882286</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">2703212</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">41243905</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">89363549</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">82819429</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">25565895</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">86836890</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">58385785</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">55898457</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">99305620</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">43332680</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">98223672</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">4494624</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">25408421</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">28054121</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">48197701</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">90633404</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">25825550</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">90631154</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">24867226</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">61846156</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">38911183</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">67826056</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">10676975</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">57116645</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">474292</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">82387517</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">56211477</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">46555785</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">49282428</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">99468990</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">81172472</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">26720330</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">38692582</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">96073680</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">88412290</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">28829489</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">1816508</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">75321051</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">81650509</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">23175973</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">42008725</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">60743468</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">52532114</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">731909</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">77811415</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">86804961</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">29675484</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">33584929</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">180367</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">93687804</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">41093066</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">5987495</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">27291494</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">78229979</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">63194139</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">34357776</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">9992084</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">22643334</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">22407822</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">69740170</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">29581361</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">50036776</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">88768091</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">82537322</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83709895</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">55361776</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">90616169</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">44595355</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">9468440</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">54552233</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">73496954</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">46104486</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">92947715</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">38522993</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">88515232</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">57725249</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">48507967</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">25309486</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">91597013</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">85635814</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">69579638</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">68775627</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">57556546</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">77900275</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">95965693</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">9601780</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">5448068</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">54075952</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">64335883</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">80114875</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">14793294</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">21016639</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">1959922</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">93176996</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">7893733</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">51407895</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">45849129</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">33857790</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">30096194</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">78021982</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">66555961</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">15842998</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">77678123</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">56648395</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">8171848</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">80152264</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">78616680</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">80098122</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">22882409</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">77242219</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">3124519</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">60865422</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">43164198</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">43256621</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">73261157</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">12541949</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">49780175</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">23167183</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">10509251</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">41809106</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">25655902</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">6752559</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">39850293</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">50992519</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">40061483</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">84526968</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">93056718</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">53267125</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">53914467</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">39404926</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83672449</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">21484465</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">34147538</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">13437853</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">74079093</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">50400032</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">85705998</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">7557614</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">10300505</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">79264856</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">65669946</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">23899714</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">53506926</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">36081544</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">11113765</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">65755643</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">5826515</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">60392667</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">55562374</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">98132987</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">80904530</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">92663352</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">7283593</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">3709276</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">52078745</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">84847057</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">34235334</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">63889320</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">70036669</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">58603533</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">27394053</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">54766781</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">50920854</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">80202681</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">67618417</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">82912294</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">20150728</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">20042189</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">86403320</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">38738266</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">58393070</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">50887299</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">12170654</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">16212895</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">37361223</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">13677457</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">19503506</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">20213757</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">84240441</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">39618969</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">26401150</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">47937678</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">55871130</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">79189571</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">5717133</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">12444503</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">95283334</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">14827147</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">22008485</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">56345882</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">43237192</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">56980197</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">68699371</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">46407250</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">72120555</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">70694039</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">46438829</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">17774982</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">36484024</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">138767</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">89563532</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">54847019</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">7815592</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">44909604</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">50479084</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">17462504</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">96594465</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">58317102</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">92426225</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">91894699</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">4501659</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">43315607</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">9442814</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">19705166</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">87751308</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">95588126</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">92372510</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">20281564</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">19251355</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">10321183</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">34573093</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">19074704</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">84678191</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">24383998</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">27670253</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">50223562</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">34091936</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">99304371</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">32477827</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">54273037</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">86525073</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">73253547</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">33316827</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">6724062</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">76707318</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">78171148</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">44729510</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">16697684</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">68966388</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">57448392</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">51380186</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35344477</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">98153122</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">51825492</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">27202774</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">26901641</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">37527637</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">88241695</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">15100257</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">30418000</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">21821200</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">95511035</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">9289513</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83870196</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">54628801</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">39402988</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">88345504</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">84232433</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">13925255</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">70816934</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">6822742</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">14400466</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">430652</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">87397095</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">89773413</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">10883914</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">89939310</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">39597573</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">49356789</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">62857680</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">93292662</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">55644642</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">81922551</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">94304087</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">63705961</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">137763</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">22392805</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">65195561</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">39498904</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">22576234</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">59467794</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">46389072</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">66341462</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">44602153</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">18204976</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">45366397</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">3880945</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">98231882</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">27999162</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">38209350</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">10599910</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">77139550</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35114264</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">57109708</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">93064441</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">34801782</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">24938667</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">84955486</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">53018874</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">37969943</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">64372852</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">69596670</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">21288762</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">12774121</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">97588451</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">23575359</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">10954061</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">50363988</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">56263940</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">61520763</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">85096643</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">36250068</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">19807406</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">20984386</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">24520668</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">44631794</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">62587890</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">44963362</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">7663521</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">78505677</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">98442373</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">90280978</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">14494324</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">16069861</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">11397153</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">87726305</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">26133866</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">42024935</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">93393929</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">72575268</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">76384597</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">42272046</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">81658814</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">40811718</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">86054463</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35997739</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">51075676</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">62839927</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">68179261</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">19292480</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">10464999</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">6342696</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">75842285</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">28671096</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">30029838</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">19617648</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">94667632</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">75855376</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83477767</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">456684</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">81197213</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">1961395</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">79590898</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">470693</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">64786459</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">90138714</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">30486571</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">75566704</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">64467558</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">21380112</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">17742907</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">7733647</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">92017</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">64615799</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">72272722</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">66873854</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">77198963</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35594848</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">42694993</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">12431322</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">2247181</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">11020746</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">42416726</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">19127785</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">95444937</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">36842133</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">4203521</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">48149533</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">45322440</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">59710953</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">38250773</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">31370132</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">26889920</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">45927952</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">55298246</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">31197238</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">44744953</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35531670</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">38850041</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">29759177</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">76433451</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">33696500</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">2823716</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">68574340</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">68889919</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35744793</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">64772909</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">41562277</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">72606631</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">54617176</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">76086087</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">61060196</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">1593669</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">4666059</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">44201567</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">97015910</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">51039786</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">47534369</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">36899420</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">95163693</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">34278055</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">24361819</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">93200909</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">29991418</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">63172824</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">53644148</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">61454424</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">44726508</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">64910883</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">31088636</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">14005026</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83267869</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">28497493</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">12406441</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">34686539</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">70646963</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">7687253</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">23115957</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">64556990</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">49701688</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">76843379</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">22370877</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">11199132</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">15492661</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">72101877</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">47154152</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">54969058</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">96696025</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">33567129</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">95788960</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">13301506</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">38695877</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">52992551</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">37817234</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">82136809</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">28111091</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">84977065</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">93404791</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">56350318</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">27576451</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">84170153</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">37381626</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">22432144</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35119973</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">23922989</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">98961080</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">14336913</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">49612713</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">47410677</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">41559348</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">64216475</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">75502736</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">16203656</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">81726720</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">64541981</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">82181762</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">95869963</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">1086041</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">76856852</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">99484886</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">47292021</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">99746735</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">79082859</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">67416188</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">46391963</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">58631281</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">80994168</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">9464550</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">5851058</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">16534935</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">63307701</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">91875109</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">18716507</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">15870646</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">6003995</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">836024</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35610568</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">39574140</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">76244639</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83403189</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">51252728</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">6516065</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">94907007</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">81605606</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">40398075</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">40258386</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">6692981</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">50852074</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">2869416</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">97682971</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">44427361</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">9608914</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">58464559</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">81806036</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">20047387</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">66264452</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">58063775</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">54179837</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">48463792</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">17877188</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">31718426</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">64192249</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35574859</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">3671766</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">88905164</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">78137697</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">46929619</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">21063327</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83078770</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">93293821</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">41618319</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">3832324</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">91310612</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">79854291</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">68734227</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">8826717</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">80881657</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">95208907</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">7079422</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">30037415</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">5494004</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">44809486</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">97620027</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35689182</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">13120783</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">26108678</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">1537176</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">16538727</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">50841024</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">36515680</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">82635278</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">11112660</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">16276555</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">72997511</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">93487848</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">88201238</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">53997085</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">15198916</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">61214583</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">78412499</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">3585265</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">1402827</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">56445518</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">47661453</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">25615629</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">58263458</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">62155263</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">46608555</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">15822703</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">82285214</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">76021596</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">84571697</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">45999350</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">40074628</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">8219220</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">5429523</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">74024203</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">22354037</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">17605466</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">60436920</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">52777032</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">65801717</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">43656316</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">10424270</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">48035786</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">29493228</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83897372</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">62101275</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">84793857</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">56894828</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">70636689</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">72497148</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">67388694</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">68146510</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">64298548</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">97117498</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">25553211</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">54226533</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">90395845</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">24172623</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">91712292</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">98280822</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">54042497</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">25032894</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">6833135</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">39011254</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">9837753</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">63507766</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">26747954</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">45941264</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">99955245</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">80051546</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">78510759</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">71322333</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">92407609</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">95809491</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">18999217</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">23430377</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">11861293</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">42583098</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">24163209</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">11358738</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">3237302</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">3176665</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">87151132</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">2789150</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">63905882</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">59864282</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">3673596</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">19570439</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">22883042</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">72375525</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">51614404</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">47526636</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">98443133</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">99140135</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">33855918</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">28333489</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">81416033</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">2670097</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">4897577</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">24439616</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">36643479</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">40817600</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">76022791</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">40072872</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">95193435</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">96967607</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">24983145</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">49883271</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">94602753</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83555050</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">85455145</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">34563229</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">72328311</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">12002151</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">71481181</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">72998351</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">1489188</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">38426973</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">91893116</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">61594591</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">89693630</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">6268166</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">20056665</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">62169880</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">17143472</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35103925</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">22452590</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">54272289</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">34236829</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">78028543</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">84474414</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">40386926</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">50550952</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">49413559</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">48781941</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">22927237</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">44447815</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">29960478</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">47578119</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">10192558</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">87733936</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">88699383</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">38808712</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">79944807</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">84014713</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">31865463</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">72617685</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">19557568</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">47865990</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">39069638</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">20086122</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">1777562</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">29018078</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">78358083</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">94561719</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">46281152</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">99789008</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">86929490</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">16534451</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">55989144</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">52455669</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">54561585</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">97379646</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">20416183</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">87617750</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">76115505</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">3282482</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">8383619</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">45456319</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">29576432</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">67750627</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">61736333</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">33745442</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">51502165</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35349384</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">78106651</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">23232822</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">94851387</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">78254073</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">82406754</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">10317954</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">70125940</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">45067526</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">27061875</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">25640164</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">52574899</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">93819227</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">93789607</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">96122951</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">31673246</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">70431904</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">54067896</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">37146857</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">37817889</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">14058940</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">60710246</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">64844350</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">91604383</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">71972005</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">13888349</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">19093493</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">27397281</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">61085409</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">66529387</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">82761299</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">72236310</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">19277077</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">96599501</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">68304096</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">48292937</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">97503321</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">88011133</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">29224803</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">79782945</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">79965966</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">83716914</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">90432214</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">48938902</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">12498489</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">30246261</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">91624049</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">68652396</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">23677785</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">44084687</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">3865123</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">37823170</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">45287730</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">38784682</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">28058351</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">68226368</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">61569897</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">44737876</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">70575908</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">25568463</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">24668386</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">88650569</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">35559584</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">1897737</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">77844785</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">29780669</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">84004602</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">29029776</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">91003545</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">48058106</span> <span class="keyword">OR</span> id<span class="operator">=</span><span class="number">9463847</span>;</span><br></pre></td></tr></table></figure><p>测试结果如下：<br>第一种情况，ID列为主键的情况，4组测试执行计划一样，执行的时间也基本没有区别。<br>A组or和in的执行时间： or的执行时间为：0.002s     in的执行时间为：0.002s<br>B组or和in的执行时间： or的执行时间为：0.004s     in的执行时间为：0.004s<br>C组or和in的执行时间： or的执行时间为：0.006s     in的执行时间为：0.005s<br>D组or和in的执行时间： or的执行时间为：0.018s     in的执行时间为：0.014s<br>第二种情况，ID列为一般索引的情况，4组测试执行计划一样，执行的时间也基本没有区别。<br>A组or和in的执行时间： or的执行时间为：0.002s     in的执行时间为：0.002s<br>B组or和in的执行时间： or的执行时间为：0.006s     in的执行时间为：0.005s  <br>C组or和in的执行时间： or的执行时间为：0.008s     in的执行时间为：0.008s<br>D组or和in的执行时间： or的执行时间为：0.021s     in的执行时间为：0.020s  <br>第三种情况，ID列没有索引的情况，4组测试执行计划一样，执行的时间有很大的区别。<br>A组or和in的执行时间： or的执行时间为：5.016s      in的执行时间为：5.071s<br>B组or和in的执行时间： or的执行时间为：1min 02s     in的执行时间为：5.018s<br>C组or和in的执行时间： or的执行时间为：1min 55s     in的执行时间为：5.018s<br>D组or和in的执行时间： or的执行时间为：6min 17s     in的执行时间为：5.057s</p><p><strong>结论：从上面的测试结果，可以看出如果in和or所在列有索引或者主键的话，or和in没啥差别，执行计划和执行时间都几乎一样。如果in和or所在列没有索引的话，性能差别就很大了。在没有索引的情况下，随着in或者or后面的数据量越多，in的效率不会有太大的下降，但是or会随着记录越多的话性能下降非常厉害，从第三种测试情况中可以很明显地看出了，基本上是指数级增长。因此在给in和or的效率下定义的时候，应该再加上一个条件，就是所在的列是否有索引或者是否是主键。如果有索引或者主键性能没啥差别，如果没有索引，性能差别不是一点点！</strong> </p><h2 id="十一、模糊查询like"><a href="#十一、模糊查询like" class="headerlink" title="十一、模糊查询like"></a>十一、模糊查询like</h2><hr><p>模糊查询又被称为模糊匹配，在实际开发中使用较多，比如：查询公司中所有姓张的，查询岗位中带有经理两个字的职位等等，这些都需要使用模糊查询。<br>模糊查询的语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> .. <span class="keyword">from</span> .. <span class="keyword">where</span> 字段 <span class="keyword">like</span> <span class="string">&#x27;通配符表达式&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>在模糊查询中，通配符主要包括两个：一个是%，一个是下划线_。其中%代表任意多个字符，下划线_代表任意一个字符。</p></blockquote><p>案例1：查询员工名字以’S’开始的员工姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;S%&#x27;</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301713535.png" alt="image.png" style="zoom:80%;" /><p>案例2：查询员工名字以’T’结尾的员工姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;%T&#x27;</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301713893.png" alt="image.png" style="zoom:80%;" /><p>案例3：查询员工名字中含有’O’的员工姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;%O%&#x27;</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301713905.png" alt="image.png" style="zoom:80%;" /><p>案例4：查询员工名字中第二个字母是’A’的员工姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;_A%&#x27;</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301713733.png" alt="image.png" style="zoom:80%;" /><p>案例5：查询学员名字中含有下划线的。<br>执行以下SQL语句，先准备测试数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> student;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">  id <span class="type">int</span>,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(id,name) <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">&#x27;susan&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(id,name) <span class="keyword">values</span>(<span class="number">2</span>, <span class="string">&#x27;lucy&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(id,name) <span class="keyword">values</span>(<span class="number">3</span>, <span class="string">&#x27;jack_son&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301713871.png" alt="image.png" style="zoom:80%;" /><p>查询学员名字中含有下划线的，执行以下SQL试试：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%_%&#x27;</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301713923.png" alt="image.png" style="zoom:80%;" /><p>显然这个查询结果不是我们想要的，以上SQL之所以将所有数据全部显示了，因为下划线代表任意单个字符，<strong>如果你想让这个下划线变成一个普通的下划线字符，就要使用转义字符了，在mysql当中转义字符是“\”，这个和java语言中的转义字符是一样的：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%\_%&#x27;</span>;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301713697.png" alt="image.png" style="zoom:80%;" />]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第04章01节 查询DQL——简单查询</title>
      <link href="/2024/05/29/MySQL/5.%20%E7%AC%AC04%E7%AB%A001%E8%8A%82-%E6%9F%A5%E8%AF%A2DQL%E2%80%94%E2%80%94%E7%AE%80%E5%8D%95%E6%9F%A5%E8%AF%A2/"/>
      <url>/2024/05/29/MySQL/5.%20%E7%AC%AC04%E7%AB%A001%E8%8A%82-%E6%9F%A5%E8%AF%A2DQL%E2%80%94%E2%80%94%E7%AE%80%E5%8D%95%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h1><p>查询是SQL语言的核心，用于表达SQL查询的select查询命令是功能最强也是最为复杂的SQL语句，它的作用就是从数据库中检索数据，并将查询结果返回给用户。 select语句由：select子句(查询内容)、from子句(查询对象)、where子句(查询条件)、order by子句(排序方式)、group by子句(分组方式)等组成。查询语句属于SQL语句中的DQL语句，是所有SQL语句中最为复杂也是最重要的语句，所以必须掌握。接下来我们先从简单查询语句开始学习。</p><h2 id="一、查一个字段"><a href="#一、查一个字段" class="headerlink" title="一、查一个字段"></a>一、查一个字段</h2><hr><p>查询一个字段说的是：一个表有多列，查询其中的一列。<br>语法格式：select 字段名 from 表名;</p><ul><li>select和from是关键字，不能随便写</li><li><strong>一条SQL语句必须以“;”结尾</strong></li><li><strong>对于SQL语句来说，大小写都可以</strong></li><li>字段名和表名属于标识符，按照表的实际情况填写，不知道字段名的，可以使用desc命令查看表结构</li></ul><p>案例1：查询公司中所有员工编号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> empno <span class="keyword">from</span> emp; </span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301527623.png" alt="image.png"><br>案例2：查询公司中所有员工姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ENAME <span class="keyword">FROM</span> EMP;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301528648.png" alt="image.png"></p><p>在mysql命令行客户端中，sql语句没有分号是不会执行的：</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301528143.png" alt="image.png"><br>末尾加上“;”就执行了：</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301528560.png" alt="image.png"><br>以上sql虽然以分号结尾之后执行了，但是报错了，错误信息显示：语法错误。<br>假设一个SQL语句在书写过程中出错了，怎么终止这条SQL呢？\c</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301528772.png" alt="image.png"></p><ul><li><input disabled="" type="checkbox"> 任务1：查询所有部门名称。</li><li><input disabled="" type="checkbox"> 任务2：查询所有薪资等级。</li></ul><h2 id="二、查多个字段"><a href="#二、查多个字段" class="headerlink" title="二、查多个字段"></a>二、查多个字段</h2><hr><p>查询多个字段时，在字段名和字段名之间添加“,”即可。<br>语法格式：select 字段名1,字段名2,字段名3 from 表名;<br>案例1：查询员工编号以及员工姓名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> empno, ename <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301544208.png" alt="image.png"></p><p>字段的前后顺序无所谓（只是显示结果列的时候顺序变了)：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename, empno <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301545836.png" alt="image.png"></p><ul><li><input disabled="" type="checkbox"> 任务1：查询部门编号、部门名称以及位置。</li><li><input disabled="" type="checkbox"> 任务2：查询员工的名字以及工作岗位。</li></ul><h2 id="三、查所有字段"><a href="#三、查所有字段" class="headerlink" title="三、查所有字段"></a>三、查所有字段</h2><hr><p>查询所有字段的可以将每个字段都列出来查询，也可以采用“*”来代表所有字段<br>案例1：查询员工的所有信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301545146.png" alt="image.png"><br>案例2：查询所有部门信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301545083.png" alt="image.png"><br>采用“*”进行查询存在的缺点：</p><ul><li>select * from dept; 在执行的时候会被解析为 select DEPTNO, DNAME, LOC from dept; 再执行，所以这种效率方面弱一些。</li><li>采用“<em>”的可读性较差，通过“</em>”很难看出都有哪些具体的字段。</li></ul><p>什么时候使用“*”？</p><ul><li><p>这个SQL语句不在项目编码中使用，如果平时自己想快速查看表中所有数据的话，这种写法还是很给力的。</p></li><li><p><input disabled="" type="checkbox"> 任务1：查询所有的薪资等级以及每个薪资等级的最低工资和最高工资。</p></li></ul><h2 id="四、查询时字段可参与数学运算"><a href="#四、查询时字段可参与数学运算" class="headerlink" title="四、查询时字段可参与数学运算"></a>四、查询时字段可参与数学运算</h2><hr><p>在进行查询操作的时候，字段是可以参与数学运算的，例如加减乘除等。<br>案例1：查询每个员工的月薪</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename, sal <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301545466.png" alt="image.png"></p><p>案例2：查询每个员工的年薪（月薪 * 12)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename, sal <span class="operator">*</span> <span class="number">12</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301545777.png" alt="image.png"></p><ul><li><input disabled="" type="checkbox"> 任务1：查询每个员工月薪加1000之后的月薪</li><li><input disabled="" type="checkbox"> 任务2：查询每个员工月薪加1000之后的年薪</li></ul><h2 id="五、查询时字段可起别名"><a href="#五、查询时字段可起别名" class="headerlink" title="五、查询时字段可起别名"></a>五、查询时字段可起别名</h2><hr><p>我们借用一下之前的SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename, sal <span class="operator">*</span> <span class="number">12</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301546191.png" alt="image.png"><br>以上的查询结果列名“sal * 12”可读性较差，是否可以给查询结果的列名进行重命名呢？</p><h3 id="5-1-as关键字"><a href="#5-1-as关键字" class="headerlink" title="5.1 as关键字"></a>5.1 as关键字</h3><ul><li>使用as关键字<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename, sal <span class="operator">*</span> <span class="number">12</span> <span class="keyword">as</span> yearsal <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301546888.png" alt="image.png"><br>通过as关键字起别名后，查询结果列显示yearsal，可读性增强。</li></ul><h3 id="5-2-省略as关键字"><a href="#5-2-省略as关键字" class="headerlink" title="5.2 省略as关键字"></a>5.2 省略as关键字</h3><ul><li><p>其实as关键字可以省略，只要使用空格即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename, sal <span class="operator">*</span> <span class="number">12</span> yearsal <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301546001.png" alt="image.png"></p></li><li><p>通过以上测试，得知as可以省略，可以使用空格代替as，但如果别名中有空格呢？</p></li></ul><h3 id="5-3-别名中有空格"><a href="#5-3-别名中有空格" class="headerlink" title="5.3 别名中有空格"></a>5.3 别名中有空格</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename, sal <span class="operator">*</span> <span class="number">12</span> <span class="keyword">year</span> sal <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301546678.png" alt="image.png"><br>可以看出，执行报错了，说语法有问题，这是为什么？分析一下：SQL语句编译器在检查该语句的时候，在year后面遇到了空格，会继续找from关键字，但year后面不是from关键字，所以编译器报错了。怎么解决这个问题？</p><blockquote><p>记住：如果别名中有空格的话，可以将这个别名使用双引号或者单引号将其括起来。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename, sal <span class="operator">*</span> <span class="number">12</span> &quot;year sal&quot; <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> ename, sal <span class="operator">*</span> <span class="number">12</span> <span class="string">&#x27;year sal&#x27;</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301546987.png" alt="image.png"><br><strong>在mysql中，字符串既可以使用双引号也可以使用单引号，但还是建议使用单引号，因为单引号属于标准SQL。</strong></p><h3 id="5-4-别名中有中文"><a href="#5-4-别名中有中文" class="headerlink" title="5.4 别名中有中文"></a>5.4 别名中有中文</h3><ul><li><p>如果别名采用中文呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename, sal <span class="operator">*</span> <span class="number">12</span> 年薪 <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405301557674.png" alt="image.png"><br><strong>别名是中文是可以的，但是对于低版本的mysql来说会报错，需要添加双引号或单引号。</strong>我们当前使用的mysql版本是：8.0.24</p></li><li><p><input disabled="" type="checkbox"> 任务：查询所有员工的信息，要求每个字段名采用中文显示。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>初识String</title>
      <link href="/2024/05/29/Java%20SE/20.%20%E5%88%9D%E8%AF%86String/"/>
      <url>/2024/05/29/Java%20SE/20.%20%E5%88%9D%E8%AF%86String/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="初始String"><a href="#初始String" class="headerlink" title="初始String"></a>初始String</h1><h2 id="一、初始String"><a href="#一、初始String" class="headerlink" title="一、初始String"></a>一、初始String</h2><ol><li>Java中的<code>String</code>属于引用类型，代表字符串。    </li><li>Java专门在堆中为字符串准备了一个字符串常量池。因为字符串使用的比较频繁，放在字符串常量池省去了对象的创建过程，从而提高程序的执行效率。<ul><li>在Java程序中，所有带双引号的字符串字面量在编译阶段就确定会被放入字符串常量池中，JVM启动时初始化字符串常量池并将这些字面量创建好放入其中。</li><li>使用<code>new</code>关键字创建的字符串总是创建一个新的对象，即使该字符串内容相同</li><li>字符串常量池是一种缓存技术，提前创建好字符串字面量放进去，用时直接拿，提升执行效率。（这些字面量在JVM启动时就会创建好。）</li><li>当使用字符串字面量创建字符串时，JVM会首先检查字符串常量池中是否存在相同的字符串。如果存在，则返回常量池中字符串的引用；如果不存在，则在常量池中创建该字符串并返回引用。</li><li><code>intern()</code>方法用于将字符串添加到常量池或返回常量池中已有字符串的引用。这样可以确保相同内容的字符串只存储一。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testString01</span><span class="params">()</span>&#123;</span><br><span class="line">String s1=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">String s2=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">System.out.println(s1 == s2);      <span class="comment">//true</span></span><br><span class="line">String s3= <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);    </span><br><span class="line">System.out.println(s1 == s3);      <span class="comment">//false</span></span><br><span class="line">String s4=s3.intern();</span><br><span class="line">System.out.println(s1 == s4);      <span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>在Java8之后字符串常量池在堆中，Java8之前字符串常量池在永久代。</li><li>字符串一旦创建就不可变。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Stable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">byte</span>[] value;</span><br><span class="line"><span class="comment">//源码：使用了一个byte[]数组来存储字符序列，并且这个数组被声明为private final。</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="二、字符串的拼接"><a href="#二、字符串的拼接" class="headerlink" title="二、字符串的拼接"></a>二、字符串的拼接</h2><ol><li>在Java中，使用加号操作符（+）进行字符串拼接时，会创建一个<code>StringBuilder</code>对象。<br>在<code>StringBuilder</code>对象上执行拼接操作，最后通过调用<code>toString()</code>方法将<code>StringBuilder</code>对象转换为<code>String</code>对象。这种过程是在运行时动态发生的，因此生成的新字符串对象不会被放入字符串常量池中。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testString02</span><span class="params">()</span>&#123;</span><br><span class="line">        String s1=<span class="string">&quot;Hello &quot;</span>;</span><br><span class="line">        String s2=<span class="string">&quot;World!&quot;</span>;</span><br><span class="line">        String s3=s1+s2;</span><br><span class="line">        String s4=<span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        System.out.println(s3 == s4); <span class="comment">//false</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>两边都是字符串变量，字符串常量的拼接在编译阶段（编译时常量表达式）已经完成。编译器会在编译时优化这些拼接操作，将其结果直接放入字符串常量池中，因此 s1 和 s2 指向的是同一个字符串常量池中的对象。  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testString03</span><span class="params">()</span>&#123;</span><br><span class="line">String s1=<span class="string">&quot;Java&quot;</span>+<span class="string">&quot; SE&quot;</span>;</span><br><span class="line">String s2=<span class="string">&quot;Java SE&quot;</span>;</span><br><span class="line">System.out.println(s1 == s2);  <span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="三、字符串常用构造方法"><a href="#三、字符串常用构造方法" class="headerlink" title="三、字符串常用构造方法"></a>三、字符串常用构造方法</h2><h3 id="3-1-将char-数组转换为字符串"><a href="#3-1-将char-数组转换为字符串" class="headerlink" title="3.1 将char[]数组转换为字符串"></a>3.1 将char[]数组转换为字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testString04</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//将char[]数组转换为字符串</span></span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;重&#x27;</span>,<span class="string">&#x27;剑&#x27;</span>,<span class="string">&#x27;无&#x27;</span>,<span class="string">&#x27;锋&#x27;</span>,<span class="string">&#x27;，&#x27;</span>,<span class="string">&#x27;大&#x27;</span>,<span class="string">&#x27;巧&#x27;</span>,<span class="string">&#x27;无&#x27;</span>,<span class="string">&#x27;工&#x27;</span>,<span class="string">&#x27;。&#x27;</span>&#125;;</span><br><span class="line">        <span class="comment">//转成字符串</span></span><br><span class="line">        String s1=<span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-将char-数组部分转换为字符串"><a href="#3-2-将char-数组部分转换为字符串" class="headerlink" title="3.2 将char[]数组部分转换为字符串"></a>3.2 将char[]数组部分转换为字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testString05</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//将char[]数组转换为字符串</span></span><br><span class="line">       <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;重&#x27;</span>,<span class="string">&#x27;剑&#x27;</span>,<span class="string">&#x27;无&#x27;</span>,<span class="string">&#x27;锋&#x27;</span>,<span class="string">&#x27;，&#x27;</span>,<span class="string">&#x27;大&#x27;</span>,<span class="string">&#x27;巧&#x27;</span>,<span class="string">&#x27;无&#x27;</span>,<span class="string">&#x27;工&#x27;</span>,<span class="string">&#x27;。&#x27;</span>&#125;;</span><br><span class="line">       <span class="comment">//转成字符串</span></span><br><span class="line">       String s1=<span class="keyword">new</span> <span class="title class_">String</span>(chars,<span class="number">0</span>,<span class="number">4</span>);   <span class="comment">//重剑无锋</span></span><br><span class="line">       System.out.println(s1);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-将byte-数组转换成字符串"><a href="#3-3-将byte-数组转换成字符串" class="headerlink" title="3.3 将byte[]数组转换成字符串"></a>3.3 将byte[]数组转换成字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testString06</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//将byte[]数组转换成字符串</span></span><br><span class="line">       <span class="type">byte</span>[] bytes=&#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>&#125;;</span><br><span class="line">       <span class="comment">//将byte[]数组转换成字符串String，是一个解码的过程。（采用的是平台默认的字符编码方式进行的解码。）</span></span><br><span class="line">       String s1=<span class="keyword">new</span> <span class="title class_">String</span>(bytes);</span><br><span class="line">       System.out.println(s1);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-将byte-数组一部分转换成字符串"><a href="#3-4-将byte-数组一部分转换成字符串" class="headerlink" title="3.4 将byte[]数组一部分转换成字符串"></a>3.4 将byte[]数组一部分转换成字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testString07</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//将byte[]数组转换成字符串</span></span><br><span class="line">        <span class="type">byte</span>[] bytes=&#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>&#125;;</span><br><span class="line">        <span class="comment">//将byte[]数组一部分转换成字符串String，是一个解码的过程。（采用的是平台默认的字符编码方式进行的解码。）</span></span><br><span class="line">        String s1=<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-String-String-original"><a href="#3-5-String-String-original" class="headerlink" title="3.5 String(String  original)"></a>3.5 String(String  original)</h3><p>创建一个字符串对象，也可以使用 <code>new String(String  original)</code> 的方式，但不建议这样做。这种方法是内在的候选方法，不建议使用。该方法被 <code>@IntrinsicCandidate</code> 注解标注，而这个注解是Java 16引入的。   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testString110</span><span class="params">()</span>&#123;</span><br><span class="line">        String s1=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;重剑无锋，大巧无工。&quot;</span>);   <span class="comment">// 底层会有两个对象，一个是&quot;重剑无锋，大巧无工。&quot;在字符串常量池中。一个是在堆内存中，浪费内存。</span></span><br><span class="line">        String s2=<span class="string">&quot;重剑无锋，大巧无工。&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="四、乱码问题"><a href="#四、乱码问题" class="headerlink" title="四、乱码问题"></a>四、乱码问题</h2><h3 id="4-1-乱码的本质"><a href="#4-1-乱码的本质" class="headerlink" title="4.1 乱码的本质"></a>4.1 乱码的本质</h3><p>Java 乱码的本质通常是由于字符编码和解码不一致引起的。<br>字符编码是一种将字符转换为字节序列的规则，而解码是将字节序列转换回字符的过程。<br>如果编码和解码的规则不一致，就会导致字符无法正确还原，从而出现乱码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testString08</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="comment">//先将字符串转换成byte[]数组（这个过程是一个编码的过程）</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="string">&quot;重剑无锋，大巧无工&quot;</span>.getBytes(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="comment">//将byte[]数组转换为字符串（这是一个解码过程）</span></span><br><span class="line">        String s1=<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这里会产生乱码，因为编码是GBK，解码时UTF-8。</span></span><br><span class="line">    <span class="comment">//为了防止UTF-8手误，平台提供StandardCharsets.UTF_8。</span></span><br></pre></td></tr></table></figure><h3 id="4-2-动态获取平台编码"><a href="#4-2-动态获取平台编码" class="headerlink" title="4.2 动态获取平台编码"></a>4.2 动态获取平台编码</h3><p>如何使用平台默认字符集进行字符串的编码和解码，从而避免乱码问题。在跨平台开发中，为了避免字符集的不一致问题，推荐显式指定字符集（例如UTF-8）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStringo8</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 在不知道字符编码方式的时候，可以动态获取平台的编码方式。（使用平台默认的字符集进行编码）</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="string">&quot;重剑无锋，大巧无工&quot;</span>.getBytes(Charset.defaultCharset());</span><br><span class="line">        <span class="comment">// 使用平台默认的字符集进行解码。</span></span><br><span class="line">        String s1=<span class="keyword">new</span> <span class="title class_">String</span>(bytes,Charset.defaultCharset());</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第03章 初始化数据</title>
      <link href="/2024/05/28/MySQL/4.%20%E7%AC%AC03%E7%AB%A0-%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E6%8D%AE/"/>
      <url>/2024/05/28/MySQL/4.%20%E7%AC%AC03%E7%AB%A0-%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h1><h2 id="一、MySQL命令行基本命令"><a href="#一、MySQL命令行基本命令" class="headerlink" title="一、MySQL命令行基本命令"></a>一、MySQL命令行基本命令</h2><ol><li><p>列出当前数据库管理系统中有哪些数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281814664.png" alt="image.png"></p></li><li><p>创建数据库，起名bjpowernode。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database bjpowernode;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281957484.png" alt="image.png"></p></li><li><p>使用bjpowernode数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use bjpowernode;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281957003.png" alt="image.png"></p></li><li><p>查看当前用的是哪个数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> database();</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281957350.png" alt="image.png"></p></li><li><p>查看当前数据库中有哪些表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281959282.png" alt="image.png"></p></li></ol><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281959520.png" alt="image.png"></p><ol start="6"><li><p>删除数据库bjpowernode。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database bjpowernode;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281959789.png" alt="image.png"></p></li><li><p>退出mysql</p><ol><li>exit</li><li>quit</li><li>ctrl + c</li></ol></li><li><p>查看当前mysql版本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> version();</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281959501.png" alt="image.png"></p></li></ol><p>还可以使用mysql.exe命令来查看版本信息（在没有登录mysql之前使用）：mysql –version</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281959080.png" alt="image.png"></p><h2 id="二、数据库表的概述"><a href="#二、数据库表的概述" class="headerlink" title="二、数据库表的概述"></a>二、数据库表的概述</h2><table><thead><tr><th>name</th><th>age</th><th>gender</th></tr></thead><tbody><tr><td>张三</td><td>20</td><td>男</td></tr><tr><td>李四</td><td>22</td><td>女</td></tr></tbody></table><ul><li>以上就是数据库表格的直观展示形式。</li><li>表格英文单词table。</li><li>表是数据库存储数据的基本单元，数据库存储数据的时候，是将数据存储在表对象当中的。为什么将数据存储在表中呢？因为表存储数据非常直观。</li><li>任何一张表都有行和列：<ul><li>行：<strong>记录</strong>（一行就是一条数据）</li><li>列：<strong>字段</strong>（name字段、age字段、gender字段）</li></ul></li><li>每个字段包含以下属性：<ul><li>字段名：name、age、gender都是字段的名字</li><li>字段的数据类型：每个字段都有数据类型，比如：字符类型、数字类型、日期类型</li><li>字段的数据长度：每个字段有可能会有长度的限制</li><li>字段的约束：比如某些字段要求该字段下的数据不能重复、不能为空等，用来保证表格中数据合法有效</li></ul></li></ul><h2 id="三、初始化测试数据"><a href="#三、初始化测试数据" class="headerlink" title="三、初始化测试数据"></a>三、初始化测试数据</h2><p>为了方便后面内容的学习，老师提前准备了表以及表中的测试数据，以下是建表并且初始化数据的sql脚本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> EMP;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> DEPT;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> SALGRADE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> DEPT(DEPTNO <span class="type">int</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span> ,</span><br><span class="line">DNAME <span class="type">VARCHAR</span>(<span class="number">14</span>) ,</span><br><span class="line">LOC <span class="type">VARCHAR</span>(<span class="number">13</span>),</span><br><span class="line"><span class="keyword">primary</span> key (DEPTNO)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> EMP(EMPNO <span class="type">int</span>(<span class="number">4</span>)  <span class="keyword">not</span> <span class="keyword">null</span> ,</span><br><span class="line">ENAME <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">JOB <span class="type">VARCHAR</span>(<span class="number">9</span>),</span><br><span class="line">MGR <span class="type">INT</span>(<span class="number">4</span>),</span><br><span class="line">HIREDATE <span class="type">DATE</span>  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">SAL <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">COMM <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"><span class="keyword">primary</span> key (EMPNO),</span><br><span class="line">DEPTNO <span class="type">INT</span>(<span class="number">2</span>) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SALGRADE( GRADE <span class="type">INT</span>,</span><br><span class="line">LOSAL <span class="type">INT</span>,</span><br><span class="line">HISAL <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPT ( DEPTNO, DNAME, LOC ) <span class="keyword">VALUES</span> ( <span class="number">10</span>, <span class="string">&#x27;ACCOUNTING&#x27;</span>, <span class="string">&#x27;NEW YORK&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPT ( DEPTNO, DNAME, LOC ) <span class="keyword">VALUES</span> ( <span class="number">20</span>, <span class="string">&#x27;RESEARCH&#x27;</span>, <span class="string">&#x27;DALLAS&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPT ( DEPTNO, DNAME, LOC ) <span class="keyword">VALUES</span> ( <span class="number">30</span>, <span class="string">&#x27;SALES&#x27;</span>, <span class="string">&#x27;CHICAGO&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPT ( DEPTNO, DNAME, LOC ) <span class="keyword">VALUES</span> ( <span class="number">40</span>, <span class="string">&#x27;OPERATIONS&#x27;</span>, <span class="string">&#x27;BOSTON&#x27;</span>); </span><br><span class="line"> </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="keyword">VALUES</span> ( <span class="number">7369</span>, <span class="string">&#x27;SMITH&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="number">7902</span>,  <span class="string">&#x27;1980-12-17&#x27;</span>, <span class="number">800</span>, <span class="keyword">NULL</span>, <span class="number">20</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="keyword">VALUES</span> ( <span class="number">7499</span>, <span class="string">&#x27;ALLEN&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>, <span class="number">7698</span>,  <span class="string">&#x27;1981-02-20&#x27;</span>, <span class="number">1600</span>, <span class="number">300</span>, <span class="number">30</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="keyword">VALUES</span> ( <span class="number">7521</span>, <span class="string">&#x27;WARD&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>, <span class="number">7698</span>,  <span class="string">&#x27;1981-02-22&#x27;</span>, <span class="number">1250</span>, <span class="number">500</span>, <span class="number">30</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="keyword">VALUES</span> ( <span class="number">7566</span>, <span class="string">&#x27;JONES&#x27;</span>, <span class="string">&#x27;MANAGER&#x27;</span>, <span class="number">7839</span>,  <span class="string">&#x27;1981-04-02&#x27;</span>, <span class="number">2975</span>, <span class="keyword">NULL</span>, <span class="number">20</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="keyword">VALUES</span> ( <span class="number">7654</span>, <span class="string">&#x27;MARTIN&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>, <span class="number">7698</span>,  <span class="string">&#x27;1981-09-28&#x27;</span>, <span class="number">1250</span>, <span class="number">1400</span>, <span class="number">30</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="keyword">VALUES</span> ( <span class="number">7698</span>, <span class="string">&#x27;BLAKE&#x27;</span>, <span class="string">&#x27;MANAGER&#x27;</span>, <span class="number">7839</span>,  <span class="string">&#x27;1981-05-01&#x27;</span>, <span class="number">2850</span>, <span class="keyword">NULL</span>, <span class="number">30</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="keyword">VALUES</span> ( <span class="number">7782</span>, <span class="string">&#x27;CLARK&#x27;</span>, <span class="string">&#x27;MANAGER&#x27;</span>, <span class="number">7839</span>,  <span class="string">&#x27;1981-06-09&#x27;</span>, <span class="number">2450</span>, <span class="keyword">NULL</span>, <span class="number">10</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="keyword">VALUES</span> ( <span class="number">7788</span>, <span class="string">&#x27;SCOTT&#x27;</span>, <span class="string">&#x27;ANALYST&#x27;</span>, <span class="number">7566</span>,  <span class="string">&#x27;1987-04-19&#x27;</span>, <span class="number">3000</span>, <span class="keyword">NULL</span>, <span class="number">20</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="keyword">VALUES</span> ( <span class="number">7839</span>, <span class="string">&#x27;KING&#x27;</span>, <span class="string">&#x27;PRESIDENT&#x27;</span>, <span class="keyword">NULL</span>,  <span class="string">&#x27;1981-11-17&#x27;</span>, <span class="number">5000</span>, <span class="keyword">NULL</span>, <span class="number">10</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="keyword">VALUES</span> ( <span class="number">7844</span>, <span class="string">&#x27;TURNER&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>, <span class="number">7698</span>,  <span class="string">&#x27;1981-09-08&#x27;</span>, <span class="number">1500</span>, <span class="number">0</span>, <span class="number">30</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="keyword">VALUES</span> ( <span class="number">7876</span>, <span class="string">&#x27;ADAMS&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="number">7788</span>,  <span class="string">&#x27;1987-05-23&#x27;</span>, <span class="number">1100</span>, <span class="keyword">NULL</span>, <span class="number">20</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="keyword">VALUES</span> ( <span class="number">7900</span>, <span class="string">&#x27;JAMES&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="number">7698</span>,  <span class="string">&#x27;1981-12-03&#x27;</span>, <span class="number">950</span>, <span class="keyword">NULL</span>, <span class="number">30</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="keyword">VALUES</span> ( <span class="number">7902</span>, <span class="string">&#x27;FORD&#x27;</span>, <span class="string">&#x27;ANALYST&#x27;</span>, <span class="number">7566</span>,  <span class="string">&#x27;1981-12-03&#x27;</span>, <span class="number">3000</span>, <span class="keyword">NULL</span>, <span class="number">20</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP ( EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM,DEPTNO ) <span class="keyword">VALUES</span> ( <span class="number">7934</span>, <span class="string">&#x27;MILLER&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="number">7782</span>,  <span class="string">&#x27;1982-01-23&#x27;</span>, <span class="number">1300</span>, <span class="keyword">NULL</span>, <span class="number">10</span>); </span><br><span class="line"> </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SALGRADE ( GRADE, LOSAL, HISAL ) <span class="keyword">VALUES</span> ( <span class="number">1</span>, <span class="number">700</span>, <span class="number">1200</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SALGRADE ( GRADE, LOSAL, HISAL ) <span class="keyword">VALUES</span> ( <span class="number">2</span>, <span class="number">1201</span>, <span class="number">1400</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SALGRADE ( GRADE, LOSAL, HISAL ) <span class="keyword">VALUES</span> ( <span class="number">3</span>, <span class="number">1401</span>, <span class="number">2000</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SALGRADE ( GRADE, LOSAL, HISAL ) <span class="keyword">VALUES</span> ( <span class="number">4</span>, <span class="number">2001</span>, <span class="number">3000</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SALGRADE ( GRADE, LOSAL, HISAL ) <span class="keyword">VALUES</span> ( <span class="number">5</span>, <span class="number">3001</span>, <span class="number">9999</span>); </span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><ul><li>什么是sql脚本：文件名是.sql，并且该文件中编写了大量的SQL语句，执行sql脚本程序就相当于批量执行SQL语句。</li><li>你入职的时候，项目一般都是进展了一部分，多数情况下你进项目组的时候数据库的表以及数据都是有的，项目经理第一天可能会给你一个较大的sql脚本文件，你需要执行这个脚本文件来初始化你的本地数据库。（当然，也有可能数据库是共享的。）</li><li>创建文件：bjpowernode.sql，把以上SQL语句全部复制到sql脚本文件中。</li><li>执行SQL脚本文件，初始化数据库<ul><li>第一步：命令窗口登录mysql</li><li>第二步：创建数据库bjpowernode（如果之前已经创建就不需要再创建了）：create database bjpowernode;</li><li>第三步：使用数据库bjpowernode：use bjpowernode;</li><li>第四步：source命令执行sql脚本，注意：source命令后面是sql脚本文件的绝对路径。</li></ul></li></ul><p>        <img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405282000634.png" alt="image.png"></p><ul><li>第五步：查看是否初始化成功，执行：show tables;</li></ul><p>        <img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405282000907.png" alt="image.png"></p><blockquote><p>使用其他的mysql客户端工具也可以执行sql脚本，比如navicat。使用source命令执行sql脚本的优点：<strong>可支持大文件</strong>。</p></blockquote><h2 id="四、熟悉测试数据"><a href="#四、熟悉测试数据" class="headerlink" title="四、熟悉测试数据"></a>四、熟悉测试数据</h2><p>emp dept salgrade三张表分别存储什么信息</p><ul><li>emp：员工信息</li><li>dept：部门信息</li><li>salgrade：工资等级信息</li></ul><p>查看表结构：desc或describe，语法格式：desc或describe +表名<br><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405282000273.png" alt="image.png"><br>以上的结果展示的不是表中的数据，而是表的结构。</p><ul><li>Field是字段名</li><li>Type是这个字段的数据类型</li><li>Null是这个字段是否允许为空</li><li>Key是这个字段是否为主键或外键</li><li>Default是这个字段的默认值</li></ul><p>对以上表结构进行解释说明：</p><ul><li>emp表<ul><li>empno：员工编号，int类型（整数），不能为空，主键（主键后期学习约束时会进行说明）</li><li>ename：员工姓名，varchar类型（字符串）</li><li>job：工作岗位，varchar类型</li><li>mgr：上级领导编号，int类型</li><li>hiredate：雇佣日期，date类型（日期类型）</li><li>sal：月薪，double类型（带有浮点的数字）</li><li>comm：补助津贴，double类型</li><li>deptno：部门编号，int类型</li></ul></li><li>dept表<ul><li>deptno：部门编号，int类型，主键</li><li>dname：部门名称，varchar类型</li><li>loc：位置，varchar类型</li></ul></li><li>salgrade表<ul><li>grade：等级，int类型</li><li>losal：最低工资，int类型</li><li>hisal：最高工资，int类型</li></ul></li></ul><p>对于以上表结构要提前了解，后面学习的内容需要你马上反应出：哪个字段是什么意思。<br>查看一下表中的数据，来加深一下印象（以下SQL语句会在后面课程中学习）：<br><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405282000512.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第02章 MySQL的安装与配置</title>
      <link href="/2024/05/28/MySQL/3.%20%E7%AC%AC02%E7%AB%A0-MySQL%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/05/28/MySQL/3.%20%E7%AC%AC02%E7%AB%A0-MySQL%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="MySQL的安装与配置"><a href="#MySQL的安装与配置" class="headerlink" title="MySQL的安装与配置"></a>MySQL的安装与配置</h1><h2 id="一、MySQL概述"><a href="#一、MySQL概述" class="headerlink" title="一、MySQL概述"></a>一、MySQL概述</h2><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281649215.png" alt="image.png"></p><ul><li>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB公司开发，MySQL AB公司被Sun公司收购，Sun公司又被Oracle公司收购，目前属于Oracle公司。</li><li>MySQL是目前最流行的关系型数据库管理系统，在WEB应用方面MySQL是最好的RDBMS应用软件之一。 国内淘宝网站就使用的是MySQL集群。</li><li>MySQL特点<ul><li>MySQL有开源版本和收费版本，你使用开源版本是不收费的。</li><li>MySQL支持大型数据库，可以处理上千万记录的大型数据库。</li><li>MySQL使用标准的SQL数据库语言形式。</li><li>MySQL在很多系统上面都支持。</li><li>MySQL对Java，C都有很好的支持，当然其他的语言也支持比如Python、PHP。</li><li>MySQL是可以定制的，采用了GPL协议，你可以修改源码来开发自己的MySQL系统。</li></ul></li></ul><h2 id="二、-MySQL的下载"><a href="#二、-MySQL的下载" class="headerlink" title="二、 MySQL的下载"></a>二、 MySQL的下载</h2><ul><li>第一步：打开MySQL官网<a href="https://www.mysql.com/">https://www.mysql.com/</a></li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281650172.png" alt="image.png"></p><ul><li>第二步：点击”DOWNLOADS”</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281650697.png" alt="image.png"></p><ul><li>第三步：当前页继续下拉，直到找到下图链接</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281650017.png" alt="image.png"></p><ul><li>第四步：点击上图链接，进入下面页面，其中“MySQL Community Server”是解压版mysql，“MySQL Installer for Windows”是安装版，这里我们选择解压版</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281650646.png" alt="image.png"></p><ul><li>第五步：点击上图“MySQL Community Server”</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281650519.png" alt="image.png"></p><ul><li>第六步：点击上图第1个“Download”</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281650825.png" alt="image.png"></p><ul><li>第七步：点击上图“No thanks, just start my download.”开始下载，直到下载完毕。</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281650569.png" alt="image.png"></p><h2 id="三、MySQL安装与配置"><a href="#三、MySQL安装与配置" class="headerlink" title="三、MySQL安装与配置"></a>三、MySQL安装与配置</h2><ul><li>将下载的zip压缩包解压，我这里直接解压到C盘的根目录下</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281652570.png" alt="image.png"><br><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281652728.png" alt="image.png"><br>mysql的根目录为：C:\mysql-8.0.24-winx64</p><ul><li>将C:\mysql-8.0.24-winx64\bin目录配置到环境变量path当中</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281652491.png" alt="image.png"></p><ul><li>初始化data目录</li></ul><p>使用管理员身份打开dos命令窗口（按win键，输入cmd，点击管理员身份运行）<br><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281652228.png" alt="image.png"><br>cd命令切换到mysql的bin目录下，执行mysqld –initialize –console进行data目录初始化，此时会在控制台生成一个随机密码，下图红框中就是随机密码<br><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281653342.png" alt="image.png"><br>技巧：左键选中密码，直接点击右键，此时密码已经复制到剪贴板中了，<br>然后随便找一个文件，将密码粘贴到文件中保存起来。</p><ul><li>安装MySQL服务：cd命令切换到bin目录下，执行命令mysqld -install</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281653465.png" alt="image.png"></p><ul><li>查看mysql服务名称：此电脑-右键-管理-服务和应用程序-服务-找MySQL服务，如下图mysql服务名称：MySQL</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281654427.png" alt="image.png"></p><ul><li>启动MySQL服务：net start mysql，注意start后面是mysql服务的名称</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281654250.png" alt="image.png"><br>停止mysql服务的命令：net stop mysql<br>注意：启停mysql服务也可以在上一步的图中点击右键进行启停服务。</p><ul><li>登录mysql：输入mysql -uroot -p，然后回车，输入刚才的随机密码，然后回车，看到下图表示成功登录mysql</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281654605.png" alt="image.png"></p><ul><li>修改MySQL的root账户密码：ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘新密码’;</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281654093.png" alt="image.png"></p><ul><li>使用新密码登录mysql</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281654880.png" alt="image.png"></p><h2 id="四、MySQL卸载"><a href="#四、MySQL卸载" class="headerlink" title="四、MySQL卸载"></a>四、MySQL卸载</h2><ul><li>停止mysql的服务</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281657903.png" alt="image.png"></p><ul><li>删除mysql服务</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281657413.png" alt="image.png"></p><ul><li>删除mysql的目录</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281657162.png" alt="image.png"></p><h2 id="五、登录MySQL"><a href="#五、登录MySQL" class="headerlink" title="五、登录MySQL"></a>五、登录MySQL</h2><h3 id="5-1-本地登录"><a href="#5-1-本地登录" class="headerlink" title="5.1 本地登录"></a>5.1 本地登录</h3><ul><li>如果mysql的服务是启动的，打开dos命令窗口，输入：mysql -uroot -p，回车，然后输入root账户的密码</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281657028.png" alt="image.png"><br>解释“mysql -uroot -p”：<br>mysql是一个命令，在bin目录下，对应的命令文件是mysql.exe，如果将bin目录配置到环境<br>变量path中，才可以在以上位置使用该命令。<br>-uroot 表示登录的用户是root，u实际上是user单词的首字母。<br>-p 表示登录时使用密码，p实际上是password单词的首字母。</p><ul><li>也可以将密码以明文的形式写到-p后面，这样做可能会导致你的密码泄露</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281658096.png" alt="image.png"></p><h3 id="5-2-远程登录"><a href="#5-2-远程登录" class="headerlink" title="5.2 远程登录"></a>5.2 远程登录</h3><ul><li>假设mysql安装在A机器上，现在你要在B机器上连接mysql数据库，此时需要使用远程登录，远程登录时加上远程机器的ip地址即可</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281658579.png" alt="image.png"><br>-h中的h实际上是host单词的首字母。在-h后面的是远程计算机的ip地址。<br>127.0.0.1是计算机默认的本机IP地址。<br>127.0.0.1又可以写作：localhost，他们是等效的。<br><strong>注意：</strong>mysql默认情况下root账户是不支持远程登录的，其实这是一种安全策略，<br>为了保护root账户的安全。如果希望root账户支持远程登录，这是需要进行设置的。</p><ul><li><p>mysql8 开放root账户远程登录权限（危险动作）</p><p>第一步：现在本地使用root账户登录mysql</p><p>第二步：use mysql;</p><p>第三步：update user set host &#x3D; ‘%’ where user &#x3D; ‘root’;</p><p>第四步：flush privileges;</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第01章 数据库概述</title>
      <link href="/2024/05/28/MySQL/2.%20%E7%AC%AC01%E7%AB%A0-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/"/>
      <url>/2024/05/28/MySQL/2.%20%E7%AC%AC01%E7%AB%A0-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">note</p><!-- toc --></div><h1 id="数据库概述"><a href="#数据库概述" class="headerlink" title="数据库概述"></a>数据库概述</h1><h2 id="一、什么是数据库"><a href="#一、什么是数据库" class="headerlink" title="一、什么是数据库"></a>一、什么是数据库</h2><ul><li>数据库是一门独立的学科，只要是做软件开发的，数据库都要学。</li><li>数据库（电子化的文件柜）是“按照数据结构来组织、存储和管理数据的仓库”。是一个长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合。</li><li>它的存储空间很大，可以存放百万条、千万条、上亿条数据。</li><li>数据库并不是随意地将数据进行存放，是有一定的规则的，否则查询的效率会很低。</li><li>当今世界是一个充满着数据的互联网世界，充斥着大量的数据。即这个互联网世界就是数据世界。数据的来源有很多，比如出行记录、消费记录、浏览的网页、发送的消息等等。除了文本类型的数据，图像、音乐、声音都是数据。</li><li><strong>数据库对应的英文单词是DataBase，简称DB。</strong></li></ul><h2 id="二、数据库类型"><a href="#二、数据库类型" class="headerlink" title="二、数据库类型"></a>二、数据库类型</h2><ol><li><strong>关系型数据库</strong><ul><li>关系型数据库是依据关系模型来创建的数据库。所谓关系模型就是“<strong>一对一、一对多、多对多</strong>”等关系模型，关系模型就是指二维表格模型，因而一个关系型数据库就是由二维表及其之间的联系组成的一个数据组织。</li><li>关系型数据可以很好地存储一些关系模型的数据，比如一个老师对应多个学生的数据（“多对多”），一本书对应多个作者（“一对多”），一本书对应一个出版日期（“一对一”）。</li><li>关系模型包括数据结构（数据存储的问题，二维表）、操作指令集合（SQL语句）、完整性约束(表内数据约束、表与表之间的约束)。</li></ul></li><li><strong>非关系型数据库（NoSQL）</strong><ul><li>NoSQL，泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数据库在处理web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。</li><li>NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题。NoSQL最常见的解释是“non-relational”， “Not Only SQL”也被很多人接受。</li><li>NoSQL仅仅是一个概念，泛指非关系型的数据库，区别于关系数据库，它们不保证关系数据的ACID特性。NoSQL是一项全新的数据库革命性运动，其拥护者们提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。</li><li>NoSQL有如下优点：易扩展，NoSQL数据库种类繁多，但是一个共同的特点都是去掉关系数据库的关系型特性。数据之间无关系，这样就非常容易扩展。无形之间也在架构的层面上带来了可扩展的能力。大数据量，高性能，NoSQL数据库都具有非常高的读写性能，尤其在大数据量下，同样表现优秀。这得益于它的无关系性，数据库的结构简单。</li></ul></li></ol><h2 id="三、数据库管理系统"><a href="#三、数据库管理系统" class="headerlink" title="三、数据库管理系统"></a>三、数据库管理系统</h2><ul><li>数据库管理系统（Database Management System，简称DBMS）是为管理数据库而设计的电脑软件系统，一般具有存储、截取、安全保障、备份等基础功能。</li><li>数据库管理系统是数据库系统的核心组成部分，主要完成对数据库的操作与管理功能，实现数据库对象的创建、数据库存储数据的查询、添加、修改与删除操作和数据库的用户管理、权限管理等。</li><li>常见的数据库管理系统有：MySQL、Oracle、DB2、MS SQL Server、SQLite、PostgreSQL、Sybase等。</li></ul><h2 id="四、什么是SQL"><a href="#四、什么是SQL" class="headerlink" title="四、什么是SQL"></a>四、什么是SQL</h2><ul><li>结构化查询语言（Structured Query Language）简称SQL，是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。</li><li>结构化查询语言是高级的非过程化编程语言，允许用户在高层数据结构上工作。它不要求用户指定对数据的存放方法，也不需要用户了解具体的数据存放方式，所以具有完全不同底层结构的不同数据库系统, 可以使用相同的结构化查询语言作为数据输入与管理的接口。结构化查询语言语句可以嵌套，这使它具有极大的灵活性和强大的功能。</li><li><strong>SQL的分类</strong><ol><li>DQL<ul><li>数据查询语言（Data Query Language, DQL）是SQL语言中，负责进行数据查询而不会对数据本身进行修改的语句，这是最基本的SQL语句。保留字SELECT是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有FROM，WHERE，GROUP BY，HAVING和ORDER BY。这些DQL保留字常与其他类型的SQL语句一起使用。</li></ul></li><li>DDL<ul><li>数据定义语言 (Data Definition Language, DDL) 是SQL语言集中，负责数据结构定义与数据库对象定义的语言，由CREATE、ALTER与DROP三个语法所组成，最早是由 Codasyl (Conference on Data Systems Languages) 数据模型开始，现在被纳入 SQL 指令中作为其中一个子集。</li></ul></li><li>DML<ul><li>数据操纵语言（Data Manipulation Language, DML）是SQL语言中，负责对数据库对象运行数据访问工作的指令集，以INSERT、UPDATE、DELETE三种指令为核心，分别代表插入、更新与删除。</li></ul></li><li>DCL<ul><li>数据控制语言 (Data Control Language) 在SQL语言中，是一种可对数据访问权进行控制的指令，它可以控制特定用户账户对数据表、查看表、预存程序、用户自定义函数等数据库对象的控制权。由 GRANT 和 REVOKE 两个指令组成。DCL以控制用户的访问权限为主，GRANT为授权语句，对应的REVOKE是撤销授权语句。</li></ul></li><li>TPL<ul><li>数据事务管理语言（Transaction Processing Language）它的语句能确保被DML语句影响的表的所有行及时得以更新。TPL语句包括BEGIN TRANSACTION，COMMIT和ROLLBACK。</li></ul></li><li>CCL<ul><li>指针控制语言（Cursor Control Language），它的语句，像DECLARE CURSOR，FETCH INTO和UPDATE WHERE CURRENT用于对一个或多个表单独行的操作。</li></ul></li></ol></li><li><strong>DBMS、SQL、DB之间的关系</strong><ul><li>DBMS通过执行SQL来操作DB中的数据。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL常用指令</title>
      <link href="/2024/05/28/MySQL/1.%20Mysql%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2024/05/28/MySQL/1.%20Mysql%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<ol><li>启动MySQL服务：<code>net start mysql</code><blockquote><p>注意start后面是mysql服务的名称</p></blockquote></li><li>停止MySQL服务的命令：<code>net stop mysql</code></li><li>修改MySQL的root账户密码：<code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</code></li><li>登录MySQL：<code>mysql -uroot -p密码</code></li><li>停止MySQL的服务：<code>net stop mysql</code></li><li>删除MySQL服务：<code>mysqld --remove mysql</code></li><li>远程登录MySQL： <code>mysql --uroot -hIP地址 -p密码</code><blockquote><p>需要开放root账户登入权限，具体看MySQL的安装与配置。</p></blockquote></li><li>列出当前数据库管理系统中有哪些数据库：<code>show databases;</code></li><li>撤回Windows系统输入错误SQL指令：<code>Ctrl键+C</code></li><li>创建数据库：<code>create database 数据库名;</code></li><li>使用数据库：<code>use 数据库名;</code></li><li>查看当前用的是哪个数据库：<code>select database();</code></li><li>查看当前数据库中有哪些表：<code>show tables;</code></li><li>删除数据库：<code>drop database 数据库名;</code></li><li>查看当前MySQL版本：<code>select version();</code><blockquote><p>该指令是在登入MySQL中使用，没登入使用<code>mysql --version</code></p></blockquote></li><li>执行SQL脚本：<code>source sql脚本文件的绝对路径</code></li><li>查看表结构：<code>desc 表名;</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> InstructionSet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Exception（异常）</title>
      <link href="/2024/05/27/Java%20SE/19.%20%E5%BC%82%E5%B8%B8/"/>
      <url>/2024/05/27/Java%20SE/19.%20%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="一、异常的概述"><a href="#一、异常的概述" class="headerlink" title="一、异常的概述"></a>一、异常的概述</h2><h3 id="1-1-异常的概念-作用。"><a href="#1-1-异常的概念-作用。" class="headerlink" title="1.1 异常的概念&amp;作用。"></a>1.1 异常的概念&amp;作用。</h3><ul><li>异常<code>（Exception）</code>是程序执行过程中出现的非正常情况，它们表示程序在运行时遇到了某种问题。<br>Java通过异常处理机制来处理这些问题，以保证程序的健壮性和可维护性。</li></ul><h3 id="1-2-异常的存在方式。"><a href="#1-2-异常的存在方式。" class="headerlink" title="1.2 异常的存在方式。"></a>1.2 异常的存在方式。</h3><ul><li>在Java中，异常以类的形式存在，通过继承<code>Throwable</code>类来定义。异常分为<code>Error、Exception</code>两大类，其中<code>Exception</code>又分为受检异常和非受检异常。<br>通过异常处理机制，Java程序可以捕获和处理运行时的错误，增强了程序的健壮性和可维护性。</li><li>当异常发生时，通常是通过创建异常类的对象（使用new关键字）来表示异常的情况。这些异常对象包含了异常的详细信息，例如错误消息和堆栈跟踪信息。</li></ul><h3 id="1-3-异常的继承结构"><a href="#1-3-异常的继承结构" class="headerlink" title="1.3 异常的继承结构"></a>1.3 异常的继承结构</h3><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405272126059.png"></p><h2 id="二、-Java中的异常机制"><a href="#二、-Java中的异常机制" class="headerlink" title="二、 Java中的异常机制"></a>二、 Java中的异常机制</h2><h3 id="2-1-异常在程序中如何发生？"><a href="#2-1-异常在程序中如何发生？" class="headerlink" title="2.1 异常在程序中如何发生？"></a>2.1 异常在程序中如何发生？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testException</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//异常的发生要经历两个阶段</span></span><br><span class="line">       <span class="comment">//第一个阶段：创建异常对象</span></span><br><span class="line">       <span class="type">NullPointerException</span> <span class="variable">npe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">       <span class="comment">//第二个阶段：让异常发生（手动抛出异常）</span></span><br><span class="line">       <span class="keyword">throw</span> npe;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testException</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//合并成一步</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassCastException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-自定义异常"><a href="#2-2-自定义异常" class="headerlink" title="2.2 自定义异常"></a>2.2 自定义异常</h3><p><strong>自定义异常两步：</strong><br>第一步：编写类继承RuntimeException或者Exception<br>第二步：提供两个构造方法，一个无参数，一个带有String参数的，并且在构造方法中调用super(String)    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IllegalNameException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IllegalNameException</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IllegalNameException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、异常的处理"><a href="#三、异常的处理" class="headerlink" title="三、异常的处理"></a>三、异常的处理</h2><h3 id="3-1-使用throws关键字声明异常以抛出"><a href="#3-1-使用throws关键字声明异常以抛出" class="headerlink" title="3.1 使用throws关键字声明异常以抛出"></a>3.1 使用throws关键字声明异常以抛出</h3><p>当方法可能抛出异常但不在方法内部处理，而是将其抛给调用者处理时，使用<code>throws</code>关键字声明异常。这种方式适用于方法自身不适合处理异常，而是希望调用者决定如何处理。</p><blockquote><p>方法本身不适合处理异常，而是将其抛给调用者处理。<br>希望调用者明确知道方法可能抛出的异常，并强制其处理。</p></blockquote><p><strong>示例代码：在这个方法中，需要让调用者知道发生异常(姓名，年龄不合规，自定义抛出异常。)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(String name, <span class="type">int</span> age)</span> <span class="keyword">throws</span> IllegalNameException, IllegalAgeException&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户[&quot;</span>+name+<span class="string">&quot;]的信息正在保存....&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(name.length() &lt; <span class="number">6</span> || name.length() &gt; <span class="number">12</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalNameException</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(age &lt; <span class="number">18</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalAgeException</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户[&quot;</span>+name+<span class="string">&quot;]的信息保存成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-使用try-catch块捕获异常"><a href="#3-2-使用try-catch块捕获异常" class="headerlink" title="3.2 使用try-catch块捕获异常"></a>3.2 使用try-catch块捕获异常</h3><p><code>try-catch</code>块是直接在方法内部捕获和处理异常的方式。<br><strong>语法格式：</strong>       </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//需要执行的程序，这里的程序有可能出现问题。</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 变量名)&#123;</span><br><span class="line">      <span class="comment">//捕捉到异常，进行异常处理。</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 变量名)&#123;</span><br><span class="line">    </span><br><span class="line">        &#125; . . . </span><br><span class="line"><span class="comment">//后续代码可以执行。</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><ol><li>catch语句可以看作是分支，try catch语句中，最多只有一个catch分支执行。</li><li>catch可以写多个，但必须异常从小到大。</li></ol></blockquote><p><strong>示例代码</strong>    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomExceptions</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;欢迎使用本系统，先进行用户的注册：&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入年龄：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userService.register(name, age);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalNameException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名不合法&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAgeException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄不合法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;main over!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>变量e存储的是对象地址</p></blockquote><h2 id="四、多异常捕获"><a href="#四、多异常捕获" class="headerlink" title="四、多异常捕获"></a>四、多异常捕获</h2><p>在 Java 7 中，单个 catch 块可以捕获多种类型的异常，使用竖线 (|) 分隔。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomExceptions</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">// 注册</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userService.register(name, age);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalNameException | IllegalAgeException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名或者年龄不合法&quot;</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        System.out.println(<span class="string">&quot;main over!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：多异常捕捉只有最后一个有变量，其余只写类型。</p></blockquote><h2 id="五、异常的常用方法。"><a href="#五、异常的常用方法。" class="headerlink" title="五、异常的常用方法。"></a>五、异常的常用方法。</h2><h3 id="5-1-getMessage-方法"><a href="#5-1-getMessage-方法" class="headerlink" title="5.1 getMessage()方法"></a>5.1 getMessage()方法</h3><p><code>getMessage() </code>方法是 <code>Throwable </code>类（<code>Exception </code>类和 <code>Error </code>类的父类）中的一个方法，<br>用于获取创建异常对象时传递的详细消息。这个消息通常在异常被构造时作为参数传递给异常的构造方法。<br>这个消息有助于在捕获异常时了解导致异常的原因。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IllegalAgeException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IllegalAgeException</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IllegalAgeException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);  <span class="comment">//要想错误信息被打印，需要在构造方法调用父类构造方法。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServices</span> &#123;</span><br><span class="line">    User user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServices</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServices</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户注册异常处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalNameException 用户名异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAgeException 年龄异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> <span class="keyword">throws</span> IllegalNameException, IllegalAgeException &#123;</span><br><span class="line">        <span class="keyword">if</span>(user.getName().length()&gt;<span class="number">12</span>||user.getName().length()&lt;<span class="number">6</span>)  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalNameException</span>(<span class="string">&quot;无效名字异常，名字应在【6-12】位&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(user.getAge()&lt;<span class="number">0</span>||user.getAge()&gt;<span class="number">130</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalAgeException</span>(<span class="string">&quot;无效年龄异常，年龄应在【0-130】&quot;</span>);</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;camellia&quot;</span>,-<span class="number">10</span>);</span><br><span class="line">        <span class="type">UserServices</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServices</span>(user);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userService.register();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalNameException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Illegal name: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAgeException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Illegal age: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-printStackTrace方法"><a href="#5-2-printStackTrace方法" class="headerlink" title="5.2 printStackTrace方法"></a>5.2 printStackTrace方法</h3><p>在 Java 中，<code>printStackTrace</code> 方法是 <code>Throwable</code> 类（<code>Exception </code>类和<code>Error</code>类的父类）的一部分，用于打印异常的堆栈跟踪信息。<br>堆栈跟踪显示了异常发生时调用堆栈中的方法调用顺序，帮助开发者了解异常的来源及其传播路径，适用于开发人员调试程序。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;c&quot;</span>,<span class="number">10</span>);</span><br><span class="line">        <span class="type">UserServices</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServices</span>(user);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userService.register();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalNameException e) &#123;</span><br><span class="line">            e.printStackTrace();  <span class="comment">//打印异常追踪信息，是个栈信息。</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAgeException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Illegal age: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405281104963.png"></p><h2 id="六、finally语句块"><a href="#六、finally语句块" class="headerlink" title="六、finally语句块"></a>六、finally语句块</h2><p><code>finally </code>语句块是 Java 异常处理机制的一部分，用于确保某些代码在异常处理过程中始终被执行，不管是否发生异常。<br>它通常与<code>try</code>和 <code>catch</code> 语句块一起使用(至少和<code>try</code>一起)，以保证在<code> try</code> 语句块中进行的资源释放或清理操作一定会被执行。    </p><h3 id="6-1-用于资源释放"><a href="#6-1-用于资源释放" class="headerlink" title="6.1 用于资源释放"></a>6.1 用于资源释放</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinallyResourceExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;example.txt&quot;</span>);</span><br><span class="line">            <span class="comment">// 读取文件的代码</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IOException caught: &quot;</span> + e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();  <span class="comment">// 关闭文件流</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Error closing file: &quot;</span> + e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Finally block executed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>当然，只是开发中常用来关闭资源。</p></blockquote><h2 id="七、finally-块与-return-语句"><a href="#七、finally-块与-return-语句" class="headerlink" title="七、finally 块与 return 语句"></a>七、finally 块与 return 语句</h2><p>如果<code>try</code>或<code>catch</code>块中有<code>return</code>语句，<code>finally </code>块仍然会在方法返回之前被执行。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinallyReturnExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(methodWithFinally());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">methodWithFinally</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Return from try&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Finally block executed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;但是这个代码不能执行了。&quot;</span>); <span class="comment">//不可到达代码。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Out:</span></span><br><span class="line"><span class="comment">//Finally block executed</span></span><br><span class="line"><span class="comment">//Return from try</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果使用exit退出JVM，则finally代码无法执行   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinallyWithExitExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Inside try block&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">0</span>);  <span class="comment">// 终止 JVM</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Finally block executed&quot;</span>);  <span class="comment">// 这行不会被执行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 Java 中，当一个 try 块中包含 return 语句，并且紧跟其后的 finally 块中也修改了返回的变量，最终返回的值会是 try 块中计算出的值，<br>而不是 finally 块中修改后的值。这是因为 return 语句会在 try 块中首先确定返回值，<br>然后在执行 finally 块中的代码，但 finally 块中的修改不会影响已经确定的返回值。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinallyReturnExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(methodWithFinally());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">methodWithFinally</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：子类继承父类不能抛出更多的异常。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Arrays工具类</title>
      <link href="/2024/05/22/Java%20SE/18.%20Arrays%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2024/05/22/Java%20SE/18.%20Arrays%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="Arrays工具类"><a href="#Arrays工具类" class="headerlink" title="Arrays工具类"></a>Arrays工具类</h1><blockquote><p>注意：工具类中的方法大部分是静态方法，直接通过类名调用。</p></blockquote><h2 id="一、Arrays-toString"><a href="#一、Arrays-toString" class="headerlink" title="一、Arrays.toString"></a>一、Arrays.toString</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><ul><li><code>Arrays.toString()</code>是Java中<code>java.util.Arrays</code>类提供的一个静态方法，用于将数组转换为字符串表示形式。</li><li>该方法有多个重载版本，可以处理不同类型的数组，包括原始类型数组（如<code>int[]</code>、<code>double[]</code>等）和对象数组（如<code>String[]</code>、<code>Object[]</code>等）。</li><li><code>Arrays.toString()</code>方法不是通过继承&#96;&#96;Object<code>类来实现的。 实际上，它是</code>java.util.Arrays&#96;类的静态方法，用于将数组转换为字符串表示形式。</li></ul><h3 id="1-2-测试代码"><a href="#1-2-测试代码" class="headerlink" title="1.2 测试代码"></a>1.2 测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testToString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="comment">//      Object中的toString,println()底层会调用toString。</span></span><br><span class="line">        System.out.println(arr);</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="二、Arrays-deepToString"><a href="#二、Arrays-deepToString" class="headerlink" title="二、Arrays.deepToString"></a>二、Arrays.deepToString</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><ul><li><code>Arrays.deepToString()</code>是Java中<code>java.util.Arrays</code>类提供的一个静态方法，用于将多维数组转换为字符串表示形式。</li><li>与<code>Arrays.toString()</code>类似，<code>Arrays.deepToString()</code>方法也能够将数组转换为可读的字符串形式，但不同之处在于，它能够处理多维数组，包括嵌套数组。</li></ul><h3 id="2-2-测试代码"><a href="#2-2-测试代码" class="headerlink" title="2.2 测试代码"></a>2.2 测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeepToString</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">int</span>[][] arr = &#123;</span><br><span class="line">              &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;,</span><br><span class="line">              &#123;<span class="number">11</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">31</span>,<span class="number">41</span>,<span class="number">15</span>&#125;,</span><br><span class="line">              &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      System.out.println(Arrays.toString(arr));</span><br><span class="line">      System.out.println(Arrays.deepToString(arr));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="三、Arrays-equals"><a href="#三、Arrays-equals" class="headerlink" title="三、Arrays.equals"></a>三、Arrays.equals</h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h3><ul><li><code>Arrays.equals()</code>方法在比较两个数组时，会比较它们的内容是否相等。这适用于所有数据类型，包括基本数据类型和对象类型。</li><li>需要注意的是，<code>Arrays.equals()</code>方法要求两个数组的长度和每个对应位置的元素都相等才会返回true。</li></ul><h3 id="3-2-测试代码"><a href="#3-2-测试代码" class="headerlink" title="3.2 测试代码"></a>3.2 测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEquals</span><span class="params">()</span>&#123;</span><br><span class="line">       String[] s1=&#123;<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;camellia&quot;</span>,<span class="string">&quot;huahua&quot;</span>&#125;;</span><br><span class="line">       String[] s2=&#123;<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;camellia&quot;</span>,<span class="string">&quot;huahua&quot;</span>&#125;;</span><br><span class="line">       System.out.println(Arrays.equals(s1,s2));</span><br><span class="line">       String[] s3=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;camellia&quot;</span>,<span class="string">&quot;huahua&quot;</span>&#125;;</span><br><span class="line">       String[] s4=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;camellia&quot;</span>,<span class="string">&quot;huahua&quot;</span>&#125;;</span><br><span class="line">       System.out.println(Arrays.equals(s3,s4));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="四、Arrays-deepEquals"><a href="#四、Arrays-deepEquals" class="headerlink" title="四、Arrays.deepEquals"></a>四、Arrays.deepEquals</h2><h3 id="4-1-概念"><a href="#4-1-概念" class="headerlink" title="4.1 概念"></a>4.1 概念</h3><ul><li>和<code>Arrays.equals</code>功能相同，只是用来比较多维数组。</li></ul><h3 id="4-2-测试代码"><a href="#4-2-测试代码" class="headerlink" title="4.2 测试代码"></a>4.2 测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeepEquals</span><span class="params">()</span>&#123;</span><br><span class="line">       String[][] str1=&#123;&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>&#125;,&#123;<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>&#125;&#125;;</span><br><span class="line">       String[][] str2=&#123;&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>&#125;,&#123;<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>&#125;&#125;;</span><br><span class="line">       System.out.println(Arrays.deepEquals(str1,str2));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="五、Arrays-sort"><a href="#五、Arrays-sort" class="headerlink" title="五、Arrays.sort"></a>五、Arrays.sort</h2><h3 id="5-1-概念"><a href="#5-1-概念" class="headerlink" title="5.1 概念"></a>5.1 概念</h3><p><code>Arrays.sort</code> 是 Java 提供的用于对数组进行排序的静态方法。<br>这个方法在 <code>java.util.Arrays</code> 类中定义，支持对各种数据类型的数组进行排序，包括基本数据类型（如 <code>int</code>、<code>char</code> 等）和对象类型（如 <code>String</code>、自定义对象等）。    </p><h3 id="5-2-基本类型数据-引用类型数据排序"><a href="#5-2-基本类型数据-引用类型数据排序" class="headerlink" title="5.2 基本类型数据&amp;引用类型数据排序"></a>5.2 基本类型数据&amp;引用类型数据排序</h3><ol><li><p><strong>对基本类型数组进行排序</strong></p></li><li><p><strong>对对象类型数组进行排序</strong></p><ul><li><code>void sort(Object[] a)</code></li><li><code>void sort(T[] a, Comparator&lt;? super T&gt; c)</code></li></ul></li><li><p><strong>对数组的某个子范围进行排序</strong></p><ul><li><code>void sort(基本数据类型, int fromIndex, int toIndex)</code></li><li><code>void sort(Object[] a, int fromIndex, int toIndex)</code></li><li><code>void sort(T[] a, int fromIndex, int toIndex, Comparator&lt;? super T&gt; c)</code></li></ul></li></ol><h3 id="5-3-对象类型数组的排序（自定义顺序）"><a href="#5-3-对象类型数组的排序（自定义顺序）" class="headerlink" title="5.3 对象类型数组的排序（自定义顺序）"></a>5.3 对象类型数组的排序（自定义顺序）</h3><h4 id="5-3-1-匿名内部类"><a href="#5-3-1-匿名内部类" class="headerlink" title="5.3.1 匿名内部类"></a>5.3.1 匿名内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] stringArray = &#123;<span class="string">&quot;banana&quot;</span>, <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;cherry&quot;</span>&#125;;</span><br><span class="line">        Arrays.sort(stringArray, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;  </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> s2.compareTo(s1);  <span class="comment">// 按照逆序排序</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(stringArray));  <span class="comment">// 输出: [cherry, banana, apple]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>对于对象类型数组，数组元素必须实现 <code>Comparable</code> 接口或者提供 <code>Comparator</code> 实例，否则会抛出 <code>ClassCastException</code>。</li><li><code>Arrays.sort</code> 是原地排序（in-place），不会产生新的数组，排序过程在原数组上进行。</li><li>排序是稳定的（对于 <code>Object[]</code>），即相等的元素在排序后保持它们在原数组中的相对位置。</li></ol></blockquote><h4 id="5-3-2-自定义类"><a href="#5-3-2-自定义类" class="headerlink" title="5.3.2 自定义类"></a>5.3.2 自定义类</h4><p><code>java.lang.ClassCastException: class com.camellia.Arrays.Person</code> 无法强制转换为类 <code>java.lang.Comparable</code><br>代码底层一定有：<code>Comparable c1 = (Comparable) p1;</code>这个错误代码表示Person类不是可比较的。<br>因为p1是Person类实例化的对象，Person和Comparable既没有继承关系也不是实现关系。所以强制类型当然会出错。<br>解决办法：Person实现Comparable接口中的compareTo方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCustomSort</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;camellia&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;haha&quot;</span>, <span class="number">23</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;xiaohua&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;dujia&quot;</span>, <span class="number">25</span>);</span><br><span class="line">        Person[] arr = &#123;p1,p2,p3,p4&#125;;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>Person必须实现Comparable接口</li><li>必须重写compareTo方法</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重写compareTo方法</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="comment">// 编写比较规则</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) o; </span><br><span class="line">        <span class="keyword">return</span> person.age - <span class="built_in">this</span>.age;   <span class="comment">//降序</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意要强制类型转换<br>return person.age - this.age;   降序<br>return this.age-person.age;   升序<br>String实现了Comparable接口，重写了compareTo方法。所以自定义类中的比较规则是比较字符串可以如下比较：  </p><ul><li>return this.name.compareTo(person.getName());    </li><li>return person.getName().compareTo(this.getName());</li></ul></blockquote><h2 id="六、Arrays-parallelSort"><a href="#六、Arrays-parallelSort" class="headerlink" title="六、Arrays.parallelSort"></a>六、Arrays.parallelSort</h2><h3 id="6-1-概念"><a href="#6-1-概念" class="headerlink" title="6.1 概念"></a>6.1 概念</h3><p>基于分治的归并排序算法，支持多cpu排序，适合大数据量排序。<br>启用多核CPU并行排序,首先电脑要支持多核。数据量太小的话，不要使用这个方法，因为启用多核也要消耗资源的。<br>Java8引入的方法，通过源码分析，若果<strong>超过4096个位数</strong>，就启用多核。在4096以内就使用普通sort。</p><h3 id="6-2-代码示例"><a href="#6-2-代码示例" class="headerlink" title="6.2 代码示例"></a>6.2 代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testParalleSort</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100000000</span>];</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = random.nextInt(<span class="number">1000000000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取系统当前的毫秒数。</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Arrays.parallelSort(arr);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="七、Arrays-binarySearch"><a href="#七、Arrays-binarySearch" class="headerlink" title="七、Arrays.binarySearch"></a>七、Arrays.binarySearch</h2><h3 id="7-1-概念"><a href="#7-1-概念" class="headerlink" title="7.1 概念"></a>7.1 概念</h3><p><code>Arrays.binarySearch()</code> 是 Java 中用于在已排序的数组中执行二分查找的方法。二分查找是一种高效的搜索算法，用于在<strong>有序数组</strong>中查找<strong>特定元素的位置</strong>。</p><p>该方法有多种重载形式，但通常最常用的是接受三个参数的形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> key)</span></span><br></pre></td></tr></table></figure><p>这个方法接受一个已排序的整数数组 <code>a</code> 和一个要查找的整数 <code>key</code>，并返回 <code>key</code> 在数组中的索引。如果找到了 <code>key</code>，则返回其索引；否则返回一个负数，表示 <code>key</code> 在数组中的插入点（即将被插入以保持排序的索引位置）的相反数减一。</p><p>例如，如果数组为 <code>[1, 3, 5, 7, 9]</code>，而要查找的元素是 <code>5</code>，则 <code>binarySearch()</code> 方法将返回 <code>2</code>，因为 <code>5</code> 在数组中的索引是 <code>2</code>。如果要查找的元素是 <code>6</code>，则返回 <code>-4</code>，表示 <code>6</code> 应该插入在数组索引为 <code>3</code> 的位置。</p><p>此外，还有其他重载的 <code>binarySearch()</code> 方法，允许你指定要搜索的范围，以及一个用于比较元素的 <code>Comparator</code> 对象（如果数组不是简单类型）。</p><h3 id="7-2-代码示例"><a href="#7-2-代码示例" class="headerlink" title="7.2 代码示例"></a>7.2 代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBinarySearch</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">       System.out.println(Arrays.binarySearch(arr,<span class="number">2</span>));</span><br><span class="line">       Person p1=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;camellia&quot;</span>,<span class="number">20</span>);</span><br><span class="line">       Person p2=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;haha&quot;</span>,<span class="number">23</span>);</span><br><span class="line">       Person p3=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;xiaohua&quot;</span>,<span class="number">21</span>);</span><br><span class="line">       Person[] arr1=&#123;p1,p2,p3&#125;;</span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Arrays.binarySearch(arr1, p2, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Person&gt;() &#123; <span class="comment">//匿名类</span></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Person o1, Person o2)</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       System.out.println(i);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="八、Arrays-fill"><a href="#八、Arrays-fill" class="headerlink" title="八、Arrays.fill"></a>八、Arrays.fill</h2><h3 id="8-1概念"><a href="#8-1概念" class="headerlink" title="8.1概念"></a>8.1概念</h3><p><code>Arrays.fill()</code> 是 Java 中用于填充数组元素的方法。它将指定的值赋给数组中的所有元素，从索引 <code>fromIndex</code>（包含）到索引 <code>toIndex</code>（不包含）。<br><code>fill()</code> 方法有多种重载形式，最常用的形式是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> val)</span></span><br></pre></td></tr></table></figure><p>这个方法接受一个整数数组 <code>a</code> 和一个整数 <code>val</code>，将 <code>val</code> 赋给数组 <code>a</code> 中的所有元素。<br>除了基本类型 <code>int</code> 外，<code>fill()</code> 方法还可以用于填充其他基本类型数组和对象数组。例如，你可以使用以下方法来填充一个字符串数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] strArray = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line">Arrays.fill(strArray, <span class="string">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>这样，<code>strArray</code> 数组中的所有元素都会变成字符串 <code>&quot;Hello&quot;</code>。<br><code>fill()</code> 方法还有其他重载形式，允许你指定填充的范围。</p><h3 id="8-2-示例代码"><a href="#8-2-示例代码" class="headerlink" title="8.2 示例代码"></a>8.2 示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFill</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        Arrays.fill(arr,<span class="number">2</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        </span><br><span class="line">        Arrays.fill(arr,<span class="number">1</span>,<span class="number">3</span>,<span class="number">10</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        </span><br><span class="line">        String[] s1=<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">5</span>];</span><br><span class="line">        Arrays.fill(s1,<span class="string">&quot;Camellia&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(s1));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="九、Arrays-copyOf"><a href="#九、Arrays-copyOf" class="headerlink" title="九、Arrays.copyOf"></a>九、Arrays.copyOf</h2><h3 id="9-1-概念"><a href="#9-1-概念" class="headerlink" title="9.1 概念"></a>9.1 概念</h3><p><code>Arrays.copyOf()</code> 是 Java 中用于复制数组的方法。它可以复制一个现有数组的指定部分或者整个数组，并返回一个新的数组。</p><h3 id="9-2-示例代码"><a href="#9-2-示例代码" class="headerlink" title="9.2 示例代码"></a>9.2 示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCopyOf</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//数组拷贝</span></span><br><span class="line">        <span class="type">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] ints = Arrays.copyOf(arr, <span class="number">5</span>);</span><br><span class="line">        System.out.println(Arrays.toString(ints));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="十、Arrays-copyOfRange"><a href="#十、Arrays-copyOfRange" class="headerlink" title="十、Arrays.copyOfRange"></a>十、Arrays.copyOfRange</h2><h3 id="10-1-概念"><a href="#10-1-概念" class="headerlink" title="10.1 概念"></a>10.1 概念</h3><p><code>Arrays.copyOfRange()</code> 是 Java 中用于复制数组的一部分内容到新数组的方法。它可以从原始数组中选择指定范围的元素，并将它们复制到新的数组中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T[] copyOfRange(T[] original, <span class="type">int</span> from, <span class="type">int</span> to)</span><br></pre></td></tr></table></figure><p>这个方法接受三个参数：原始数组 <code>original</code>、起始索引 <code>from</code>（包含）和结束索引 <code>to</code>（<strong>不包含</strong>）。它会创建一个新的数组，并将原始数组 <code>original</code> 中从索引 <code>from</code> 到索引 <code>to-1</code> 的元素复制到新数组中。</p><h3 id="10-2-代码示例"><a href="#10-2-代码示例" class="headerlink" title="10.2 代码示例"></a>10.2 代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCopyOfRange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] ints = Arrays.copyOfRange(arr, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(Arrays.toString(ints));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意，<code>copyOfRange()</code> 方法会创建一个新数组，因此新数组的长度将是 <code>to - from</code>。如果 <code>from</code> 大于 <code>to</code>，则会抛出 <code>IllegalArgumentException</code> 异常。</p><h2 id="十一、Arrays-aslist"><a href="#十一、Arrays-aslist" class="headerlink" title="十一、Arrays.aslist"></a>十一、Arrays.aslist</h2><h3 id="11-1-概念"><a href="#11-1-概念" class="headerlink" title="11.1 概念"></a>11.1 概念</h3><p><code>Arrays.asList()</code> 是 Java 中用于将数组转换为列表的方法。它接受一个数组，并返回一个固定大小的列表，该列表由指定数组中的元素组成。</p><p>这个方法有两种重载形式，最常用的形式是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">asList</span><span class="params">(T... a)</span></span><br></pre></td></tr></table></figure><p>这个方法接受一个泛型参数 <code>T</code>，允许你将任意类型的数组转换为列表。它会创建一个由数组元素组成的列表，列表的长度与数组的长度相同。由于 <code>asList()</code> 返回的列表是基于原始数组的视图，因此对列表的修改将反映在原始数组中，反之亦然。</p><p>例如，以下代码将创建一个包含整数数组 <code>&#123;1, 2, 3&#125;</code> 元素的列表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>你也可以传递一个数组变量给 <code>asList()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] array = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>&#125;;</span><br><span class="line">List&lt;String&gt; list = Arrays.asList(array);</span><br></pre></td></tr></table></figure><p>这将创建一个包含字符串数组 <code>array</code> 元素的列表。</p><p>需要注意的是，<code>asList()</code> 返回的列表具有固定大小，不能执行添加或删除元素的操作。如果尝试修改列表的大小，例如添加或删除元素，将会抛出 <code>UnsupportedOperationException</code> 异常。</p><p>另外，需要注意的是，基本数据类型的数组不能直接作为 <code>asList()</code> 方法的参数，因为 Java 不支持泛型化的基本数据类型。如果需要将基本数据类型的数组转换为列表，需要先将其包装为相应的对象类型数组，然后再调用 <code>asList()</code> 方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] intArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(Arrays.stream(intArray).boxed().toArray(Integer[]::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure><h3 id="11-2-代码示例"><a href="#11-2-代码示例" class="headerlink" title="11.2 代码示例"></a>11.2 代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAsList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//将一串数据转成List集合</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.print(list.get(i)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>悲观锁&amp;乐观锁</title>
      <link href="/2024/05/22/JDBC/5.%20%E6%82%B2%E8%A7%82%E9%94%81-%E4%B9%90%E8%A7%82%E9%94%81/"/>
      <url>/2024/05/22/JDBC/5.%20%E6%82%B2%E8%A7%82%E9%94%81-%E4%B9%90%E8%A7%82%E9%94%81/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="悲观锁-乐观锁"><a href="#悲观锁-乐观锁" class="headerlink" title="悲观锁&amp;乐观锁"></a>悲观锁&amp;乐观锁</h1><h2 id="一、悲观锁（行级锁）"><a href="#一、悲观锁（行级锁）" class="headerlink" title="一、悲观锁（行级锁）"></a>一、悲观锁（行级锁）</h2><p>行级锁就像是保护数据库里每一行数据的小保险箱。<br>当一个人要对某一行数据做操作时（比如修改或者读取），他需要先打开这个保险箱，这时别人就不能同时操作这一行数据，直到他完成操作并关闭保险箱。<br>这样可以确保每一行数据都不会被多人同时改动，避免混乱和错误。</p><h3 id="1-1-悲观锁示例"><a href="#1-1-悲观锁示例" class="headerlink" title="1.1 悲观锁示例"></a>1.1 悲观锁示例</h3><p>假设我们有一个 <code>users</code> 表，包含 <code>id</code> 和 <code>name</code> 两列，现在我们想要更新其中一行的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建 users 表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向 users 表插入一些数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (id, name) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Alice&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (id, name) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;Bob&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (id, name) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;Charlie&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开始一个事务</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 选择并锁定 id 为 1 的行，这里使用 FOR UPDATE 来获取行级锁</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更新 id 为 1 的用户的名称</span></span><br><span class="line"><span class="keyword">UPDATE</span> users <span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;Alice Smith&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>SELECT ... FOR UPDATE</code> 语句用于获取对 id 为 1 的用户行的行级锁，以确保在事务结束前，其他事务不能修改该行数据。<br>使用行级锁可以确保数据的一致性和完整性，避免多个事务同时修改同一行数据可能导致的问题。</p><blockquote><p>当一个事务获取了行级锁并且还没有释放该锁之前，其他事务是无法对被锁定的行进行修改的。<br>关键词：for update</p></blockquote><h2 id="二、乐观锁"><a href="#二、乐观锁" class="headerlink" title="二、乐观锁"></a>二、乐观锁</h2><p>​        乐观锁是一种并发控制机制，常用于数据库管理系统中。<br>在乐观锁中，假设多个事务之间的冲突是不常见的，因此它们尽可能地允许并发执行。<br>它的核心思想是在事务提交之前不锁定数据，而是在事务提交时检查数据是否被其他事务修改过。<br>如果检测到冲突，通常会回滚事务并重试。    </p><p>​        在实践中，乐观锁通常通过在数据表中添加一个版本号或时间戳字段来实现。<br>每次更新数据时，版本号或时间戳会相应地增加。<br>当事务提交时，系统会比较提交时的版本号或时间戳与事务开始时读取的版本号或时间戳是否一致，如果不一致，则意味着有其他事务修改了数据，事务需要进行回滚和重试。    </p><p>​        乐观锁适用于读操作频繁、写操作相对较少的场景，以及对数据一致性要求不是特别严格的情况。它可以提高系统的并发性能，但需要开发人员注意处理并发冲突的情况，以及适当处理重试机制。</p>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JDBC工具类&amp;示例</title>
      <link href="/2024/05/21/JDBC/4.%20JDBC%E5%B7%A5%E5%85%B7%E7%B1%BB-%E7%A4%BA%E4%BE%8B/"/>
      <url>/2024/05/21/JDBC/4.%20JDBC%E5%B7%A5%E5%85%B7%E7%B1%BB-%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="JDBC工具类-示例"><a href="#JDBC工具类-示例" class="headerlink" title="JDBC工具类&amp;示例"></a>JDBC工具类&amp;示例</h1><h2 id="一、JDBC工具类"><a href="#一、JDBC工具类" class="headerlink" title="一、JDBC工具类"></a>一、JDBC工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdbc.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类，简化JDBC编程。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 该类提供了获取数据库连接和关闭资源的静态方法。</span></span><br><span class="line"><span class="comment"> * 配置信息通过配置文件读取，初始化时会自动加载驱动。</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Camellia.xiaohua</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-5-21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里采用配置文件。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ResourceBundle</span> <span class="variable">rb</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工具类中的构造方法都是私有的。</span></span><br><span class="line"><span class="comment">     * 因为工具类中的方法都是静态的，不需要new对象，直接采用类名调用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">DBUtil</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册驱动加载一次即可。</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Failed to load JDBC driver&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库连接对象。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException 当获取连接失败时抛出此异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭资源。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn 连接对象，可以为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt 数据库操作对象，可以为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs 查询结果集，可以为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Connection conn, Statement stmt, ResultSet rs)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();  <span class="comment">// 建议替换为日志记录</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();  <span class="comment">// 建议替换为日志记录</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();  <span class="comment">// 建议替换为日志记录</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、JDBC工具类示例"><a href="#二、JDBC工具类示例" class="headerlink" title="二、JDBC工具类示例"></a>二、JDBC工具类示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdbc.fuzzyqueries;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jdbc.utils.DBUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 示例类，演示如何使用JDBC进行模糊查询。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 该类包含一个主方法，通过模糊查询从数据库中检索用户名。</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 配置信息和数据库连接由 &#123;<span class="doctag">@link</span> com.jdbc.utils.DBUtil&#125; 提供。</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-5-21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Camellia.xiaohua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FuzzyQueries</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 程序的主方法，演示如何使用JDBC进行模糊查询。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 命令行参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1、获取连接</span></span><br><span class="line">            conn = DBUtil.getConnection();</span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);    <span class="comment">//注意开启事务</span></span><br><span class="line">            <span class="comment">// 2、获取预编译的数据库操作对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT username FROM user WHERE username LIKE ?&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, <span class="string">&quot;_a%&quot;</span>);</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            conn.commit();  <span class="comment">//提交事务</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();  <span class="comment">// 建议替换为日志记录</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            DBUtil.close(conn, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>在使用封装工具类一定不要忘记：</p><ol><li>开启事务</li><li>提交事务</li><li>回滚事务</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC事务（单机事务）</title>
      <link href="/2024/05/21/JDBC/3.%20JDBC%E4%BA%8B%E5%8A%A1%EF%BC%88%E5%8D%95%E6%9C%BA%E4%BA%8B%E5%8A%A1%EF%BC%89/"/>
      <url>/2024/05/21/JDBC/3.%20JDBC%E4%BA%8B%E5%8A%A1%EF%BC%88%E5%8D%95%E6%9C%BA%E4%BA%8B%E5%8A%A1%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="JDBC事务（单机事务）"><a href="#JDBC事务（单机事务）" class="headerlink" title="JDBC事务（单机事务）"></a>JDBC事务（单机事务）</h1><p>JDBC单机事务是指<strong>在单个数据库连接</strong>上执行一系列数据库操作，以确保这些操作要么全部成功，要么全部失败，从而保证数据的完整性和一致性。</p><h2 id="一、JDBC事务机制"><a href="#一、JDBC事务机制" class="headerlink" title="一、JDBC事务机制"></a>一、JDBC事务机制</h2><p>jdbc事务机制：<br>1、默认情况下，JDBC 连接是自动提交的，每个独立的SQL语句都会被视为一个事务并立即提交。<br>但是在实际业务中，通常是多条DML语句共同联合才能完成，必须保证这些DML语句在同一个事务中同时成功或者同时失败。<br>所以，要管理事务，首先需要关闭自动提交模式。</p><h2 id="二、开启JDBC单机事务的三大步"><a href="#二、开启JDBC单机事务的三大步" class="headerlink" title="二、开启JDBC单机事务的三大步"></a>二、开启JDBC单机事务的三大步</h2><ol><li><p>开启事务（关闭自动提交）<br>若要开启事务，一般在连接数据库的时候就关闭自动提交。   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">connection= DriverManager.getConnection(url,username,password);</span><br><span class="line"><span class="comment">//将自动提交代码机制修改为手动提交。</span></span><br><span class="line">connection.setAutoCommit(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li><li><p>提交事务<br>在获取异常<code>catch</code>之前关闭事务，因为执行到这说明以上程序没有问题，事务结束，手动提交。   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.commit();</span><br></pre></td></tr></table></figure></li><li><p>回滚事务<br>捕获异常之后，回滚事务。   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.printStackTrace();</span><br></pre></td></tr></table></figure></li></ol><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransaction</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ResourceBundle</span> <span class="variable">rb</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">       <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">           <span class="comment">//注册驱动</span></span><br><span class="line">           Class.forName(driver);</span><br><span class="line">           <span class="comment">//连接数据库</span></span><br><span class="line">           connection= DriverManager.getConnection(url,username,password);</span><br><span class="line">           <span class="comment">/**1、将自动提交代码机制修改为手动提交。*/</span></span><br><span class="line">           connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">           <span class="comment">//获取预编译的数据库操作对象</span></span><br><span class="line">           String sql=<span class="string">&quot;update t_act set balance=? where actno=? &quot;</span>;</span><br><span class="line">           preparedStatement=connection.prepareStatement(sql);</span><br><span class="line">           <span class="comment">//执行sql</span></span><br><span class="line">           preparedStatement.setDouble(<span class="number">1</span>,<span class="number">10000</span>);</span><br><span class="line">           preparedStatement.setInt(<span class="number">2</span>,<span class="number">1001</span>);</span><br><span class="line">           <span class="type">int</span> count=preparedStatement.executeUpdate();</span><br><span class="line">           preparedStatement.setDouble(<span class="number">1</span>,<span class="number">10000</span>);</span><br><span class="line">           preparedStatement.setInt(<span class="number">2</span>,<span class="number">1002</span>);</span><br><span class="line">           count+=preparedStatement.executeUpdate();</span><br><span class="line">           <span class="comment">//处理</span></span><br><span class="line">           System.out.println(count==<span class="number">2</span>?<span class="string">&quot;success&quot;</span>:<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">           <span class="comment">/**2.程序能够走到这说明以上程序没有问题，事务结束，手动提交。*/</span></span><br><span class="line">           connection.commit();</span><br><span class="line">       &#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">           <span class="comment">/**3.回滚事务*/</span></span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">           <span class="comment">/**3.回滚事务*/</span></span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span>(preparedStatement != <span class="literal">null</span>)&#123;<span class="keyword">try</span>&#123;preparedStatement.close();&#125;<span class="keyword">catch</span>(SQLException e)&#123;e.printStackTrace();&#125;&#125;</span><br><span class="line">           <span class="keyword">if</span>(connection != <span class="literal">null</span>)&#123;<span class="keyword">try</span>&#123;connection.close();&#125;<span class="keyword">catch</span>(SQLException e)&#123;e.printStackTrace();&#125;&#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：单机事务这么写。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/2024/05/20/JDBC/2.%20SQL%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/05/20/JDBC/2.%20SQL%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p>SQL注入是一种网络攻击，利用应用程序未正确处理用户输入数据的漏洞，通过在输入字段插入恶意的SQL代码来执行数据库操作。<br>这种攻击可能导致数据泄露、数据篡改或者完全控制数据库。</p><h2 id="一、SQL注入现象"><a href="#一、SQL注入现象" class="headerlink" title="一、SQL注入现象"></a>一、SQL注入现象</h2><p>假设有一个登录页面，用户需要输入用户名和密码。应用程序接收到用户输入后，构建了如下的SQL查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;输入的用户名&#x27;</span> <span class="keyword">AND</span> password<span class="operator">=</span><span class="string">&#x27;输入的密码&#x27;</span>;</span><br></pre></td></tr></table></figure><p>攻击者可以在用户名和密码字段中插入恶意的SQL代码，比如输入 <code>&#39; OR &#39;1&#39;=&#39;1</code>，那么构建出来的查询语句就变成了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">AND</span> password<span class="operator">=</span><span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这样，无论输入的用户名和密码是什么，条件 <code>&#39;1&#39;=&#39;1&#39;</code> 都为真，因此查询将返回所有用户的记录，从而绕过了身份验证，攻击者就可以获取所有用户的信息。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdbc.userlogin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前程序存在问题：</span></span><br><span class="line"><span class="comment"> * 用户名：fdsa</span></span><br><span class="line"><span class="comment"> * 密码：fdsa&#x27; or &#x27;1&#x27;=&#x27;1</span></span><br><span class="line"><span class="comment"> * 登入成功</span></span><br><span class="line"><span class="comment"> * 这个就叫SQL注入（安全隐患）。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 导致这个的根本原因是什么？</span></span><br><span class="line"><span class="comment"> * 用户输入的信息含有sql语句的关键字，并且这些关键字参与sql语句的编译过程。</span></span><br><span class="line"><span class="comment"> * 导致原SQL语句含义被扭曲了，进而达到sql注入。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLogin</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//初始化一个界面UI</span></span><br><span class="line">        Map&lt;String,String&gt; userLoginInfo= initUI();</span><br><span class="line">        <span class="comment">//验证用户信息</span></span><br><span class="line">        <span class="type">boolean</span> loginSuccess=login(userLoginInfo);</span><br><span class="line">        System.out.println(loginSuccess?<span class="string">&quot;登入成功&quot;</span>:<span class="string">&quot;登入失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userLoginInfo 用户登入信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> false表示失败，true表示成功。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">login</span><span class="params">(Map&lt;String, String&gt; userLoginInfo)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> loginSuccess=<span class="literal">false</span>;</span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">rb</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;userlogin&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1、注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">//2、连接数据库.</span></span><br><span class="line">            conn= DriverManager.getConnection(url, username, password);</span><br><span class="line">            <span class="comment">//3、获取数据库对像。</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">//4、执行SQL语句</span></span><br><span class="line">            String sql=<span class="string">&quot;select * from t_user where username=&#x27;&quot;</span>+userLoginInfo.get(<span class="string">&quot;username&quot;</span>)+<span class="string">&quot;&#x27; and password=&#x27;&quot;</span>+userLoginInfo.get(<span class="string">&quot;password&quot;</span>)+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">            <span class="comment">//5、处理查询结果集</span></span><br><span class="line">            rs=stmt.executeQuery(sql);</span><br><span class="line">            <span class="keyword">if</span>(rs.next())loginSuccess=<span class="literal">true</span>; <span class="comment">//只要结果集有数据就是成功,注意：直接return会导致资源没有释放。</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//6、关闭连接</span></span><br><span class="line">            <span class="keyword">try</span>&#123;<span class="keyword">if</span>(rs!=<span class="literal">null</span>)rs.close();&#125;<span class="keyword">catch</span>(SQLException e)&#123;e.printStackTrace();&#125;</span><br><span class="line">            <span class="keyword">try</span>&#123;<span class="keyword">if</span>(stmt!=<span class="literal">null</span>)stmt.close();&#125;<span class="keyword">catch</span>(SQLException e)&#123;e.printStackTrace();&#125;</span><br><span class="line">            <span class="keyword">try</span>&#123;<span class="keyword">if</span>(conn!=<span class="literal">null</span>)conn.close();&#125;<span class="keyword">catch</span>(SQLException e)&#123;e.printStackTrace();&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> loginSuccess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化用户界面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户输入的用户名和密码。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title function_">initUI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;密码:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        Map&lt;String, String&gt; userLoginInfo = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">        userLoginInfo.put(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">        userLoginInfo.put(<span class="string">&quot;password&quot;</span>, password);</span><br><span class="line">        <span class="keyword">return</span> userLoginInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、解决SQL注入问题"><a href="#二、解决SQL注入问题" class="headerlink" title="二、解决SQL注入问题"></a>二、解决SQL注入问题</h2><ul><li>只要用户提供的信息不参与SQL语句的编译过程，问题就解决了。<br>即使用户提供的信息中含有SQL语句的关键字，但是没有参与编译，不起作用。<br>而为了让用户信息不参与编译，可以使用java.sql.PreparedStatement。    </li><li>PreparedStatement接口继承了java.sql.Statement。    </li><li>PreparedStatement是属于预编译的数据库操作对象。     </li><li>PreparedStatement的原理：预先对SQL语句的框架进行编译，然后再给SQL语句传<strong>值</strong>。</li></ul><h3 id="2-1-PreparedStatement实现"><a href="#2-1-PreparedStatement实现" class="headerlink" title="2.1 PreparedStatement实现"></a>2.1 PreparedStatement实现</h3><blockquote><p>使用PreparedStatement的代码步骤顺序有所不同。</p></blockquote><ol><li><p>注册驱动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(driver);</span><br></pre></td></tr></table></figure></li><li><p>获取连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn= DriverManager.getConnection(url, username, password);</span><br></pre></td></tr></table></figure></li><li><p>获取预编译的数据库操作对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String sql=<span class="string">&quot;select * from t_user where username = ? and password = ?&quot;</span>;</span><br><span class="line"><span class="comment">//程序执行到此处，会发送SQL语句框架给DBMS，然后DBMS进行sql语句的预编译。</span></span><br><span class="line">pstmt=conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//给占位符？传值（第一个问号下标是1，后面依次2、3...。JDBC中所有下表从1开始。）</span></span><br><span class="line">pstmt.setString(<span class="number">1</span>,username);  <span class="comment">//这样即使有关键字也不参与编译。</span></span><br><span class="line">pstmt.setString(<span class="number">2</span>,password);</span><br></pre></td></tr></table></figure><blockquote><p>sql语句的位置有所调动，需在prepareStatement创建之前。<br>SQL语句框架中。?表示一个占位符，一个占位符将来接受一个值。<br>注意：占位符不能用单引号括起来。</p></blockquote></li><li><p>执行SQL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs=pstmt.executeQuery();</span><br></pre></td></tr></table></figure><blockquote><p>在不需要再传sql了，因为在创建prepareStatement就已经传递过了。</p></blockquote></li><li><p>处理结果集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写自己的需求即可。</span></span><br><span class="line"><span class="keyword">if</span>(rs.next())loginSuccess=<span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li><li><p>释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(rs!=<span class="literal">null</span>)<span class="keyword">try</span> &#123;rs.close();&#125; <span class="keyword">catch</span> (SQLException e) &#123;e.printStackTrace();&#125;</span><br><span class="line"><span class="keyword">if</span>(pstmt!=<span class="literal">null</span>)<span class="keyword">try</span> &#123;pstmt.close();&#125; <span class="keyword">catch</span> (SQLException e) &#123;e.printStackTrace();&#125;</span><br><span class="line"><span class="keyword">if</span>(conn!=<span class="literal">null</span>)<span class="keyword">try</span> &#123;conn.close();&#125; <span class="keyword">catch</span> (SQLException e) &#123;e.printStackTrace();&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-2-示例代码"><a href="#2-2-示例代码" class="headerlink" title="2.2 示例代码"></a>2.2 示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdbc.userlogin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解决SQL注入问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SQLInjectionSolution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//初始化一个界面UI</span></span><br><span class="line">        Map&lt;String,String&gt; userLoginInfo= initUI();</span><br><span class="line">        <span class="comment">//验证用户信息</span></span><br><span class="line">        <span class="type">boolean</span> loginSuccess=login(userLoginInfo);</span><br><span class="line">        System.out.println(loginSuccess?<span class="string">&quot;登入成功&quot;</span>:<span class="string">&quot;登入失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userLoginInfo 用户登入信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> false表示失败，true表示成功。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">login</span><span class="params">(Map&lt;String, String&gt; userLoginInfo)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> loginSuccess=<span class="literal">false</span>;</span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">rb</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;userlogin&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//使用PreparedStatement预编译的数据库操作对象。</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1、注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">//2、连接数据库.</span></span><br><span class="line">            conn= DriverManager.getConnection(url, username, password);</span><br><span class="line">            <span class="comment">//3、获取预编译的数据库操作对像。</span></span><br><span class="line">            <span class="comment">//SQL语句框架中。?表示一个占位符，一个占位符将来接受一个值。注意：占位符不能用单引号括起来。</span></span><br><span class="line">            String sql=<span class="string">&quot;select * from t_user where username = ? and password = ?&quot;</span>;</span><br><span class="line">            <span class="comment">//程序执行到此处，会发送SQL语句框架给DBMS，然后DBMS进行sql语句的预编译。</span></span><br><span class="line">            pstmt=conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//给占位符？传值（第一个问号下标是1，后面依次2、3...。JDBC中所有下表从1开始。）</span></span><br><span class="line">            pstmt.setString(<span class="number">1</span>,username);  <span class="comment">//这样即使有关键字也不参与编译。</span></span><br><span class="line">            pstmt.setString(<span class="number">2</span>,password);</span><br><span class="line">            <span class="comment">//4、执行SQL。</span></span><br><span class="line">            rs=pstmt.executeQuery(); <span class="comment">//在不需要再传sql了，因为在创建prepareStatement就已经传递过了。</span></span><br><span class="line">            <span class="comment">//5、处理查询结果集</span></span><br><span class="line">            <span class="keyword">if</span>(rs.next())loginSuccess=<span class="literal">true</span>; <span class="comment">//只要结果集有数据就是成功,注意：直接return会导致资源没有释放。</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//6、关闭连接</span></span><br><span class="line">            <span class="keyword">try</span>&#123;<span class="keyword">if</span>(rs!=<span class="literal">null</span>)rs.close();&#125;<span class="keyword">catch</span>(SQLException e)&#123;e.printStackTrace();&#125;</span><br><span class="line">            <span class="keyword">try</span>&#123;<span class="keyword">if</span>(pstmt!=<span class="literal">null</span>)pstmt.close();&#125;<span class="keyword">catch</span>(SQLException e)&#123;e.printStackTrace();&#125;</span><br><span class="line">            <span class="keyword">try</span>&#123;<span class="keyword">if</span>(conn!=<span class="literal">null</span>)conn.close();&#125;<span class="keyword">catch</span>(SQLException e)&#123;e.printStackTrace();&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> loginSuccess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化用户界面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户输入的用户名和密码。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title function_">initUI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;密码:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        Map&lt;String, String&gt; userLoginInfo = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">        userLoginInfo.put(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">        userLoginInfo.put(<span class="string">&quot;password&quot;</span>, password);</span><br><span class="line">        <span class="keyword">return</span> userLoginInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、prepareStatement和Statement对比"><a href="#三、prepareStatement和Statement对比" class="headerlink" title="三、prepareStatement和Statement对比"></a>三、prepareStatement和Statement对比</h2><h3 id="3-1-效率方面"><a href="#3-1-效率方面" class="headerlink" title="3.1 效率方面"></a>3.1 效率方面</h3><ol><li><p><strong><code>PreparedStatement</code>预编译和缓存：</strong></p><ul><li><code>PreparedStatement</code> 预编译SQL语句，并将其缓存起来。在需要多次执行相同的SQL语句时，数据库可以重复使用预编译的查询计划，而无需重新编译。这节省了编译时间，提高了性能。</li></ul></li><li><p><strong><code>Statement</code> 每次执行都要编译：</strong></p><ul><li>每次执行 <code>Statement</code> 时，SQL语句都会被重新解析、编译和优化，这会增加数据库的开销，尤其是当相同的SQL语句被多次执行时。</li></ul></li></ol><h3 id="3-2-类型安全检测"><a href="#3-2-类型安全检测" class="headerlink" title="3.2 类型安全检测"></a>3.2 类型安全检测</h3><h4 id="1-PreparedStatement"><a href="#1-PreparedStatement" class="headerlink" title="1. PreparedStatement"></a>1. <strong>PreparedStatement</strong></h4><ul><li><strong>参数化查询</strong>：<code>PreparedStatement</code> 允许使用占位符（<code>?</code>）来代表参数，并使用特定的方法（如 <code>setString()</code>、<code>setInt()</code> 等）来设置这些参数的值。</li><li><strong>自动类型检查</strong>：由于每个参数都通过特定的方法设置，因此 JDBC 驱动程序会自动进行类型检查，确保传递的值符合SQL查询的要求。</li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO t_user (username, password, age) VALUES (?, ?, ?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置参数时，JDBC驱动程序会自动进行类型检查</span></span><br><span class="line">pstmt.setString(<span class="number">1</span>, username); <span class="comment">// 设置字符串类型</span></span><br><span class="line">pstmt.setString(<span class="number">2</span>, password); <span class="comment">// 设置字符串类型</span></span><br><span class="line">pstmt.setInt(<span class="number">3</span>, age);            <span class="comment">// 设置整数类型</span></span><br><span class="line"></span><br><span class="line">pstmt.executeUpdate();</span><br></pre></td></tr></table></figure><p>在上面的代码中：</p><ul><li>第一个参数被设置为字符串类型（<code>setString</code>），第二个参数也被设置为字符串类型，第三个参数被设置为整数类型（<code>setInt</code>）。</li><li>JDBC 驱动程序会确保这些参数的类型与SQL语句中的预期类型一致。如果类型不匹配，会在编译时或运行时抛出 <code>SQLException</code>。</li></ul><h4 id="2-Statement"><a href="#2-Statement" class="headerlink" title="2. Statement"></a>2. <strong>Statement</strong></h4><ul><li><strong>直接拼接SQL字符串</strong>：<code>Statement</code> 通过拼接字符串来构建SQL语句。</li><li><strong>缺乏类型检查</strong>：由于SQL语句是动态构建的，JDBC驱动程序无法在构建SQL语句时进行类型检查，这可能导致SQL注入风险和运行时错误。</li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;username&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;password&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO t_user (username, password, age) VALUES (&#x27;&quot;</span> + username + <span class="string">&quot;&#x27;, &#x27;&quot;</span> + password + <span class="string">&quot;&#x27;, &quot;</span> + age + <span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">stmt.executeUpdate(sql);</span><br></pre></td></tr></table></figure><p>在上面的代码中：</p><ul><li>所有的SQL查询部分都是通过字符串拼接完成的。</li><li>缺乏类型检查，容易导致SQL注入问题，也容易因为字符串拼接错误导致语法错误。</li></ul><blockquote><p>总结：</p><ol><li>PreparedStatement没有sql注入问题。   </li><li>PreparedStatement有预编译和缓存，效率更高。   </li><li>PreparedStatement支持类型安全检测。</li></ol></blockquote><h3 id="3-3-何时用Statement？"><a href="#3-3-何时用Statement？" class="headerlink" title="3.3 何时用Statement？"></a>3.3 何时用Statement？</h3><p>虽然Statement有很多缺点，会导致SQL注入。但是有的程序功能必须使用Statement，需要进行sql语句的拼接，利用SQL注入传入sql关键字。<br>例如、商城的按价格排序。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdbc.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//用户在控制台输入desc就是升序、输入asc就是降序。</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入desc或者asc:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">keyWords</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行sql</span></span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">rb</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            conn= DriverManager.getConnection(url,username,password);</span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            String sql=<span class="string">&quot;select id from user order by id &quot;</span>+keyWords;</span><br><span class="line">            rs=stmt.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;id:&quot;</span>+rs.getInt(<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(rs!=<span class="literal">null</span>)<span class="keyword">try</span> &#123;rs.close();&#125; <span class="keyword">catch</span> (SQLException e) &#123;e.printStackTrace();&#125;</span><br><span class="line">            <span class="keyword">if</span>(stmt!=<span class="literal">null</span>)<span class="keyword">try</span> &#123;stmt.close();&#125; <span class="keyword">catch</span> (SQLException e) &#123;e.printStackTrace();&#125;</span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="literal">null</span>)<span class="keyword">try</span> &#123;conn.close();&#125; <span class="keyword">catch</span> (SQLException e) &#123;e.printStackTrace();&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringAOP</title>
      <link href="/2024/05/17/Spring/SpringAOP/"/>
      <url>/2024/05/17/Spring/SpringAOP/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h2 id="SpringAOP"><a href="#SpringAOP" class="headerlink" title="SpringAOP"></a>SpringAOP</h2><p><strong>学习目标</strong></p><blockquote><ul><li>理解并掌握AOP相关概念</li><li>能够说出AOP的工作流程</li><li>能运用AOP相关知识完成对应的案例编写</li><li>重点掌握Spring的声明式事务管理</li></ul></blockquote><h2 id="1、AOP简介"><a href="#1、AOP简介" class="headerlink" title="1、AOP简介"></a>1、AOP简介</h2><p>前面我们在介绍Spring的时候说过，Spring有两个核心的概念，一个是<code>IOC/DI</code>，一个是<code>AOP</code>。</p><p>前面已经对<code>IOC/DI</code>进行了系统的学习，接下来要学习它的另一个核心内容，就是&#x3D;&#x3D;AOP&#x3D;&#x3D;。</p><p>对于AOP,我们前面提过一句话是:&#x3D;&#x3D;AOP是在不改原有代码的前提下对其进行增强。&#x3D;&#x3D;</p><p>对于下面的内容，我们主要就是围绕着这一句话进行展开学习，主要学习两方面内容<code>AOP核心概念</code>,<code>AOP作用</code>:</p><h3 id="1-1-什么是AOP"><a href="#1-1-什么是AOP" class="headerlink" title="1.1 什么是AOP?"></a>1.1 什么是AOP?</h3><ul><li><strong>AOP(Aspect Oriented Programming)面向切面编程，一种编程范式，指导开发者如何组织程序结构。</strong><ul><li>OOP(Object Oriented Programming)面向对象编程</li></ul></li></ul><p>我们都知道OOP是一种编程思想，那么AOP也是一种编程思想，编程思想主要的内容就是指导程序员该如何编写程序，所以它们两个是不同的<code>编程范式</code>。</p><h3 id="1-2-AOP作用"><a href="#1-2-AOP作用" class="headerlink" title="1.2 AOP作用"></a>1.2 AOP作用</h3><ul><li>作用:在不惊动原始设计的基础上为其进行功能增强，前面咱们有技术就可以实现这样的功能即<code>代理模式</code>。</li></ul><h3 id="1-3-AOP核心概念"><a href="#1-3-AOP核心概念" class="headerlink" title="1.3 AOP核心概念"></a>1.3 AOP核心概念</h3><p>为了能更好的理解AOP的相关概念，我们准备了一个环境，整个环境的内容我们暂时可以不用关注，最主要的类为:<code>BookDaoImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//记录程序当前执行执行（开始时间）</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//业务执行万次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;<span class="number">10000</span>;i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//记录程序当前执行时间（结束时间）</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//计算时间差</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">totalTime</span> <span class="operator">=</span> endTime-startTime;</span><br><span class="line">        <span class="comment">//输出信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;执行万次消耗时间：&quot;</span> + totalTime + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao update ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao delete ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao select ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码的内容相信大家都能够读懂，对于<code>save</code>方法中有计算万次执行消耗的时间。</p><p>当在App类中从容器中获取bookDao对象后，分别执行其<code>save</code>,<code>delete</code>,<code>update</code>和<code>select</code>方法后会有如下的打印结果:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172336782.png" alt="1630143927489"></p><p>这个时候，我们就应该有些疑问?</p><ul><li>对于计算万次执行消耗的时间只有save方法有，为什么delete和update方法也会有呢?</li><li>delete和update方法有，那什么select方法为什么又没有呢?</li></ul><p>这个案例中其实就使用了Spring的AOP，在不惊动(改动)原有设计(代码)的前提下，想给谁添加功能就给谁添加。这个也就是Spring的理念：</p><ul><li>无入侵式&#x2F;无侵入式</li></ul><p>说了这么多，Spring到底是如何实现的呢?</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172336686.png" alt="1630144353462"></p><p>(1)前面一直在强调，Spring的AOP是对一个类的方法在不进行任何修改的前提下实现增强。对于上面的案例中BookServiceImpl中有<code>save</code>,<code>update</code>,<code>delete</code>和<code>select</code>方法,这些方法我们给起了一个名字叫&#x3D;&#x3D;连接点&#x3D;&#x3D;</p><p>(2)在BookServiceImpl的四个方法中，<code>update</code>和<code>delete</code>只有打印没有计算万次执行消耗时间，但是在运行的时候已经有该功能，那也就是说<code>update</code>和<code>delete</code>方法都已经被增强，所以对于<strong>需要增强的方法</strong>我们给起了一个名字叫&#x3D;&#x3D;切入点&#x3D;&#x3D;</p><p>(3)执行BookServiceImpl的update和delete方法的时候都被添加了一个计算万次执行消耗时间的功能，将这个功能抽取到一个方法中，换句话说就是<strong>存放共性功能的方法</strong>，我们给起了个名字叫&#x3D;&#x3D;通知&#x3D;&#x3D;</p><p>(4)通知是要增强的内容，会有多个，切入点是需要被增强的方法，也会有多个，那哪个切入点需要添加哪个通知，就需要提前将它们之间的关系描述清楚，那么<strong>对于通知和切入点之间的关系描述</strong>，我们给起了个名字叫&#x3D;&#x3D;切面&#x3D;&#x3D;</p><p>(5)通知是一个方法，方法不能独立存在需要被写在一个类中，这个类我们也给起了个名字叫&#x3D;&#x3D;通知类&#x3D;&#x3D;</p><p>至此AOP中的核心概念就已经介绍完了，总结下:</p><ul><li>连接点(JoinPoint)：程序执行过程中的任意位置，粒度为执行方法、抛出异常、设置变量等<ul><li>在SpringAOP中，理解为方法的执行</li></ul></li><li>切入点(Pointcut):匹配连接点的式子<ul><li>在SpringAOP中，一个切入点可以描述一个具体方法，也可也匹配多个方法<ul><li>一个具体的方法:如com.itheima.dao包下的BookDao接口中的无形参无返回值的save方法</li><li>匹配多个方法:所有的save方法，所有的get开头的方法，所有以Dao结尾的接口中的任意方法，所有带有一个参数的方法</li></ul></li><li>连接点范围要比切入点范围大，是切入点的方法也一定是连接点，但是是连接点的方法就不一定要被增强，所以可能不是切入点。</li></ul></li><li>通知(Advice):在切入点处执行的操作，也就是共性功能<ul><li>在SpringAOP中，功能最终以方法的形式呈现</li></ul></li><li>通知类：定义通知的类</li><li>切面(Aspect):描述通知与切入点的对应关系。</li></ul><p><strong>小结</strong></p><p>这一节中主要讲解了AOP的概念与作用，以及AOP中的核心概念，学完以后大家需要能说出:</p><ul><li>什么是AOP?</li><li>AOP的作用是什么?</li><li>AOP中核心概念分别指的是什么?<ul><li>连接点</li><li>切入点</li><li>通知</li><li>通知类</li><li>切面</li></ul></li></ul><h2 id="2、AOP入门案例"><a href="#2、AOP入门案例" class="headerlink" title="2、AOP入门案例"></a>2、AOP入门案例</h2><h3 id="2-1-需求分析"><a href="#2-1-需求分析" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h3><p>案例设定：测算接口执行效率，但是这个案例稍微复杂了点，我们对其进行简化。</p><p>简化设定：在方法执行前输出当前系统时间。</p><p>对于SpringAOP的开发有两种方式，XML 和 &#x3D;&#x3D;注解&#x3D;&#x3D;，我们使用哪个呢?</p><p>因为现在注解使用的比较多，所以本次课程就采用注解完成AOP的开发。</p><p>总结需求为:使用SpringAOP的注解方式完成在方法执行的前打印出当前系统时间。</p><h3 id="2-2-思路分析"><a href="#2-2-思路分析" class="headerlink" title="2.2 思路分析"></a>2.2 思路分析</h3><p>需求明确后，具体该如何实现，都有哪些步骤，我们先来分析下:</p><blockquote><p>1.导入坐标(pom.xml)</p><p>2.制作连接点(原始操作，Dao接口与实现类)</p><p>3.制作共性功能(通知类与通知)</p><p>4.定义切入点</p><p>5.绑定切入点与通知关系(切面)</p></blockquote><h3 id="2-3-环境准备"><a href="#2-3-环境准备" class="headerlink" title="2.3 环境准备"></a>2.3 环境准备</h3><ul><li><p>创建一个Maven项目</p></li><li><p>pom.xml添加Spring依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加BookDao和BookDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao update ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建Spring的配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写App运行类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终创建好的项目结构如下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172337839.png" alt="1630167092142"></p><p><strong>说明:</strong></p><ul><li>目前打印save方法的时候，因为方法中有打印系统时间，所以运行的时候是可以看到系统时间</li><li>对于update方法来说，就没有该功能</li><li>我们要使用SpringAOP的方式在不改变update方法的前提下让其具有打印系统时间的功能。</li></ul><h3 id="2-4-AOP实现步骤"><a href="#2-4-AOP实现步骤" class="headerlink" title="2.4 AOP实现步骤"></a>2.4 AOP实现步骤</h3><h4 id="步骤1-添加依赖"><a href="#步骤1-添加依赖" class="headerlink" title="步骤1:添加依赖"></a>步骤1:添加依赖</h4><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172337807.png" alt="1630146885493"></p><ul><li>因为<code>spring-context</code>中已经导入了<code>spring-aop</code>,所以不需要再单独导入<code>spring-aop</code></li><li>导入AspectJ的jar包,AspectJ是AOP思想的一个具体实现，Spring有自己的AOP实现，但是相比于AspectJ来说比较麻烦，所以我们直接采用Spring整合ApsectJ的方式进行AOP开发。</li></ul><h4 id="步骤2-定义接口与实现类"><a href="#步骤2-定义接口与实现类" class="headerlink" title="步骤2:定义接口与实现类"></a>步骤2:定义接口与实现类</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">环境准备的时候，BookDaoImpl已经准备好，不需要做任何修改</span><br></pre></td></tr></table></figure><h4 id="步骤3-定义通知类和通知"><a href="#步骤3-定义通知类和通知" class="headerlink" title="步骤3:定义通知类和通知"></a>步骤3:定义通知类和通知</h4><p><em><strong>通知就是将共性功能抽取出来后形成的方法</strong></em>，共性功能指的就是当前系统时间的打印。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类名和方法名没有要求，可以任意。</p><h4 id="步骤4-定义切入点"><a href="#步骤4-定义切入点" class="headerlink" title="步骤4:定义切入点"></a>步骤4:定义切入点</h4><p>BookDaoImpl中有两个方法，分别是save和update，我们要增强的是update方法，该如何定义呢?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span><span class="comment">//连接点是update()</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>切入点定义依托一个不具有实际意义的方法进行，即无参数、无返回值、方法体无实际逻辑。</li><li>execution及后面编写的内容，后面会有章节专门去学习。</li></ul><h4 id="步骤5-制作切面"><a href="#步骤5-制作切面" class="headerlink" title="步骤5:制作切面"></a>步骤5:制作切面</h4><p>切面是用来描述通知和切入点之间的关系，如何进行关系的绑定?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span><span class="comment">//可以把切面看作是一个拦截器，当程序执行到一定的点时，切面就会介入并执行一些额外的任务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绑定切入点与通知关系，并指定通知添加到原始连接点的具体执行&#x3D;&#x3D;位置&#x3D;&#x3D;</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172338826.png" alt="1630148447689"></p><p><strong>说明:</strong>@Before翻译过来是之前，也就是说通知会在切入点方法执行之前执行，除此之前还有其他四种类型，后面会讲。</p><h4 id="步骤6-将通知类配给容器并标识其为切面类"><a href="#步骤6-将通知类配给容器并标识其为切面类" class="headerlink" title="步骤6:将通知类配给容器并标识其为切面类"></a>步骤6:将通知类配给容器并标识其为切面类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤7-开启注解格式AOP功能"><a href="#步骤7-开启注解格式AOP功能" class="headerlink" title="步骤7:开启注解格式AOP功能"></a>步骤7:开启注解格式AOP功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤8-运行程序"><a href="#步骤8-运行程序" class="headerlink" title="步骤8:运行程序"></a>步骤8:运行程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        bookDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到在执行update方法之前打印了系统时间戳，说明对原始方法进行了增强，AOP编程成功。</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172338884.png" alt="1630147945888"></p><h3 id="知识点1：-EnableAspectJAutoProxy"><a href="#知识点1：-EnableAspectJAutoProxy" class="headerlink" title="知识点1：@EnableAspectJAutoProxy"></a>知识点1：@EnableAspectJAutoProxy</h3><table><thead><tr><th>名称</th><th>@EnableAspectJAutoProxy</th></tr></thead><tbody><tr><td>类型</td><td>配置类注解</td></tr><tr><td>位置</td><td>配置类定义上方</td></tr><tr><td>作用</td><td>开启注解格式AOP功能</td></tr></tbody></table><h3 id="知识点2：-Aspect"><a href="#知识点2：-Aspect" class="headerlink" title="知识点2：@Aspect"></a>知识点2：@Aspect</h3><table><thead><tr><th>名称</th><th>@Aspect</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>切面类定义上方</td></tr><tr><td>作用</td><td>设置当前类为AOP切面类</td></tr></tbody></table><h3 id="知识点3：-Pointcut"><a href="#知识点3：-Pointcut" class="headerlink" title="知识点3：@Pointcut"></a>知识点3：@Pointcut</h3><table><thead><tr><th>名称</th><th>@Pointcut</th></tr></thead><tbody><tr><td>类型</td><td>方法注解</td></tr><tr><td>位置</td><td>切入点方法定义上方</td></tr><tr><td>作用</td><td>设置切入点方法</td></tr><tr><td>属性</td><td>value（默认）：切入点表达式</td></tr></tbody></table><h3 id="知识点4：-Before"><a href="#知识点4：-Before" class="headerlink" title="知识点4：@Before"></a>知识点4：@Before</h3><table><thead><tr><th>名称</th><th>@Before</th></tr></thead><tbody><tr><td>类型</td><td>方法注解</td></tr><tr><td>位置</td><td>通知方法定义上方</td></tr><tr><td>作用</td><td>设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法前运行</td></tr></tbody></table><h2 id="3、AOP工作流程"><a href="#3、AOP工作流程" class="headerlink" title="3、AOP工作流程"></a>3、AOP工作流程</h2><p>AOP的入门案例已经完成，对于刚才案例的执行过程，我们就得来分析分析，这一节我们主要讲解两个知识点:<code>AOP工作流程</code>和<code>AOP核心概念</code>。其中核心概念是对前面核心概念的补充。</p><h3 id="3-1-AOP工作流程"><a href="#3-1-AOP工作流程" class="headerlink" title="3.1 AOP工作流程"></a>3.1 AOP工作流程</h3><p>由于AOP是基于Spring容器管理的bean做的增强，所以整个工作过程需要从Spring加载bean说起:</p><h4 id="流程1-Spring容器启动"><a href="#流程1-Spring容器启动" class="headerlink" title="流程1:Spring容器启动"></a>流程1:Spring容器启动</h4><ul><li>容器启动就需要去加载bean,哪些类需要被加载呢?</li><li>需要被增强的类，如:BookServiceImpl</li><li>通知类，如:MyAdvice</li><li><strong>注意此时bean对象还没有创建成功</strong></li></ul><h4 id="流程2-读取所有切面配置中的切入点"><a href="#流程2-读取所有切面配置中的切入点" class="headerlink" title="流程2:读取所有切面配置中的切入点"></a>流程2:读取所有切面配置中的切入点</h4><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172338357.png" alt="1630151682428"></p><ul><li>上面这个例子中有两个切入点的配置，但是第一个<code>ptx()</code>并没有被使用，所以不会被读取。</li></ul><h4 id="流程3-初始化bean，"><a href="#流程3-初始化bean，" class="headerlink" title="流程3:初始化bean，"></a>流程3:初始化bean，</h4><p>判定bean对应的类中的方法是否匹配到任意切入点</p><ul><li><p>注意第1步在容器启动的时候，bean对象还没有被创建成功。</p></li><li><p>要被实例化bean对象的类中的方法和切入点进行匹配</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172338394.png" alt="1630152538083"></p><ul><li>匹配失败，创建原始对象,如<code>UserDao</code><ul><li>匹配失败说明不需要增强，直接调用原始对象的方法即可。</li></ul></li><li>匹配成功，创建原始对象（&#x3D;&#x3D;目标对象&#x3D;&#x3D;）的&#x3D;&#x3D;代理&#x3D;&#x3D;对象,如:<code>BookDao</code><ul><li>匹配成功说明需要对其进行增强</li><li>对哪个类做增强，这个类对应的对象就叫做<strong>目标对象</strong></li><li>因为要对目标对象进行功能增强，而<strong>采用的技术是动态代理</strong>，所以会为其创建一个<strong>代理对象</strong></li><li>最终运行的是代理对象的方法，在该方法中会对原始方法进行功能增强</li></ul></li></ul></li></ul><h4 id="流程4-获取bean执行方法"><a href="#流程4-获取bean执行方法" class="headerlink" title="流程4:获取bean执行方法"></a>流程4:获取bean执行方法</h4><ul><li>获取的bean是原始对象时，调用方法并执行，完成操作</li><li>获取的bean是代理对象时，根据代理对象的运行模式运行原始方法与增强的内容，完成操作</li></ul><h4 id="验证容器中是否为代理对象"><a href="#验证容器中是否为代理对象" class="headerlink" title="验证容器中是否为代理对象"></a>验证容器中是否为代理对象</h4><p>为了验证IOC容器中创建的对象和我们刚才所说的结论是否一致，首先先把结论理出来:</p><ul><li>如果目标对象中的方法会被增强，那么容器中将存入的是目标对象的代理对象</li><li>如果目标对象中的方法不被增强，那么容器中将存入的是目标对象本身。</li></ul><h5 id="验证思路"><a href="#验证思路" class="headerlink" title="验证思路"></a>验证思路</h5><blockquote><p>1.要执行的方法，不被定义的切入点包含，即不要增强，打印当前类的getClass()方法</p><p>2.要执行的方法，被定义的切入点包含，即要增强，打印出当前类的getClass()方法</p><p>3.观察两次打印的结果</p></blockquote><h5 id="步骤1-修改App类-获取类的类型"><a href="#步骤1-修改App类-获取类的类型" class="headerlink" title="步骤1:修改App类,获取类的类型"></a>步骤1:修改App类,获取类的类型</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        System.out.println(bookDao);</span><br><span class="line">        System.out.println(bookDao.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2-修改MyAdvice类，不增强"><a href="#步骤2-修改MyAdvice类，不增强" class="headerlink" title="步骤2:修改MyAdvice类，不增强"></a>步骤2:修改MyAdvice类，不增强</h5><p>因为定义的切入点中，被修改成<code>update1</code>,所以BookDao中的update方法在执行的时候，就不会被增强，</p><p>所以容器中的对象应该是目标对象本身。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update1())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤3-运行程序"><a href="#步骤3-运行程序" class="headerlink" title="步骤3:运行程序"></a>步骤3:运行程序</h5><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172338073.png" alt="1630154495165"></p><h5 id="步骤4-修改MyAdvice类，增强"><a href="#步骤4-修改MyAdvice类，增强" class="headerlink" title="步骤4:修改MyAdvice类，增强"></a>步骤4:修改MyAdvice类，增强</h5><p>因为定义的切入点中，被修改成<code>update</code>,所以BookDao中的update方法在执行的时候，就会被增强，</p><p>所以容器中的对象应该是目标对象的代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤5-运行程序"><a href="#步骤5-运行程序" class="headerlink" title="步骤5:运行程序"></a>步骤5:运行程序</h5><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172339013.png" alt="1630154625564"></p><p>此对于刚才的结论，我们就得到了验证，这块大家需要注意的是:</p><p><strong>不能直接打印对象，从上面两次结果中可以看出，直接打印对象走的是对象的toString方法，不管是不是代理对象打印的结果都是一样的，原因是内部对toString方法进行了重写。</strong></p><h3 id="3-2-AOP核心概念"><a href="#3-2-AOP核心概念" class="headerlink" title="3.2 AOP核心概念"></a>3.2 AOP核心概念</h3><p>在上面介绍AOP的工作流程中，我们提到了两个核心概念，分别是:</p><ul><li>&#x3D;&#x3D;目标对象(Target)&#x3D;&#x3D;：原始功能去掉共性功能对应的类产生的对象，这种对象是无法直接完成最终工作的</li><li>&#x3D;&#x3D;代理(Proxy)&#x3D;&#x3D;：目标对象无法直接完成工作，需要对其进行功能回填，通过原始对象的代理对象实现</li></ul><p>上面这两个概念比较抽象，简单来说，</p><p>目标对象就是要增强的类[如:BookServiceImpl类]对应的对象，也叫原始对象，不能说它不能运行，只能说它在运行的过程中对于要增强的内容是缺失的。</p><p>SpringAOP是在不改变原有设计(代码)的前提下对其进行增强的，<strong>它的底层采用的是代理模式实现的</strong>，所以要对原始对象进行增强，就需要对原始对象创建<strong>代理对象</strong>，在代理对象中的方法把通知[如:MyAdvice中的method方法]内容加进去，就实现了增强,这就是我们所说的代理(Proxy)。</p><p><strong>小结</strong></p><p>通过这一节中，我们需要掌握的内容有：</p><ul><li>能说出AOP的工作流程</li><li>AOP的核心概念<ul><li>目标对象、连接点、切入点</li><li>通知类、通知</li><li>切面</li><li>代理</li></ul></li><li>SpringAOP的本质或者可以说底层实现是通过代理模式。</li></ul><h2 id="4、AOP配置管理"><a href="#4、AOP配置管理" class="headerlink" title="4、AOP配置管理"></a>4、AOP配置管理</h2><h3 id="4-1-AOP切入点表达式"><a href="#4-1-AOP切入点表达式" class="headerlink" title="4.1 AOP切入点表达式"></a>4.1 AOP切入点表达式</h3><p>前面的案例中，有涉及到如下内容:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172339937.png" alt="1630155937718"></p><p>对于AOP中切入点表达式，我们总共会学习三个内容，分别是<code>语法格式</code>、<code>通配符</code>和<code>书写技巧</code>。</p><h4 id="4-1-1-语法格式"><a href="#4-1-1-语法格式" class="headerlink" title="4.1.1 语法格式"></a>4.1.1 语法格式</h4><p>首先我们先要明确两个概念:</p><ul><li>切入点:要进行增强的方法</li><li>切入点表达式:要进行增强的方法的描述方式</li></ul><p>对于切入点的描述，我们其实是有两中方式的，先来看下前面的例子</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172339633.png" alt="1630156172790"></p><p><strong>描述方式一</strong>：执行com.itheima.dao包下的BookDao接口中的无参数update方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(<span class="keyword">void</span> com.itheima.dao.BookDao.update())</span><br></pre></td></tr></table></figure><p><strong>描述方式二</strong>：执行com.itheima.dao.impl包下的BookDaoImpl类中的无参数update方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(void com.itheima.dao.impl.BookDaoImpl.update())</span><br></pre></td></tr></table></figure><p>因为调用接口方法的时候最终运行的还是其实现类的方法，所以上面两种描述方式都是可以的。</p><p>对于切入点表达式的语法为:</p><ul><li>切入点表达式标准格式：动作关键字(访问修饰符  返回值  包名.类&#x2F;接口名.方法名(参数) 异常名）</li></ul><p>对于这个格式，我们不需要硬记，通过一个例子，理解它:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(public User com.itheima.service.UserService.findById(int))</span><br></pre></td></tr></table></figure><ul><li>execution：动作关键字，描述切入点的行为动作，例如execution表示执行到指定切入点</li><li>public:访问修饰符,还可以是public，private等，可以省略</li><li>User：返回值，写返回值类型</li><li>com.itheima.service：包名，多级包使用点连接</li><li>UserService:类&#x2F;接口名称</li><li>findById：方法名</li><li>int:参数，直接写参数的类型，多个类型用逗号隔开</li><li>异常名：方法定义中抛出指定异常，可以省略</li></ul><p>切入点表达式就是要找到需要增强的方法，所以它就是对一个具体方法的描述，但是方法的定义会有很多，所以如果每一个方法对应一个切入点表达式，想想这块就会觉得将来编写起来会比较麻烦，有没有更简单的方式呢?</p><p>就需要用到下面所学习的通配符。</p><h4 id="4-1-2-通配符"><a href="#4-1-2-通配符" class="headerlink" title="4.1.2 通配符"></a>4.1.2 通配符</h4><p>我们使用通配符描述切入点，主要的目的就是简化之前的配置，具体都有哪些通配符可以使用?</p><ul><li><p><code>*</code>:单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的匹配符出现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution（<span class="keyword">public</span> * com.itheima.*.UserService.find*(*))</span><br></pre></td></tr></table></figure><p>匹配com.itheima包下的任意包中的UserService类或接口中所有find开头的带有一个参数的方法</p></li><li><p><code>..</code>：多个连续的任意符号，可以独立出现，常用于简化包名与参数的书写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution（<span class="keyword">public</span> User com..UserService.findById(..))</span><br></pre></td></tr></table></figure><p>匹配com包下的任意包中的UserService类或接口中所有名称为findById的方法</p></li><li><p><code>+</code>：专用于匹配子类类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* *..*Service+.*(..))</span><br></pre></td></tr></table></figure><p>这个使用率较低，描述子类的，咱们做JavaEE开发，继承机会就一次，使用都很慎重，所以很少用它。*Service+，表示所有以Service结尾的接口的子类。</p></li></ul><p>接下来，我们把案例中使用到的切入点表达式来分析下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172339659.png" alt="1630163744963"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">execution(<span class="keyword">void</span> com.itheima.dao.BookDao.update())</span><br><span class="line">匹配接口，能匹配到</span><br><span class="line">execution(<span class="keyword">void</span> com.itheima.dao.impl.BookDaoImpl.update())</span><br><span class="line">匹配实现类，能匹配到</span><br><span class="line">execution(* com.itheima.dao.impl.BookDaoImpl.update())</span><br><span class="line">返回值任意，能匹配到</span><br><span class="line">execution(* com.itheima.dao.impl.BookDaoImpl.update(*))</span><br><span class="line">返回值任意，但是update方法必须要有一个参数，无法匹配，要想匹配需要在update接口和实现类添加参数</span><br><span class="line">execution(<span class="keyword">void</span> com.*.*.*.*.update())</span><br><span class="line">返回值为<span class="keyword">void</span>,com包下的任意包三层包下的任意类的update方法，匹配到的是实现类，能匹配</span><br><span class="line">execution(<span class="keyword">void</span> com.*.*.*.update())</span><br><span class="line">返回值为<span class="keyword">void</span>,com包下的任意两层包下的任意类的update方法，匹配到的是接口，能匹配</span><br><span class="line">execution(<span class="keyword">void</span> *..update())</span><br><span class="line">返回值为<span class="keyword">void</span>，方法名是update的任意包下的任意类，能匹配</span><br><span class="line">execution(* *..*(..))</span><br><span class="line">匹配项目中任意类的任意方法，能匹配，但是不建议使用这种方式，影响范围广</span><br><span class="line">execution(* *..u*(..))</span><br><span class="line">匹配项目中任意包任意类下只要以u开头的方法，update方法能满足，能匹配</span><br><span class="line">execution(* *..*e(..))</span><br><span class="line">匹配项目中任意包任意类下只要以e结尾的方法，update和save方法能满足，能匹配</span><br><span class="line">execution(<span class="keyword">void</span> com..*())</span><br><span class="line">返回值为<span class="keyword">void</span>，com包下的任意包任意类任意方法，能匹配，*代表的是方法</span><br><span class="line">execution(* com.itheima.*.*Service.find*(..))</span><br><span class="line">将项目中所有业务层方法的以find开头的方法匹配</span><br><span class="line">execution(* com.itheima.*.*Service.save*(..))</span><br><span class="line">将项目中所有业务层方法的以save开头的方法匹配</span><br></pre></td></tr></table></figure><p>后面两种更符合我们平常切入点表达式的编写规则</p><h4 id="4-1-3-书写技巧"><a href="#4-1-3-书写技巧" class="headerlink" title="4.1.3 书写技巧"></a>4.1.3 书写技巧</h4><p>对于切入点表达式的编写其实是很灵活的，那么在编写的时候，有没有什么好的技巧让我们用用:</p><ul><li>所有代码按照标准规范开发，否则以下技巧全部失效</li><li>描述切入点通**&#x3D;&#x3D;常描述接口&#x3D;&#x3D;**，而不描述实现类,如果描述到实现类，就出现紧耦合了</li><li>访问控制修饰符针对接口开发均采用public描述（**&#x3D;&#x3D;可省略访问控制修饰符描述&#x3D;&#x3D;**）</li><li>返回值类型对于增删改类使用精准类型加速匹配，对于查询类使用*通配快速描述</li><li>**&#x3D;&#x3D;包名&#x3D;&#x3D;<strong>书写</strong>&#x3D;&#x3D;尽量不使用..匹配&#x3D;&#x3D;**，效率过低，常用*做单个包描述匹配，或精准匹配</li><li>**&#x3D;&#x3D;接口名&#x2F;类名&#x3D;&#x3D;<strong>书写名称与模块相关的</strong>&#x3D;&#x3D;采用*匹配&#x3D;&#x3D;**，例如UserService书写成*Service，绑定业务层接口名</li><li>**&#x3D;&#x3D;方法名&#x3D;&#x3D;<strong>书写以</strong>&#x3D;&#x3D;动词&#x3D;&#x3D;<strong>进行</strong>&#x3D;&#x3D;精准匹配&#x3D;&#x3D;*<em>，名词采用</em>匹配，例如getById书写成getBy*,selectAll书写成selectAll</li><li>参数规则较为复杂，根据业务方法灵活调整</li><li>通常**&#x3D;&#x3D;不使用异常&#x3D;&#x3D;<strong>作为</strong>&#x3D;&#x3D;匹配&#x3D;&#x3D;**规则</li></ul><h3 id="4-2-AOP通知类型"><a href="#4-2-AOP通知类型" class="headerlink" title="4.2 AOP通知类型"></a>4.2 AOP通知类型</h3><p>前面的案例中，有涉及到如下内容:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172339897.png" alt="1630164718080"></p><p>它所代表的含义是将<code>通知</code>添加到<code>切入点</code>方法执行的&#x3D;&#x3D;前面&#x3D;&#x3D;。</p><p>除了这个注解外，还有没有其他的注解，换个问题就是除了可以在前面加，能不能在其他的地方加?</p><h4 id="4-2-1-类型介绍"><a href="#4-2-1-类型介绍" class="headerlink" title="4.2.1 类型介绍"></a>4.2.1 类型介绍</h4><p>我们先来回顾下AOP通知:</p><ul><li>AOP通知描述了抽取的共性功能，根据共性功能抽取的位置不同，最终运行代码时要将其加入到合理的位置</li></ul><p>通知具体要添加到切入点的哪里?</p><p>共提供了5种通知类型:</p><ul><li>前置通知</li><li>后置通知</li><li><strong>&#x3D;&#x3D;环绕通知(重点)&#x3D;&#x3D;</strong></li><li>返回后通知(了解)</li><li>抛出异常后通知(了解)</li></ul><p>为了更好的理解这几种通知类型，我们来看一张图</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172339672.png" alt="1630166147697"></p><p>(1)前置通知，追加功能到方法执行前,类似于在代码1或者代码2添加内容</p><p>(2)后置通知,追加功能到方法执行后,不管方法执行的过程中有没有抛出异常都会执行，类似于在代码5添加内容</p><p>(3)返回后通知,追加功能到方法执行后，只有方法正常执行结束后才进行,类似于在代码3添加内容，如果方法执行抛出异常，返回后通知将不会被添加</p><p>(4)抛出异常后通知,追加功能到方法抛出异常后，只有方法执行出异常才进行,类似于在代码4添加内容，只有方法抛出异常后才会被添加</p><p>(5)环绕通知,环绕通知功能比较强大，它可以追加功能到方法执行的前后，这也是比较常用的方式，它可以实现其他四种通知类型的功能，具体是如何实现的，需要我们往下学习。</p><h4 id="4-2-2-环境准备"><a href="#4-2-2-环境准备" class="headerlink" title="4.2.2 环境准备"></a>4.2.2 环境准备</h4><ul><li><p>创建一个Maven项目</p></li><li><p>pom.xml添加Spring依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加BookDao和BookDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">select</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao update ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">select</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao select is running ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建Spring的配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建通知类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around before advice ...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;around after advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写App运行类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        bookDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终创建好的项目结构如下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172339791.png" alt="1630167385146"></p><h4 id="4-2-3-通知类型的使用"><a href="#4-2-3-通知类型的使用" class="headerlink" title="4.2.3 通知类型的使用"></a>4.2.3 通知类型的使用</h4><h5 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h5><p>修改MyAdvice,在before方法上添加<code>@Before注解</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="comment">//此处也可以写成 @Before(&quot;MyAdvice.pt()&quot;),不建议</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172340552.png" alt="1630167805723"></p><h5 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172340835.png" alt="1630167887131"></p><h5 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h5><h6 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around before advice ...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;around after advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172340639.png" alt="1630167969051"></p><p>运行结果中，通知的内容打印出来，但是原始方法的内容却没有被执行。</p><p>因为环绕通知需要在原始方法的前后进行增强，所以环绕通知就必须要能对原始操作进行调用，具体如何实现?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around before advice ...&quot;</span>);</span><br><span class="line">        <span class="comment">//表示对原始操作的调用</span></span><br><span class="line">        pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;around after advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**说明:**proceed()为什么要抛出异常?</p><p>原因很简单，看下源码就知道了</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172340593.png" alt="1630168248052"></p><p>再次运行，程序可以看到原始方法已经被执行了</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172340883.png" alt="1630168293492"></p><h6 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h6><p>(1)原始方法有返回值的处理</p><ul><li>修改MyAdvice,对BookDao中的select方法添加环绕通知，</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(int com.itheima.dao.BookDao.select())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(&quot;pt2()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aroundSelect</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around before advice ...&quot;</span>);</span><br><span class="line">        <span class="comment">//表示对原始操作的调用</span></span><br><span class="line">        pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;around after advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改App类，调用select方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> bookDao.select();</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后会报错，错误内容为:</p><p>Exception in thread “main” org.springframework.aop.AopInvocationException: &#x3D;&#x3D;Null return value from advice does not match primitive return type for: public abstract int com.itheima.dao.BookDao.select()&#x3D;&#x3D;<br>    at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:226)<br>    at com.sun.proxy.$Proxy19.select(Unknown Source)<br>    at com.itheima.App.main(App.java:12)</p><p>错误大概的意思是:<code>空的返回不匹配原始方法的int返回</code></p><ul><li>void就是返回Null</li><li>原始方法就是BookDao下的select方法</li></ul><p>所以如果我们使用环绕通知的话，要根据原始方法的返回值来设置环绕通知的返回值，具体解决方案为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(int com.itheima.dao.BookDao.select())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(&quot;pt2()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">aroundSelect</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around before advice ...&quot;</span>);</span><br><span class="line">        <span class="comment">//表示对原始操作的调用</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;around after advice ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>​为什么返回的是Object而不是int的主要原因是Object类型更通用。</p><p>​在环绕通知中是可以对原始方法返回值就行修改的。</p><h5 id="返回后通知"><a href="#返回后通知" class="headerlink" title="返回后通知"></a>返回后通知</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(int com.itheima.dao.BookDao.select())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pt2()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172340246.png" alt="1630169124446"></p><p><strong>注意：</strong>返回后通知是需要在原始方法<code>select</code>正常执行后才会被执行，如果<code>select()</code>方法执行的过程中出现了异常，那么返回后通知是不会被执行。后置通知是不管原始方法有没有抛出异常都会被执行。这个案例大家下去可以自己练习验证下。</p><h5 id="异常后通知"><a href="#异常后通知" class="headerlink" title="异常后通知"></a>异常后通知</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(int com.itheima.dao.BookDao.select())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pt2()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172340227.png" alt="1630169357146"></p><p><strong>注意：</strong>异常后通知是需要原始方法抛出异常，可以在<code>select()</code>方法中添加一行代码<code>int i = 1/0</code>即可。如果没有抛异常，异常后通知将不会被执行。</p><p>学习完这5种通知类型，我们来思考下环绕通知是如何实现其他通知类型的功能的?</p><p>因为环绕通知是可以控制原始方法执行的，所以我们把增强的代码写在调用原始方法的不同位置就可以实现不同的通知类型的功能，如:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172340689.png" alt="1630170090945"></p><h5 id="通知类型总结"><a href="#通知类型总结" class="headerlink" title="通知类型总结"></a>通知类型总结</h5><h6 id="知识点1：-After"><a href="#知识点1：-After" class="headerlink" title="知识点1：@After"></a>知识点1：@After</h6><table><thead><tr><th>名称</th><th>@After</th></tr></thead><tbody><tr><td>类型</td><td>方法注解</td></tr><tr><td>位置</td><td>通知方法定义上方</td></tr><tr><td>作用</td><td>设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法后运行</td></tr></tbody></table><h6 id="知识点2：-AfterReturning"><a href="#知识点2：-AfterReturning" class="headerlink" title="知识点2：@AfterReturning"></a>知识点2：@AfterReturning</h6><table><thead><tr><th>名称</th><th>@AfterReturning</th></tr></thead><tbody><tr><td>类型</td><td>方法注解</td></tr><tr><td>位置</td><td>通知方法定义上方</td></tr><tr><td>作用</td><td>设置当前通知方法与切入点之间绑定关系，当前通知方法在原始切入点方法正常执行完毕后执行</td></tr></tbody></table><h6 id="知识点3：-AfterThrowing"><a href="#知识点3：-AfterThrowing" class="headerlink" title="知识点3：@AfterThrowing"></a>知识点3：@AfterThrowing</h6><table><thead><tr><th>名称</th><th>@AfterThrowing</th></tr></thead><tbody><tr><td>类型</td><td>方法注解</td></tr><tr><td>位置</td><td>通知方法定义上方</td></tr><tr><td>作用</td><td>设置当前通知方法与切入点之间绑定关系，当前通知方法在原始切入点方法运行抛出异常后执行</td></tr></tbody></table><h6 id="知识点4：-Around"><a href="#知识点4：-Around" class="headerlink" title="知识点4：@Around"></a>知识点4：@Around</h6><table><thead><tr><th>名称</th><th>@Around</th></tr></thead><tbody><tr><td>类型</td><td>方法注解</td></tr><tr><td>位置</td><td>通知方法定义上方</td></tr><tr><td>作用</td><td>设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法前后运行</td></tr></tbody></table><p>&#x3D;&#x3D;<strong>环绕通知注意事项</strong>&#x3D;&#x3D;</p><ol><li>环绕通知必须依赖形参ProceedingJoinPoint才能实现对原始方法的调用，进而实现原始方法调用前后同时添加通知</li><li>通知中如果未使用ProceedingJoinPoint对原始方法进行调用将跳过原始方法的执行,可以用来做&#x3D;&#x3D;权限校验&#x3D;&#x3D;。</li><li>对原始方法的调用可以不接收返回值，通知方法设置成void即可，如果接收返回值，最好设定为Object类型</li><li>原始方法的返回值如果是void类型，通知方法的返回值类型可以设置成void,也可以设置成Object</li><li>由于无法预知原始方法运行后是否会抛出异常，因此环绕通知方法必须要处理Throwable异常，不处理的话很可能会将原始的异常隐藏起来。</li></ol><p>介绍完这么多种通知类型，具体该选哪一种呢?</p><p>我们可以通过一些案例加深下对通知类型的学习。</p><h3 id="4-3-业务层接口执行效率"><a href="#4-3-业务层接口执行效率" class="headerlink" title="4.3 业务层接口执行效率"></a>4.3 业务层接口执行效率</h3><h4 id="4-3-1-需求分析"><a href="#4-3-1-需求分析" class="headerlink" title="4.3.1 需求分析"></a>4.3.1 需求分析</h4><p>这个需求也比较简单，前面我们在介绍AOP的时候已经演示过:</p><ul><li>需求:任意业务层接口执行均可显示其执行效率（执行时长）</li></ul><p>这个案例的目的是查看每个业务层执行的时间，这样就可以监控出哪个业务比较耗时，将其查找出来方便优化。</p><p>具体实现的思路:</p><p>(1) 开始执行方法之前记录一个时间</p><p>(2) 执行方法</p><p>(3) 执行完方法之后记录一个时间</p><p>(4) 用后一个时间减去前一个时间的差值，就是我们需要的结果。</p><p>所以要在方法执行的前后添加业务，经过分析我们将采用<code>环绕通知</code>。</p><p>**说明:**原始方法如果只执行一次，时间太快，两个时间差可能为0，所以我们要执行万次来计算时间差。</p><h4 id="4-3-2-环境准备"><a href="#4-3-2-环境准备" class="headerlink" title="4.3.2 环境准备"></a>4.3.2 环境准备</h4><ul><li><p>创建一个Maven项目</p></li><li><p>pom.xml添加Spring依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加AccountService、AccountServiceImpl、AccountDao与Account类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>;</span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">    Account <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span> &#123;</span><br><span class="line">        accountDao.save(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>&#123;</span><br><span class="line">        accountDao.update(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        accountDao.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Account <span class="title function_">findById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_account(name,money)values(#&#123;name&#125;,#&#123;money&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from tbl_account where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_account set name = #&#123;name&#125; , money = #&#123;money&#125; where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_account&quot;)</span></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_account where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    Account <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">    <span class="comment">//setter..getter..toString方法省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>resources下提供一个jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring_db?useSSL=false</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure></li><li><p>创建相关配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Spring配置类:SpringConfig</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//JdbcConfig配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//MybatisConfig配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        ssfb.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">        ssfb.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ssfb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写Spring整合Junit的测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceTestCase</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">ac</span> <span class="operator">=</span> accountService.findById(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Account&gt; all = accountService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终创建好的项目结构如下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172340320.png" alt="1630214631112"></p><h4 id="4-3-3-功能开发"><a href="#4-3-3-功能开发" class="headerlink" title="4.3.3 功能开发"></a>4.3.3 功能开发</h4><h5 id="步骤1-开启SpringAOP的注解功能"><a href="#步骤1-开启SpringAOP的注解功能" class="headerlink" title="步骤1:开启SpringAOP的注解功能"></a>步骤1:开启SpringAOP的注解功能</h5><p>在Spring的主配置文件SpringConfig类中添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br></pre></td></tr></table></figure><h5 id="步骤2-创建AOP的通知类"><a href="#步骤2-创建AOP的通知类" class="headerlink" title="步骤2:创建AOP的通知类"></a>步骤2:创建AOP的通知类</h5><ul><li><p>该类要被Spring管理，需要添加@Component</p></li><li><p>要标识该类是一个AOP的切面类，需要添加@Aspect</p></li><li><p>配置切入点表达式，需要添加一个方法，并添加@Pointcut</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//配置业务层的所有方法</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.service.*Service.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">servicePt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runSpeed</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤3-添加环绕通知"><a href="#步骤3-添加环绕通知" class="headerlink" title="步骤3:添加环绕通知"></a>步骤3:添加环绕通知</h5><p>在runSpeed()方法上添加@Around</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//配置业务层的所有方法</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.service.*Service.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">servicePt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//@Around(&quot;ProjectAdvice.servicePt()&quot;) 可以简写为下面的方式</span></span><br><span class="line">    <span class="meta">@Around(&quot;servicePt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">runSpeed</span><span class="params">(ProceedingJoinPoint pjp)</span>&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**注意:**目前并没有做任何增强</p><h5 id="步骤4-完成核心业务，记录万次执行的时间"><a href="#步骤4-完成核心业务，记录万次执行的时间" class="headerlink" title="步骤4:完成核心业务，记录万次执行的时间"></a>步骤4:完成核心业务，记录万次执行的时间</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//配置业务层的所有方法</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.service.*Service.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">servicePt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//@Around(&quot;ProjectAdvice.servicePt()&quot;) 可以简写为下面的方式</span></span><br><span class="line">    <span class="meta">@Around(&quot;servicePt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runSpeed</span><span class="params">(ProceedingJoinPoint pjp)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">           pjp.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;业务层接口万次执行时间: &quot;</span>+(end-start)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤5-运行单元测试类"><a href="#步骤5-运行单元测试类" class="headerlink" title="步骤5:运行单元测试类"></a>步骤5:运行单元测试类</h5><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172340824.png" alt="1630215355776"></p><p>**注意:**因为程序每次执行的时长是不一样的，所以运行多次最终的结果是不一样的。</p><h5 id="步骤6-程序优化"><a href="#步骤6-程序优化" class="headerlink" title="步骤6:程序优化"></a>步骤6:程序优化</h5><p>目前程序所面临的问题是，多个方法一起执行测试的时候，控制台都打印的是:</p><p><code>业务层接口万次执行时间:xxxms</code></p><p>我们没有办法区分到底是哪个接口的哪个方法执行的具体时间，具体如何优化?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//配置业务层的所有方法</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.service.*Service.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">servicePt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//@Around(&quot;ProjectAdvice.servicePt()&quot;) 可以简写为下面的方式</span></span><br><span class="line">    <span class="meta">@Around(&quot;servicePt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runSpeed</span><span class="params">(ProceedingJoinPoint pjp)</span>&#123;</span><br><span class="line">        <span class="comment">//获取执行签名信息</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> pjp.getSignature();</span><br><span class="line">        <span class="comment">//通过签名获取执行操作名称(接口名)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> signature.getDeclaringTypeName();</span><br><span class="line">        <span class="comment">//通过签名获取执行操作名称(方法名)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">           pjp.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;万次执行：&quot;</span>+ className+<span class="string">&quot;.&quot;</span>+methodName+<span class="string">&quot;----&gt;&quot;</span> +(end-start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤7-运行单元测试类"><a href="#步骤7-运行单元测试类" class="headerlink" title="步骤7:运行单元测试类"></a>步骤7:运行单元测试类</h5><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172340414.png" alt="1630215743444"></p><p>&#x3D;&#x3D;补充说明&#x3D;&#x3D;</p><p>当前测试的接口执行效率仅仅是一个理论值，并不是一次完整的执行过程。</p><p>这块只是通过该案例把AOP的使用进行了学习，具体的实际值是有很多因素共同决定的。</p><h3 id="4-4-AOP通知获取数据"><a href="#4-4-AOP通知获取数据" class="headerlink" title="4.4 AOP通知获取数据"></a>4.4 AOP通知获取数据</h3><p>目前我们写AOP仅仅是在原始方法前后追加一些操作，接下来我们要说说AOP中数据相关的内容，我们将从<code>获取参数</code>、<code>获取返回值</code>和<code>获取异常</code>三个方面来研究切入点的相关信息。</p><p>前面我们介绍通知类型的时候总共讲了五种，那么对于这五种类型都会有参数，返回值和异常吗?</p><p>我们先来一个个分析下:</p><ul><li>获取切入点方法的参数，所有的通知类型都可以获取参数<ul><li>JoinPoint：适用于前置、后置、返回后、抛出异常后通知</li><li>ProceedingJoinPoint：适用于环绕通知</li></ul></li><li>获取切入点方法返回值，前置和抛出异常后通知是没有返回值，后置通知可有可无，所以不做研究<ul><li>返回后通知</li><li>环绕通知</li></ul></li><li>获取切入点方法运行异常信息，前置和返回后通知是不会有，后置通知可有可无，所以不做研究<ul><li>抛出异常后通知</li><li>环绕通知</li></ul></li></ul><h4 id="4-4-1-环境准备"><a href="#4-4-1-环境准备" class="headerlink" title="4.4.1 环境准备"></a>4.4.1 环境准备</h4><ul><li><p>创建一个Maven项目</p></li><li><p>pom.xml添加Spring依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加BookDao和BookDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findName</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findName</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id:&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;itcast&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建Spring的配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写通知类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before advice ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">()</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写App运行类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> bookDao.findName(<span class="number">100</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终创建好的项目结构如下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172340159.png" alt="1630233154992"></p><h4 id="4-4-2-获取参数"><a href="#4-4-2-获取参数" class="headerlink" title="4.4.2 获取参数"></a>4.4.2 获取参数</h4><h5 id="非环绕通知获取方式"><a href="#非环绕通知获取方式" class="headerlink" title="非环绕通知获取方式"></a>非环绕通知获取方式</h5><p>在方法上添加JoinPoint,通过JoinPoint来获取参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint jp)</span> </span><br><span class="line">        Object[] args = jp.getArgs();</span><br><span class="line">        System.out.println(Arrays.toString(args));</span><br><span class="line">        System.out.println(<span class="string">&quot;before advice ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//...其他的略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行App类，可以获取如下内容，说明参数100已经被获取</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172341726.png" alt="1630233291929"></p><p><strong>思考:方法的参数只有一个，为什么获取的是一个数组?</strong></p><p>因为参数的个数是不固定的，所以使用数组更通配些。</p><p>如果将参数改成两个会是什么效果呢?</p><p>(1)修改BookDao接口和BookDaoImpl实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findName</span><span class="params">(<span class="type">int</span> id,String password)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findName</span><span class="params">(<span class="type">int</span> id,String password)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id:&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;itcast&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)修改App类，调用方法传入多个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> bookDao.findName(<span class="number">100</span>,<span class="string">&quot;itheima&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)运行App，查看结果,说明两个参数都已经被获取到</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172341383.png" alt="1630233548743"></p><p><strong>说明:</strong></p><p>使用JoinPoint的方式获取参数适用于<code>前置</code>、<code>后置</code>、<code>返回后</code>、<code>抛出异常后</code>通知。剩下的大家自行去验证。</p><h5 id="环绕通知获取方式"><a href="#环绕通知获取方式" class="headerlink" title="环绕通知获取方式"></a>环绕通知获取方式</h5><p>环绕通知使用的是ProceedingJoinPoint，因为ProceedingJoinPoint是JoinPoint类的子类，所以对于ProceedingJoinPoint类中应该也会有对应的<code>getArgs()</code>方法，我们去验证下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span><span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        System.out.println(Arrays.toString(args));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//其他的略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行App后查看运行结果，说明ProceedingJoinPoint也是可以通过getArgs()获取参数</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172341350.png" alt="1630233974310"></p><p><strong>注意:</strong></p><ul><li><p>pjp.proceed()方法是有两个构造方法，分别是:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172341610.png" alt="1630234756123"></p><ul><li><p>调用无参数的proceed，当原始方法有参数，会在调用的过程中自动传入参数</p></li><li><p>所以调用这两个方法的任意一个都可以完成功能</p></li><li><p>但是当需要修改原始方法的参数时，就只能采用带有参数的方法,如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        System.out.println(Arrays.toString(args));</span><br><span class="line">        args[<span class="number">0</span>] = <span class="number">666</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed(args);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//其他的略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这个特性后，我们就可以在环绕通知中对原始方法的参数进行拦截过滤，避免由于参数的问题导致程序无法正确运行，保证代码的健壮性。</p></li></ul></li></ul><h4 id="4-4-3-获取返回值"><a href="#4-4-3-获取返回值" class="headerlink" title="4.4.3 获取返回值"></a>4.4.3 获取返回值</h4><p>对于返回值，只有返回后<code>AfterReturing</code>和环绕<code>Around</code>这两个通知类型可以获取，具体如何获取?</p><h5 id="环绕通知获取返回值"><a href="#环绕通知获取返回值" class="headerlink" title="环绕通知获取返回值"></a>环绕通知获取返回值</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        System.out.println(Arrays.toString(args));</span><br><span class="line">        args[<span class="number">0</span>] = <span class="number">666</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed(args);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//其他的略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，<code>ret</code>就是方法的返回值，我们是可以直接获取，不但可以获取，如果需要还可以进行修改。</p><h5 id="返回后通知获取返回值"><a href="#返回后通知获取返回值" class="headerlink" title="返回后通知获取返回值"></a>返回后通知获取返回值</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;pt()&quot;,returning = &quot;ret&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object ret)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning advice ...&quot;</span>+ret);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//其他的略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意:&#x3D;&#x3D;</p><p>(1)参数名的问题</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172341412.png" alt="1630237320870"></p><p>(2)afterReturning方法参数类型的问题</p><p>参数类型可以写成String，但是为了能匹配更多的参数类型，建议写成Object类型</p><p>(3)afterReturning方法参数的顺序问题</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172341226.png" alt="1630237586682"></p><p>运行App后查看运行结果，说明返回值已经被获取到</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172341610.png" alt="1630237372286"></p><h4 id="4-4-4-获取异常"><a href="#4-4-4-获取异常" class="headerlink" title="4.4.4 获取异常"></a>4.4.4 获取异常</h4><p>对于获取抛出的异常，只有抛出异常后<code>AfterThrowing</code>和环绕<code>Around</code>这两个通知类型可以获取，具体如何获取?</p><h5 id="环绕通知获取异常"><a href="#环绕通知获取异常" class="headerlink" title="环绕通知获取异常"></a>环绕通知获取异常</h5><p>这块比较简单，以前我们是抛出异常，现在只需要将异常捕获，就可以获取到原始方法的异常信息了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span>&#123;</span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        System.out.println(Arrays.toString(args));</span><br><span class="line">        args[<span class="number">0</span>] = <span class="number">666</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            ret = pjp.proceed(args);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Throwable throwable)&#123;</span><br><span class="line">            t.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//其他的略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在catch方法中就可以获取到异常，至于获取到异常以后该如何处理，这个就和你的业务需求有关了。</p><h5 id="抛出异常后通知获取异常"><a href="#抛出异常后通知获取异常" class="headerlink" title="抛出异常后通知获取异常"></a>抛出异常后通知获取异常</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;pt()&quot;,throwing = &quot;t&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(Throwable t)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing advice ...&quot;</span>+t);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//其他的略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何让原始方法抛出异常，方式有很多，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findName</span><span class="params">(<span class="type">int</span> id,String password)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id:&quot;</span>+id);</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;itcast&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意:&#x3D;&#x3D;</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172342586.png" alt="1630239939043"></p><p>运行App后，查看控制台，就能看的异常信息被打印到控制台</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172342302.png" alt="1630239997560"></p><p>至此，AOP通知如何获取数据就已经讲解完了，数据中包含<code>参数</code>、<code>返回值</code>、<code>异常(了解)</code>。</p><h3 id="4-5-百度网盘密码数据兼容处理"><a href="#4-5-百度网盘密码数据兼容处理" class="headerlink" title="4.5 百度网盘密码数据兼容处理"></a>4.5 百度网盘密码数据兼容处理</h3><h4 id="4-5-1-需求分析"><a href="#4-5-1-需求分析" class="headerlink" title="4.5.1 需求分析"></a>4.5.1 需求分析</h4><p>需求: 对百度网盘分享链接输入密码时尾部多输入的空格做兼容处理。</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172342239.png" alt="1630240203033"></p><p>问题描述:</p><ul><li><p>点击链接，会提示，请输入提取码，如下图所示</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172342653.png" alt="1630240528228"></p></li><li><p>当我们从别人发给我们的内容中复制提取码的时候，有时候会多复制到一些空格，直接粘贴到百度的提取码输入框</p></li><li><p>但是百度那边记录的提取码是没有空格的</p></li><li><p>这个时候如果不做处理，直接对比的话，就会引发提取码不一致，导致无法访问百度盘上的内容</p></li><li><p>所以多输入一个空格可能会导致项目的功能无法正常使用。</p></li><li><p>此时我们就想能不能将输入的参数先帮用户去掉空格再操作呢?</p></li></ul><p>答案是可以的，我们只需要在业务方法执行之前对所有的输入参数进行格式处理——trim()</p><ul><li>是对所有的参数都需要去除空格么?</li></ul><p>也没有必要，一般只需要针对字符串处理即可。</p><ul><li>以后涉及到需要去除前后空格的业务可能会有很多，这个去空格的代码是每个业务都写么?</li></ul><p>可以考虑使用AOP来统一处理。</p><ul><li>AOP有五种通知类型，该使用哪种呢?</li></ul><p>我们的需求是将原始方法的参数处理后在参与原始方法的调用，能做这件事的就只有环绕通知。</p><p>综上所述，我们需要考虑两件事:<br>①：在业务方法执行之前对所有的输入参数进行格式处理——trim()<br>②：使用处理后的参数调用原始方法——环绕通知中存在对原始方法的调用</p><h4 id="4-5-2-环境准备"><a href="#4-5-2-环境准备" class="headerlink" title="4.5.2 环境准备"></a>4.5.2 环境准备</h4><ul><li><p>创建一个Maven项目</p></li><li><p>pom.xml添加Spring依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加ResourcesService，ResourcesServiceImpl,ResourcesDao和ResourcesDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ResourcesDao</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">readResources</span><span class="params">(String url, String password)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourcesDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">ResourcesDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">readResources</span><span class="params">(String url, String password)</span> &#123;</span><br><span class="line">        <span class="comment">//模拟校验</span></span><br><span class="line">        <span class="keyword">return</span> password.equals(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ResourcesService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">openURL</span><span class="params">(String url ,String password)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourcesServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ResourcesService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ResourcesDao resourcesDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">openURL</span><span class="params">(String url, String password)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> resourcesDao.readResources(url,password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建Spring的配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写App运行类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">ResourcesService</span> <span class="variable">resourcesService</span> <span class="operator">=</span> ctx.getBean(ResourcesService.class);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> resourcesService.openURL(<span class="string">&quot;http://pan.baidu.com/haha&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终创建好的项目结构如下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172342481.png" alt="1630241681697"></p><p>现在项目的效果是，当输入密码为”root”控制台打印为true,如果密码改为”root  “控制台打印的是false</p><p>需求是使用AOP将参数进行统一处理，不管输入的密码<code>root</code>前后包含多少个空格，最终控制台打印的都是true。</p><h4 id="4-5-3-具体实现"><a href="#4-5-3-具体实现" class="headerlink" title="4.5.3 具体实现"></a>4.5.3 具体实现</h4><h5 id="步骤1-开启SpringAOP的注解功能-1"><a href="#步骤1-开启SpringAOP的注解功能-1" class="headerlink" title="步骤1:开启SpringAOP的注解功能"></a>步骤1:开启SpringAOP的注解功能</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2-编写通知类"><a href="#步骤2-编写通知类" class="headerlink" title="步骤2:编写通知类"></a>步骤2:编写通知类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(boolean com.itheima.service.*Service.*(*,*))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">servicePt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤3-添加环绕通知-1"><a href="#步骤3-添加环绕通知-1" class="headerlink" title="步骤3:添加环绕通知"></a>步骤3:添加环绕通知</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(boolean com.itheima.service.*Service.*(*,*))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">servicePt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(&quot;DataAdvice.servicePt()&quot;)</span></span><br><span class="line">    <span class="comment">// @Around(&quot;servicePt()&quot;)这两种写法都对</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">trimStr</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤4-完成核心业务，处理参数中的空格"><a href="#步骤4-完成核心业务，处理参数中的空格" class="headerlink" title="步骤4:完成核心业务，处理参数中的空格"></a>步骤4:完成核心业务，处理参数中的空格</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(boolean com.itheima.service.*Service.*(*,*))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">servicePt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(&quot;DataAdvice.servicePt()&quot;)</span></span><br><span class="line">    <span class="comment">// @Around(&quot;servicePt()&quot;)这两种写法都对</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">trimStr</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//获取原始方法的参数</span></span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            <span class="comment">//判断参数是不是字符串</span></span><br><span class="line">            <span class="keyword">if</span>(args[i].getClass().equals(String.class))&#123;</span><br><span class="line">                args[i] = args[i].toString().trim();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将修改后的参数传入到原始方法的执行中</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed(args);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤5-运行程序-1"><a href="#步骤5-运行程序-1" class="headerlink" title="步骤5:运行程序"></a>步骤5:运行程序</h5><p>不管密码<code>root</code>前后是否加空格，最终控制台打印的都是true</p><h5 id="步骤6-优化测试"><a href="#步骤6-优化测试" class="headerlink" title="步骤6:优化测试"></a>步骤6:优化测试</h5><p>为了能更好的看出AOP已经生效，我们可以修改ResourcesImpl类，在方法中将密码的长度进行打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourcesDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">ResourcesDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">readResources</span><span class="params">(String url, String password)</span> &#123;</span><br><span class="line">        System.out.println(password.length());</span><br><span class="line">        <span class="comment">//模拟校验</span></span><br><span class="line">        <span class="keyword">return</span> password.equals(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行成功，就可以根据最终打印的长度来看看，字符串的空格有没有被去除掉。</p><p><strong>注意：</strong></p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172342802.png" alt="1630242491831"></p><h2 id="5、AOP总结"><a href="#5、AOP总结" class="headerlink" title="5、AOP总结"></a>5、AOP总结</h2><p>AOP的知识就已经讲解完了，接下来对于AOP的知识进行一个总结:</p><h3 id="5-1-AOP的核心概念"><a href="#5-1-AOP的核心概念" class="headerlink" title="5.1 AOP的核心概念"></a>5.1 AOP的核心概念</h3><ul><li>概念：AOP(Aspect Oriented Programming)面向切面编程，一种编程范式</li><li>作用：在不惊动原始设计的基础上为方法进行功能&#x3D;&#x3D;增强&#x3D;&#x3D;</li><li>核心概念<ul><li>代理（Proxy）：SpringAOP的核心本质是采用代理模式实现的</li><li>连接点（JoinPoint）：在SpringAOP中，理解为任意方法的执行</li><li>切入点（Pointcut）：匹配连接点的式子，也是具有共性功能的方法描述</li><li>通知（Advice）：若干个方法的共性功能，在切入点处执行，最终体现为一个方法</li><li>切面（Aspect）：描述通知与切入点的对应关系</li><li>目标对象（Target）：被代理的原始对象成为目标对象</li></ul></li></ul><h3 id="5-2-切入点表达式"><a href="#5-2-切入点表达式" class="headerlink" title="5.2 切入点表达式"></a>5.2 切入点表达式</h3><ul><li><p>切入点表达式标准格式：动作关键字(访问修饰符  返回值  包名.类&#x2F;接口名.方法名（参数）异常名)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* com.itheima.service.*Service.*(..))</span><br></pre></td></tr></table></figure></li><li><p>切入点表达式描述通配符：</p><ul><li>作用：用于快速描述，范围描述</li><li><code>*</code>：匹配任意符号（常用）</li><li><code>..</code> ：匹配多个连续的任意符号（常用）</li><li><code>+</code>：匹配子类类型</li></ul></li><li><p>切入点表达式书写技巧</p><p>1.按&#x3D;&#x3D;标准规范&#x3D;&#x3D;开发<br>2.查询操作的返回值建议使用*匹配<br>3.减少使用..的形式描述包<br>4.&#x3D;&#x3D;对接口进行描述&#x3D;&#x3D;，使用*表示模块名，例如UserService的匹配描述为*Service<br>5.方法名书写保留动词，例如get，使用*表示名词，例如getById匹配描述为getBy*<br>6.参数根据实际情况灵活调整</p></li></ul><h3 id="5-3-五种通知类型"><a href="#5-3-五种通知类型" class="headerlink" title="5.3 五种通知类型"></a>5.3 五种通知类型</h3><ul><li>前置通知</li><li>后置通知</li><li>环绕通知（重点）<ul><li>环绕通知依赖形参ProceedingJoinPoint才能实现对原始方法的调用</li><li>环绕通知可以隔离原始方法的调用执行</li><li>环绕通知返回值设置为Object类型</li><li>环绕通知中可以对原始方法调用过程中出现的异常进行处理</li></ul></li><li>返回后通知</li><li>抛出异常后通知</li></ul><h3 id="5-4-通知中获取参数"><a href="#5-4-通知中获取参数" class="headerlink" title="5.4 通知中获取参数"></a>5.4 通知中获取参数</h3><ul><li>获取切入点方法的参数，所有的通知类型都可以获取参数<ul><li>JoinPoint：适用于前置、后置、返回后、抛出异常后通知</li><li>ProceedingJoinPoint：适用于环绕通知</li></ul></li><li>获取切入点方法返回值，前置和抛出异常后通知是没有返回值，后置通知可有可无，所以不做研究<ul><li>返回后通知</li><li>环绕通知</li></ul></li><li>获取切入点方法运行异常信息，前置和返回后通知是不会有，后置通知可有可无，所以不做研究<ul><li>抛出异常后通知</li><li>环绕通知</li></ul></li></ul><h2 id="6、AOP事务管理"><a href="#6、AOP事务管理" class="headerlink" title="6、AOP事务管理"></a>6、AOP事务管理</h2><h3 id="6-1-Spring事务简介"><a href="#6-1-Spring事务简介" class="headerlink" title="6.1 Spring事务简介"></a>6.1 Spring事务简介</h3><h4 id="6-1-1-相关概念介绍"><a href="#6-1-1-相关概念介绍" class="headerlink" title="6.1.1 相关概念介绍"></a>6.1.1 相关概念介绍</h4><ul><li>事务作用：在数据层保障一系列的数据库操作同成功同失败</li><li>Spring事务作用：在数据层或**&#x3D;&#x3D;业务层&#x3D;&#x3D;**保障一系列的数据库操作同成功同失败</li></ul><p>数据层有事务我们可以理解，为什么业务层也需要处理事务呢?</p><p>举个简单的例子，</p><ul><li>转账业务会有两次数据层的调用，一次是加钱一次是减钱</li><li>把事务放在数据层，加钱和减钱就有两个事务</li><li>没办法保证加钱和减钱同时成功或者同时失败</li><li>这个时候就需要将事务放在业务层进行处理。</li></ul><p>Spring为了管理事务，提供了一个平台事务管理器<code>PlatformTransactionManager</code></p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172343904.png" alt="1630243651541"></p><p>commit是用来提交事务，rollback是用来回滚事务。</p><p>PlatformTransactionManager只是一个接口，Spring还为其提供了一个具体的实现:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172343834.png" alt="1630243993380"></p><p>从名称上可以看出，我们只需要给它一个DataSource对象，它就可以帮你去在业务层管理事务。其内部采用的是JDBC的事务。所以说如果你持久层采用的是JDBC相关的技术，就可以采用这个事务管理器来管理你的事务。<strong>而Mybatis内部采用的就是JDBC的事务，所以后期我们Spring整合Mybatis就采用的这个DataSourceTransactionManager事务管理器</strong>。</p><h4 id="6-1-2-转账案例-需求分析"><a href="#6-1-2-转账案例-需求分析" class="headerlink" title="6.1.2 转账案例-需求分析"></a>6.1.2 转账案例-需求分析</h4><p>接下来通过一个案例来学习下Spring是如何来管理事务的。</p><p>先来分析下需求:</p><p>需求: 实现任意两个账户间转账操作</p><p>需求微缩: A账户减钱，B账户加钱</p><p>为了实现上述的业务需求，我们可以按照下面步骤来实现下:<br>①：数据层提供基础操作，指定账户减钱（outMoney），指定账户加钱（inMoney）</p><p>②：业务层提供转账操作（transfer），调用减钱与加钱的操作</p><p>③：提供2个账号和操作金额执行转账操作</p><p>④：基于Spring整合MyBatis环境搭建上述操作</p><h4 id="6-1-3-转账案例-环境搭建"><a href="#6-1-3-转账案例-环境搭建" class="headerlink" title="6.1.3 转账案例-环境搭建"></a>6.1.3 转账案例-环境搭建</h4><h5 id="步骤1-准备数据库表"><a href="#步骤1-准备数据库表" class="headerlink" title="步骤1:准备数据库表"></a>步骤1:准备数据库表</h5><p>之前我们在整合Mybatis的时候已经创建了这个表,可以直接使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database spring_db <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line">use spring_db;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_account(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">35</span>),</span><br><span class="line">    money <span class="keyword">double</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tbl_account <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tbl_account <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Jerry&#x27;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h5 id="步骤2-创建项目导入jar包"><a href="#步骤2-创建项目导入jar包" class="headerlink" title="步骤2:创建项目导入jar包"></a>步骤2:创建项目导入jar包</h5><p>项目的pom.xml添加相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤3-根据表创建模型类"><a href="#步骤3-根据表创建模型类" class="headerlink" title="步骤3:根据表创建模型类"></a>步骤3:根据表创建模型类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"><span class="comment">//setter...getter...toString...方法略    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤4-创建Dao接口"><a href="#步骤4-创建Dao接口" class="headerlink" title="步骤4:创建Dao接口"></a>步骤4:创建Dao接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_account set money = money + #&#123;money&#125; where name = #&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">inMoney</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;money&quot;)</span> Double money)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_account set money = money - #&#123;money&#125; where name = #&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">outMoney</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;money&quot;)</span> Double money)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤5-创建Service接口和实现类"><a href="#步骤5-创建Service接口和实现类" class="headerlink" title="步骤5:创建Service接口和实现类"></a>步骤5:创建Service接口和实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out 传出方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in 转入方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> &#123;</span><br><span class="line">        accountDao.outMoney(out,money);</span><br><span class="line">        accountDao.inMoney(in,money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤6-添加jdbc-properties文件"><a href="#步骤6-添加jdbc-properties文件" class="headerlink" title="步骤6:添加jdbc.properties文件"></a>步骤6:添加jdbc.properties文件</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring_db?useSSL=false</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h5 id="步骤7-创建JdbcConfig配置类"><a href="#步骤7-创建JdbcConfig配置类" class="headerlink" title="步骤7:创建JdbcConfig配置类"></a>步骤7:创建JdbcConfig配置类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤8-创建MybatisConfig配置类"><a href="#步骤8-创建MybatisConfig配置类" class="headerlink" title="步骤8:创建MybatisConfig配置类"></a>步骤8:创建MybatisConfig配置类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        ssfb.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">        ssfb.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ssfb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤9-创建SpringConfig配置类"><a href="#步骤9-创建SpringConfig配置类" class="headerlink" title="步骤9:创建SpringConfig配置类"></a>步骤9:创建SpringConfig配置类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="步骤10-编写测试类"><a href="#步骤10-编写测试类" class="headerlink" title="步骤10:编写测试类"></a>步骤10:编写测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransfer</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        accountService.transfer(<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;Jerry&quot;</span>,<span class="number">100D</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终创建好的项目结构如下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172343365.png" alt="1630247220645"></p><h4 id="6-1-4-事务管理"><a href="#6-1-4-事务管理" class="headerlink" title="6.1.4 事务管理"></a>6.1.4 事务管理</h4><p>上述环境，运行单元测试类，会执行转账操作，<code>Tom</code>的账户会减少100，<code>Jerry</code>的账户会加100。</p><p>这是正常情况下的运行结果，但是如果在转账的过程中出现了异常，如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> &#123;</span><br><span class="line">        accountDao.outMoney(out,money);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.inMoney(in,money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候就模拟了转账过程中出现异常的情况，正确的操作应该是转账出问题了，<code>Tom</code>应该还是900，<code>Jerry</code>应该还是1100，但是真正运行后会发现，并没有像我们想象的那样，<code>Tom</code>账户为800而<code>Jerry</code>还是1100,100块钱凭空消息了，银行乐疯了。如果把转账换个顺序，银行就该哭了。</p><p>不管哪种情况，都是不允许出现的，对刚才的结果我们做一个分析:</p><p>①：程序正常执行时，账户金额A减B加，没有问题</p><p>②：程序出现异常后，转账失败，但是异常之前操作成功，异常之后操作失败，整体业务失败</p><p>当程序出问题后，我们需要让事务进行回滚，而且这个事务应该是加在业务层上，而Spring的事务管理就是用来解决这类问题的。</p><p>Spring事务管理具体的实现步骤为:</p><h5 id="步骤1-在需要被事务管理的方法上添加注解"><a href="#步骤1-在需要被事务管理的方法上添加注解" class="headerlink" title="步骤1:在需要被事务管理的方法上添加注解"></a>步骤1:在需要被事务管理的方法上添加注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out 传出方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in 转入方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//配置当前接口方法具有事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> &#123;</span><br><span class="line">        accountDao.outMoney(out,money);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.inMoney(in,money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意:&#x3D;&#x3D;</p><p>@Transactional可以写在接口类上、接口方法上、实现类上和实现类方法上</p><ul><li>写在接口类上，该接口的所有实现类的所有方法都会有事务</li><li>写在接口方法上，该接口的所有实现类的该方法都会有事务</li><li>写在实现类上，该类中的所有方法都会有事务</li><li>写在实现类方法上，该方法上有事务</li><li>&#x3D;&#x3D;建议写在实现类或实现类的方法上&#x3D;&#x3D;</li></ul><h5 id="步骤2-在JdbcConfig类中配置事务管理器"><a href="#步骤2-在JdbcConfig类中配置事务管理器" class="headerlink" title="步骤2:在JdbcConfig类中配置事务管理器"></a>步骤2:在JdbcConfig类中配置事务管理器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置事务管理器，mybatis使用的是jdbc事务</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>事务管理器要根据使用技术进行选择，Mybatis框架使用的是JDBC事务，可以直接使用<code>DataSourceTransactionManager</code></p><h5 id="步骤3：开启事务注解"><a href="#步骤3：开启事务注解" class="headerlink" title="步骤3：开启事务注解"></a>步骤3：开启事务注解</h5><p>在SpringConfig的配置类中开启</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MybatisConfig.class</span></span><br><span class="line"><span class="meta">//开启注解式事务驱动</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">public class SpringConfig &#123;</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure><h5 id="步骤4-运行测试类"><a href="#步骤4-运行测试类" class="headerlink" title="步骤4:运行测试类"></a>步骤4:运行测试类</h5><p>会发现在转换的业务出现错误后，事务就可以控制回顾，保证数据的正确性。</p><h5 id="知识点1：-EnableTransactionManagement"><a href="#知识点1：-EnableTransactionManagement" class="headerlink" title="知识点1：@EnableTransactionManagement"></a>知识点1：@EnableTransactionManagement</h5><table><thead><tr><th>名称</th><th>@EnableTransactionManagement</th></tr></thead><tbody><tr><td>类型</td><td>配置类注解</td></tr><tr><td>位置</td><td>配置类定义上方</td></tr><tr><td>作用</td><td>设置当前Spring环境中开启注解式事务支持</td></tr></tbody></table><h5 id="知识点2：-Transactional"><a href="#知识点2：-Transactional" class="headerlink" title="知识点2：@Transactional"></a>知识点2：@Transactional</h5><table><thead><tr><th>名称</th><th>@Transactional</th></tr></thead><tbody><tr><td>类型</td><td>接口注解  类注解  方法注解</td></tr><tr><td>位置</td><td>业务层接口上方  业务层实现类上方  业务方法上方</td></tr><tr><td>作用</td><td>为当前业务层方法添加事务（如果设置在类或接口上方则类或接口中所有方法均添加事务）</td></tr></tbody></table><h3 id="6-2-Spring事务角色"><a href="#6-2-Spring事务角色" class="headerlink" title="6.2 Spring事务角色"></a>6.2 Spring事务角色</h3><p>这节中我们重点要理解两个概念，分别是<code>事务管理员</code>和<code>事务协调员</code>。</p><ol><li>未开启Spring事务之前:</li></ol><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172343196.png" alt="1630248794837"></p><ul><li>AccountDao的outMoney因为是修改操作，会开启一个事务T1</li><li>AccountDao的inMoney因为是修改操作，会开启一个事务T2</li><li>AccountService的transfer没有事务，<ul><li>运行过程中如果没有抛出异常，则T1和T2都正常提交，数据正确</li><li>如果在两个方法中间抛出异常，T1因为执行成功提交事务，T2因为抛异常不会被执行</li><li>就会导致数据出现错误</li></ul></li></ul><ol start="2"><li>开启Spring的事务管理后</li></ol><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172343243.png" alt="1630249111055"></p><ul><li>transfer上添加了@Transactional注解，在该方法上就会有一个事务T</li><li>AccountDao的outMoney方法的事务T1加入到transfer的事务T中</li><li>AccountDao的inMoney方法的事务T2加入到transfer的事务T中</li><li>这样就保证他们在同一个事务中，当业务层中出现异常，整个事务就会回滚，保证数据的准确性。</li></ul><p>通过上面例子的分析，我们就可以得到如下概念:</p><ul><li>事务管理员：发起事务方，在Spring中通常指代业务层开启事务的方法</li><li>事务协调员：加入事务方，在Spring中通常指代数据层方法，也可以是业务层方法</li></ul><p>&#x3D;&#x3D;注意:&#x3D;&#x3D;</p><p>目前的事务管理是基于<code>DataSourceTransactionManager</code>和<code>SqlSessionFactoryBean</code>使用的是同一个数据源。</p><h3 id="6-3-Spring事务属性"><a href="#6-3-Spring事务属性" class="headerlink" title="6.3 Spring事务属性"></a>6.3 Spring事务属性</h3><p>上一节我们介绍了两个概念，事务的管理员和事务的协同员，对于这两个概念具体做什么的，我们待会通过案例来使用下。除了这两个概念，还有就是事务的其他相关配置都有哪些，就是我们接下来要学习的内容。</p><p>在这一节中，我们主要学习三部分内容<code>事务配置</code>、<code>转账业务追加日志</code>、<code>事务传播行为</code>。</p><h4 id="6-3-1-事务配置"><a href="#6-3-1-事务配置" class="headerlink" title="6.3.1 事务配置"></a>6.3.1 事务配置</h4><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172344283.png" alt="1630250069844"></p><p>上面这些属性都可以在<code>@Transactional</code>注解的参数上进行设置。</p><ul><li><p>readOnly：true只读事务，false读写事务，增删改要设为false,查询设为true。</p></li><li><p>timeout:设置超时时间单位秒，在多长时间之内事务没有提交成功就自动回滚，-1表示不设置超时时间。</p></li><li><p>rollbackFor:当出现指定异常进行事务回滚</p></li><li><p>noRollbackFor:当出现指定异常不进行事务回滚</p><ul><li><p>思考:出现异常事务会自动回滚，这个是我们之前就已经知道的</p></li><li><p>noRollbackFor是设定对于指定的异常不回滚，这个好理解</p></li><li><p>rollbackFor是指定回滚异常，对于异常事务不应该都回滚么，为什么还要指定?</p><ul><li><p>这块需要更正一个知识点，并不是所有的异常都会回滚事务，比如下面的代码就不会回滚</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out 传出方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in 转入方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//配置当前接口方法具有事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        accountDao.outMoney(out,money);</span><br><span class="line">        <span class="comment">//int i = 1/0; //这个异常事务会回滚</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(); <span class="comment">//这个异常事务就不会回滚</span></span><br><span class="line">        &#125;</span><br><span class="line">        accountDao.inMoney(in,money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>出现这个问题的原因是，Spring的事务只会对<code>Error异常</code>和<code>RuntimeException异常</code>及其子类进行事务回顾，其他的异常类型是不会回滚的，对应IOException不符合上述条件所以不回滚</p><ul><li><p>此时就可以使用rollbackFor属性来设置出现IOException异常不回滚</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"> <span class="meta">@Transactional(rollbackFor = &#123;IOException.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        accountDao.outMoney(out,money);</span><br><span class="line">        <span class="comment">//int i = 1/0; //这个异常事务会回滚</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(); <span class="comment">//这个异常事务就不会回滚</span></span><br><span class="line">        &#125;</span><br><span class="line">        accountDao.inMoney(in,money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>rollbackForClassName等同于rollbackFor,只不过属性为异常的类全名字符串</p></li><li><p>noRollbackForClassName等同于noRollbackFor，只不过属性为异常的类全名字符串</p></li><li><p>isolation设置事务的隔离级别</p><ul><li>DEFAULT   :默认隔离级别, 会采用数据库的隔离级别</li><li>READ_UNCOMMITTED : 读未提交</li><li>READ_COMMITTED : 读已提交</li><li>REPEATABLE_READ : 重复读取</li><li>SERIALIZABLE: 串行化</li></ul></li></ul><p>介绍完上述属性后，还有最后一个事务的传播行为，为了讲解该属性的设置，我们需要完成下面的案例。</p><h4 id="6-3-2-转账业务追加日志案例"><a href="#6-3-2-转账业务追加日志案例" class="headerlink" title="6.3.2 转账业务追加日志案例"></a>6.3.2 转账业务追加日志案例</h4><h5 id="6-3-2-1-需求分析"><a href="#6-3-2-1-需求分析" class="headerlink" title="6.3.2.1 需求分析"></a>6.3.2.1 需求分析</h5><p>在前面的转案例的基础上添加新的需求，完成转账后记录日志。</p><ul><li>需求：实现任意两个账户间转账操作，并对每次转账操作在数据库进行留痕</li><li>需求微缩：A账户减钱，B账户加钱，数据库记录日志</li></ul><p>基于上述的业务需求，我们来分析下该如何实现:</p><p>①：基于转账操作案例添加日志模块，实现数据库中记录日志</p><p>②：业务层转账操作（transfer），调用减钱、加钱与记录日志功能</p><p>需要注意一点就是，我们这个案例的预期效果为:</p><p>&#x3D;&#x3D;无论转账操作是否成功，均进行转账操作的日志留痕&#x3D;&#x3D;</p><h5 id="6-3-2-2-环境准备"><a href="#6-3-2-2-环境准备" class="headerlink" title="6.3.2.2 环境准备"></a>6.3.2.2 环境准备</h5><p>该环境是基于转账环境来完成的，所以环境的准备可以参考<code>6.1.3的环境搭建步骤</code>，在其基础上，我们继续往下写</p><h6 id="步骤1-创建日志表"><a href="#步骤1-创建日志表" class="headerlink" title="步骤1:创建日志表"></a>步骤1:创建日志表</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_log(</span><br><span class="line">   id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">   info <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">   createDate datetime</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h6 id="步骤2-添加LogDao接口"><a href="#步骤2-添加LogDao接口" class="headerlink" title="步骤2:添加LogDao接口"></a>步骤2:添加LogDao接口</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LogDao</span> &#123;</span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_log (info,createDate) values(#&#123;info&#125;,now())&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String info)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="步骤3-添加LogService接口与实现类"><a href="#步骤3-添加LogService接口与实现类" class="headerlink" title="步骤3:添加LogService接口与实现类"></a>步骤3:添加LogService接口与实现类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LogService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String out, String in, Double money)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LogService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogDao logDao;</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String out,String in,Double money )</span> &#123;</span><br><span class="line">        logDao.log(<span class="string">&quot;转账操作由&quot;</span>+out+<span class="string">&quot;到&quot;</span>+in+<span class="string">&quot;,金额：&quot;</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="步骤4-在转账的业务中添加记录日志"><a href="#步骤4-在转账的业务中添加记录日志" class="headerlink" title="步骤4:在转账的业务中添加记录日志"></a>步骤4:在转账的业务中添加记录日志</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out 传出方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in 转入方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//配置当前接口方法具有事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span><span class="keyword">throws</span> IOException ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogService logService;</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            accountDao.outMoney(out,money);</span><br><span class="line">            accountDao.inMoney(in,money);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            logService.log(out,in,money);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="步骤5-运行程序-2"><a href="#步骤5-运行程序-2" class="headerlink" title="步骤5:运行程序"></a>步骤5:运行程序</h6><ul><li><p>当程序正常运行，tbl_account表中转账成功，tbl_log表中日志记录成功</p></li><li><p>当转账业务之间出现异常(int i &#x3D;1&#x2F;0),转账失败，tbl_account成功回滚，但是tbl_log表未添加数据</p></li><li><p>这个结果和我们想要的不一样，什么原因?该如何解决?</p></li><li><p>失败原因:日志的记录与转账操作隶属同一个事务，同成功同失败</p></li><li><p>最终效果:无论转账操作是否成功，日志必须保留</p></li></ul><h4 id="6-3-3-事务传播行为"><a href="#6-3-3-事务传播行为" class="headerlink" title="6.3.3 事务传播行为"></a>6.3.3 事务传播行为</h4><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172344666.png" alt="1630253779575"></p><p>对于上述案例的分析:</p><ul><li>log方法、inMoney方法和outMoney方法都属于增删改，分别有事务T1,T2,T3</li><li>transfer因为加了@Transactional注解，也开启了事务T</li><li>前面我们讲过Spring事务会把T1,T2,T3都加入到事务T中</li><li>所以当转账失败后，所有的事务都回滚，导致日志没有记录下来</li><li>这和我们的需求不符，这个时候我们就想能不能让log方法单独是一个事务呢?</li></ul><p>要想解决这个问题，就需要用到事务传播行为，所谓的事务传播行为指的是:</p><p>事务传播行为：事务协调员对事务管理员所携带事务的处理态度。</p><p>具体如何解决，就需要用到之前我们没有说的<code>propagation属性</code>。</p><h5 id="1-修改logService改变事务的传播行为"><a href="#1-修改logService改变事务的传播行为" class="headerlink" title="1.修改logService改变事务的传播行为"></a>1.修改logService改变事务的传播行为</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LogService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogDao logDao;</span><br><span class="line"><span class="comment">//propagation设置事务属性：传播行为设置为当前操作需要新事务</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String out,String in,Double money )</span> &#123;</span><br><span class="line">        logDao.log(<span class="string">&quot;转账操作由&quot;</span>+out+<span class="string">&quot;到&quot;</span>+in+<span class="string">&quot;,金额：&quot;</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后，就能实现我们想要的结果，不管转账是否成功，都会记录日志。</p><h5 id="2-事务传播行为的可选值"><a href="#2-事务传播行为的可选值" class="headerlink" title="2.事务传播行为的可选值"></a>2.事务传播行为的可选值</h5><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172344031.png" alt="1630254257628"></p><p>对于我们开发实际中使用的话，因为默认值需要事务是常态的。根据开发过程选择其他的就可以了，例如案例中需要新事务就需要手工配置。其实入账和出账操作上也有事务，采用的就是默认值。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringIOC&amp;DI（注解）</title>
      <link href="/2024/05/17/Spring/SpringIOC-DI%EF%BC%88%E6%B3%A8%E8%A7%A3%EF%BC%89/"/>
      <url>/2024/05/17/Spring/SpringIOC-DI%EF%BC%88%E6%B3%A8%E8%A7%A3%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="SpringIOC-DI（注解）"><a href="#SpringIOC-DI（注解）" class="headerlink" title="SpringIOC&amp;DI（注解）"></a>SpringIOC&amp;DI（注解）</h1><p><strong>学习目标</strong></p><ul><li>掌握IOC&#x2F;DI配置管理第三方bean</li><li>掌握IOC&#x2F;DI的注解开发</li><li>掌握IOC&#x2F;DI注解管理第三方bean</li><li>完成Spring与Mybatis及Junit的整合开发</li></ul><h2 id="1、IOC-DI配置管理第三方bean"><a href="#1、IOC-DI配置管理第三方bean" class="headerlink" title="1、IOC&#x2F;DI配置管理第三方bean"></a>1、IOC&#x2F;DI配置管理第三方bean</h2><p>前面所讲的知识点都是基于我们自己写的类，现在如果有需求让我们去管理第三方jar包中的类，该如何管理?</p><h3 id="1-1-案例-数据源对象管理"><a href="#1-1-案例-数据源对象管理" class="headerlink" title="1.1 案例:数据源对象管理"></a>1.1 案例:数据源对象管理</h3><p>在这一节中，我们将通过一个案例来学习下对于第三方bean该如何进行配置管理。</p><p>以后我们会用到很多第三方的bean,本次案例将使用咱们前面提到过的数据源<code>Druid(德鲁伊)</code>和<code>C3P0</code>来配置学习下。</p><h4 id="1-1-1-环境准备"><a href="#1-1-1-环境准备" class="headerlink" title="1.1.1 环境准备"></a>1.1.1 环境准备</h4><p>学习之前，先来准备下案例环境:</p><ul><li><p>创建一个Maven项目</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172325889.png" alt="1629860338328"></p></li><li><p>pom.xml添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>resources下添加spring的配置文件applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写一个运行类App</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-1-2-思路分析"><a href="#1-1-2-思路分析" class="headerlink" title="1.1.2 思路分析"></a>1.1.2 思路分析</h4><p>在上述环境下，我们来对数据源进行配置管理，先来分析下思路:</p><blockquote><p>需求:使用Spring的IOC容器来管理Druid连接池对象</p><p>1.使用第三方的技术，需要在pom.xml添加依赖</p><p>2.在配置文件中将【第三方的类】制作成一个bean，让IOC容器进行管理</p><p>3.数据库连接需要基础的四要素<code>驱动</code>、<code>连接</code>、<code>用户名</code>和<code>密码</code>，【如何注入】到对应的bean中</p><p>4.从IOC容器中获取对应的bean对象，将其打印到控制台查看结果</p></blockquote><p><strong>思考:</strong></p><ul><li>第三方的类指的是什么?</li><li>如何注入数据库连接四要素?</li></ul><h4 id="1-1-3-实现Druid管理"><a href="#1-1-3-实现Druid管理" class="headerlink" title="1.1.3 实现Druid管理"></a>1.1.3 实现Druid管理</h4><p>带着这两个问题，把下面的案例实现下:</p><h5 id="步骤1-导入druid的依赖"><a href="#步骤1-导入druid的依赖" class="headerlink" title="步骤1:导入druid的依赖"></a>步骤1:导入<code>druid</code>的依赖</h5><p>pom.xml中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤2-配置第三方bean"><a href="#步骤2-配置第三方bean" class="headerlink" title="步骤2:配置第三方bean"></a>步骤2:配置第三方bean</h5><p>在applicationContext.xml配置文件中添加<code>DruidDataSource</code>的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--管理DruidDataSource对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>driverClassName:数据库驱动</li><li>url:数据库连接地址</li><li>username:数据库连接用户名</li><li>password:数据库连接密码</li><li>数据库连接的四要素要和自己使用的数据库信息一致。</li></ul><h5 id="步骤3-从IOC容器中获取对应的bean对象"><a href="#步骤3-从IOC容器中获取对应的bean对象" class="headerlink" title="步骤3:从IOC容器中获取对应的bean对象"></a>步骤3:从IOC容器中获取对应的bean对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">       <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> (DataSource) ctx.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">       System.out.println(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤4-运行程序"><a href="#步骤4-运行程序" class="headerlink" title="步骤4:运行程序"></a>步骤4:运行程序</h5><p>打印如下结果: 说明第三方bean对象已经被spring的IOC容器进行管理</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172325268.png" alt="1629887733081"></p><p>做完案例后，我们可以将刚才思考的两个问题答案说下:</p><ul><li><p>第三方的类指的是什么?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DruidDataSource</span><br></pre></td></tr></table></figure></li><li><p>如何注入数据库连接四要素?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setter注入</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-1-4-实现C3P0管理"><a href="#1-1-4-实现C3P0管理" class="headerlink" title="1.1.4 实现C3P0管理"></a>1.1.4 实现C3P0管理</h4><p>完成了DruidDataSource的管理，接下来我们再来加深下练习，这次我们来管理<code>C3P0</code>数据源，具体的实现步骤是什么呢?</p><blockquote><p>需求:使用Spring的IOC容器来管理C3P0连接池对象</p><p>实现方案和上面基本一致，重点要关注管理的是哪个bean对象&#96;?</p></blockquote><h5 id="步骤1-导入C3P0的依赖"><a href="#步骤1-导入C3P0的依赖" class="headerlink" title="步骤1:导入C3P0的依赖"></a>步骤1:导入<code>C3P0</code>的依赖</h5><p>pom.xml中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>对于新的技术，不知道具体的坐标该如何查找?</strong></p><ul><li><p>直接百度搜索</p></li><li><p>从mvn的仓库<code>https://mvnrepository.com/</code>中进行搜索</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172325752.png" alt="1629888540286"></p></li></ul><h5 id="步骤2-配置第三方bean-1"><a href="#步骤2-配置第三方bean-1" class="headerlink" title="步骤2:配置第三方bean"></a>步骤2:配置第三方bean</h5><p>在applicationContext.xml配置文件中添加配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1000&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>&#x3D;&#x3D;注意:&#x3D;&#x3D;</strong></p><ul><li>ComboPooledDataSource的属性是通过setter方式进行注入</li><li>想注入属性就需要在ComboPooledDataSource类或其上层类中有提供属性对应的setter方法</li><li>C3P0的四个属性和Druid的四个属性是不一样的</li></ul><h5 id="步骤3-运行程序"><a href="#步骤3-运行程序" class="headerlink" title="步骤3:运行程序"></a>步骤3:运行程序</h5><p>程序会报错，错误如下</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172325522.png" alt="1629889170229"></p><p>报的错为&#x3D;&#x3D;ClassNotFoundException&#x3D;&#x3D;,翻译出来是<code>类没有发现的异常</code>，具体的类为<code>com.mysql.jdbc.Driver</code>。错误的原因是缺少mysql的驱动包。</p><p>分析出错误的原因，具体的解决方案就比较简单，只需要在pom.xml把驱动包引入即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加完mysql的驱动包以后，再次运行App,就可以打印出结果:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172325299.png" alt="1629903845404"></p><p><strong>注意：</strong></p><ul><li>数据连接池在配置属性的时候，除了可以注入数据库连接四要素外还可以配置很多其他的属性，具体都有哪些属性用到的时候再去查，一般配置基础的四个，其他都有自己的默认值</li><li>Druid和C3P0在没有导入mysql驱动包的前提下，一个没报错一个报错，说明Druid在初始化的时候没有去加载驱动，而C3P0刚好相反</li><li>Druid程序运行虽然没有报错，但是当调用DruidDataSource的getConnection()方法获取连接的时候，也会报找不到驱动类的错误</li></ul><h3 id="1-2-加载properties文件"><a href="#1-2-加载properties文件" class="headerlink" title="1.2 加载properties文件"></a>1.2 加载properties文件</h3><p>上节中我们已经完成两个数据源<code>druid</code>和<code>C3P0</code>的配置，但是其中包含了一些问题，我们来分析下:</p><ul><li>这两个数据源中都使用到了一些固定的常量如数据库连接四要素，把这些值写在Spring的配置文件中不利于后期维护</li><li>需要将这些值提取到一个外部的properties配置文件中</li><li>Spring框架如何从配置文件中读取属性值来配置就是接下来要解决的问题。</li></ul><p>问题提出来后，具体该如何实现?</p><h4 id="1-2-1-第三方bean属性优化"><a href="#1-2-1-第三方bean属性优化" class="headerlink" title="1.2.1 第三方bean属性优化"></a>1.2.1 第三方bean属性优化</h4><h5 id="1-2-1-1-实现思路"><a href="#1-2-1-1-实现思路" class="headerlink" title="1.2.1.1 实现思路"></a>1.2.1.1 实现思路</h5><blockquote><p>需求:将数据库连接四要素提取到properties配置文件，spring来加载配置信息并使用这些信息来完成属性注入。</p><p>1.在resources下创建一个jdbc.properties(文件的名称可以任意)</p><p>2.将数据库连接四要素配置到配置文件中</p><p>3.在Spring的配置文件中加载properties文件</p><p>4.使用加载到的值实现属性注入</p><p>其中第3，4步骤是需要大家重点关注，具体是如何实现。</p></blockquote><h5 id="1-2-1-2-实现步骤"><a href="#1-2-1-2-实现步骤" class="headerlink" title="1.2.1.2 实现步骤"></a>1.2.1.2 实现步骤</h5><h6 id="步骤1-准备properties配置文件"><a href="#步骤1-准备properties配置文件" class="headerlink" title="步骤1:准备properties配置文件"></a>步骤1:准备properties配置文件</h6><p>resources下创建一个jdbc.properties文件,并添加对应的属性键值对</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/spring_db</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h6 id="步骤2-开启context命名空间"><a href="#步骤2-开启context命名空间" class="headerlink" title="步骤2:开启context命名空间"></a>步骤2:开启<code>context</code>命名空间</h6><p>在applicationContext.xml中开<code>context</code>命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="步骤3-加载properties配置文件"><a href="#步骤3-加载properties配置文件" class="headerlink" title="步骤3:加载properties配置文件"></a>步骤3:加载properties配置文件</h6><p>在配置文件中使用<code>context</code>命名空间下的标签来加载properties配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h6 id="步骤4-完成属性注入"><a href="#步骤4-完成属性注入" class="headerlink" title="步骤4:完成属性注入"></a>步骤4:完成属性注入</h6><p>使用<code>$&#123;key&#125;</code>来读取properties配置文件中的内容并完成属性注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此，读取外部properties配置文件中的内容就已经完成。</p><h4 id="1-2-2-读取单个属性"><a href="#1-2-2-读取单个属性" class="headerlink" title="1.2.2 读取单个属性"></a>1.2.2 读取单个属性</h4><h5 id="1-2-2-1-实现思路"><a href="#1-2-2-1-实现思路" class="headerlink" title="1.2.2.1 实现思路"></a>1.2.2.1 实现思路</h5><p>对于上面的案例，效果不是很明显，我们可以换个案例来演示下:</p><blockquote><p>需求:从properties配置文件中读取key为name的值，并将其注入到BookDao中并在save方法中进行打印。</p><p>1.在项目中添加BookDao和BookDaoImpl类</p><p>2.为BookDaoImpl添加一个name属性并提供setter方法</p><p>3.在jdbc.properties中添加数据注入到bookDao中打印方便查询结果</p><p>4.在applicationContext.xml添加配置完成配置文件加载、属性注入(${key})</p></blockquote><h5 id="1-2-2-2-实现步骤"><a href="#1-2-2-2-实现步骤" class="headerlink" title="1.2.2.2 实现步骤"></a>1.2.2.2 实现步骤</h5><h6 id="步骤1-在项目中添对应的类"><a href="#步骤1-在项目中添对应的类" class="headerlink" title="步骤1:在项目中添对应的类"></a>步骤1:在项目中添对应的类</h6><p>BookDao和BookDaoImpl类，并在BookDaoImpl类中添加<code>name</code>属性与setter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="步骤2-完成配置文件的读取与注入"><a href="#步骤2-完成配置文件的读取与注入" class="headerlink" title="步骤2:完成配置文件的读取与注入"></a>步骤2:完成配置文件的读取与注入</h6><p>在applicationContext.xml添加配置，<code>bean的配置管理</code>、<code>读取外部properties</code>、<code>依赖注入</code>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="步骤3-运行程序-1"><a href="#步骤3-运行程序-1" class="headerlink" title="步骤3:运行程序"></a>步骤3:运行程序</h6><p>在App类中，从IOC容器中获取bookDao对象，调用方法，查看值是否已经被获取到并打印控制台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172326982.png" alt="1629975492444"></p><h5 id="1-2-2-3-注意事项"><a href="#1-2-2-3-注意事项" class="headerlink" title="1.2.2.3 注意事项"></a>1.2.2.3 注意事项</h5><p>至此，读取properties配置文件中的内容就已经完成，但是在使用的时候，有些注意事项:</p><ul><li><p>问题一:键值对的key为<code>username</code>引发的问题</p><p>1.在properties中配置键值对的时候，如果key设置为<code>username</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=root666</span><br></pre></td></tr></table></figure><p>2.在applicationContext.xml注入该属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.运行后，在控制台打印的却不是<code>root666</code>，而是自己电脑的用户名</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172326801.png" alt="1629975934694"></p><p>4.出现问题的原因是<code>&lt;context:property-placeholder/&gt;</code>标签会加载系统的环境变量，而且环境变量的值会被优先加载，如何查看系统的环境变量?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    Map&lt;String, String&gt; env = System.getenv();</span><br><span class="line">    System.out.println(env);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家可以自行运行，在打印出来的结果中会有一个USERNAME&#x3D;XXX[自己电脑的用户名称]</p><p>5.解决方案</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>system-properties-mode:设置为NEVER,表示不加载系统属性</strong>，就可以解决上述问题。</p><p>当然还有一个解决方案就是避免使用<code>username</code>作为属性的<code>key</code>。</p></li><li><p>问题二:当有多个properties配置文件需要被加载，该如何配置?</p><p>1.调整下配置文件的内容，在resources下添加<code>jdbc.properties</code>,<code>jdbc2.properties</code>,内容如下:</p><p>jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/spring_db</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p>jdbc2.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root666</span></span><br></pre></td></tr></table></figure><p>2.修改applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方式一 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties,jdbc2.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方式二--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方式三 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方式四--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>方式一:可以实现，如果配置文件多的话，每个都需要配置</li><li>方式二:<code>*.properties</code>代表所有以properties结尾的文件都会被加载，可以解决方式一的问题，但是不标准</li><li>方式三:标准的写法，<code>classpath:</code>代表的是从根路径下开始查找，但是只能查询当前项目的根路径</li><li>方式四:不仅可以加载当前项目还可以加载当前项目所依赖的所有项目的根路径下的properties配置文件</li></ul></li></ul><h4 id="1-2-3-加载properties文件小结"><a href="#1-2-3-加载properties文件小结" class="headerlink" title="1.2.3 加载properties文件小结"></a>1.2.3 加载properties文件小结</h4><p>  本节主要讲解的是properties配置文件的加载，需要掌握的内容有:</p><ul><li><p>如何开启<code>context</code>命名空间</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172326508.png" alt="1629980280952"></p></li><li><p>如何加载properties配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>如何在applicationContext.xml引入properties配置文件中的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;key&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2、核心容器"><a href="#2、核心容器" class="headerlink" title="2、核心容器"></a>2、核心容器</h2><p>前面已经完成bean与依赖注入的相关知识学习，接下来我们主要学习的是IOC容器中的&#x3D;&#x3D;核心容器&#x3D;&#x3D;。</p><p>这里所说的核心容器，大家可以把它简单的理解为<code>ApplicationContext</code>，前面虽然已经用到过，但是并没有系统的学习，接下来咱们从以下几个问题入手来学习下容器的相关知识:</p><ul><li>如何创建容器?</li><li>创建好容器后，如何从容器中获取bean对象?</li><li>容器类的层次结构是什么?</li><li>BeanFactory是什么?</li></ul><h3 id="2-1-环境准备"><a href="#2-1-环境准备" class="headerlink" title="2.1 环境准备"></a>2.1 环境准备</h3><p>在学习和解决上述问题之前，先来准备下案例环境:</p><ul><li><p>创建一个Maven项目</p></li><li><p>pom.xml添加Spring的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>resources下添加applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加BookDao和BookDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建运行类App</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终创建好的项目结构如下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172326583.png" alt="1629982672522"></p><h3 id="2-2-容器"><a href="#2-2-容器" class="headerlink" title="2.2 容器"></a>2.2 容器</h3><h4 id="2-2-1-容器的创建方式"><a href="#2-2-1-容器的创建方式" class="headerlink" title="2.2.1 容器的创建方式"></a>2.2.1 容器的创建方式</h4><p>案例中创建<code>ApplicationContext</code>的方式为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p>这种方式翻译为:&#x3D;&#x3D;类路径下的XML配置文件&#x3D;&#x3D;</p><p>除了上面这种方式，Spring还提供了另外一种创建方式为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p>这种方式翻译为:&#x3D;&#x3D;文件系统下的XML配置文件&#x3D;&#x3D;</p><p>使用这种方式，运行，会出现如下错误:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172326703.png" alt="1629983245121"></p><p>从错误信息中能发现，这种方式是从项目路径下开始查找<code>applicationContext.xml</code>配置文件的，所以需要将其修改为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;D:\\workspace\\spring\\spring_10_container\\src\\main\\resources\\applicationContext.xml&quot;</span>); </span><br></pre></td></tr></table></figure><p>**说明:**大家练习的时候，写自己的具体路径。</p><p>这种方式虽能实现，但是当项目的位置发生变化后,代码也需要跟着改,耦合度较高,不推荐使用。</p><h4 id="2-2-2-Bean的三种获取方式"><a href="#2-2-2-Bean的三种获取方式" class="headerlink" title="2.2.2 Bean的三种获取方式"></a>2.2.2 Bean的三种获取方式</h4><p>方式一，就是目前案例中获取的方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br></pre></td></tr></table></figure><p>这种方式存在的问题是每次获取的时候都需要进行类型转换，有没有更简单的方式呢?</p><p>方式二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BookDao bookDao = ctx.getBean(&quot;bookDao&quot;，BookDao.class);</span><br></pre></td></tr></table></figure><p>这种方式可以解决类型强转问题，但是参数又多加了一个，相对来说没有简化多少。</p><p>方式三:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BookDao bookDao = ctx.getBean(BookDao.class);</span><br></pre></td></tr></table></figure><p>这种方式就类似我们之前所学习依赖注入中的按类型注入。必须要确保IOC容器中该类型对应的bean对象只能有一个。</p><h4 id="2-2-3-容器类层次结构"><a href="#2-2-3-容器类层次结构" class="headerlink" title="2.2.3 容器类层次结构"></a>2.2.3 容器类层次结构</h4><p>(1)在IDEA中双击<code>shift</code>,输入BeanFactory</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172326660.png" alt="1629985148294"></p><p>(2)点击进入BeanFactory类，ctrl+h,就能查看到如下结构的层次关系</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172327666.png" alt="1629984980781"></p><p>从图中可以看出，容器类也是从无到有根据需要一层层叠加上来的，大家重点理解下这种设计思想。</p><h4 id="2-2-4-BeanFactory的使用"><a href="#2-2-4-BeanFactory的使用" class="headerlink" title="2.2.4 BeanFactory的使用"></a>2.2.4 BeanFactory的使用</h4><p>使用BeanFactory来创建IOC容器的具体实现方式为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForBeanFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resources</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BeanFactory</span> <span class="variable">bf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanFactory</span>(resources);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> bf.getBean(BookDao.class);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了更好的看出<code>BeanFactory</code>和<code>ApplicationContext</code>之间的区别，在BookDaoImpl添加如下构造函数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookDaoImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不去获取bean对象，打印会发现：</p><ul><li><p>BeanFactory是延迟加载，只有在获取bean对象的时候才会去创建</p></li><li><p>ApplicationContext是立即加载，容器加载的时候就会创建bean对象</p></li><li><p>ApplicationContext要想成为延迟加载，只需要按照如下方式进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>  <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>小结</strong></p><p>这一节中所讲的知识点包括:</p><ul><li><p>容器创建的两种方式</p><ul><li>ClassPathXmlApplicationContext[掌握]</li><li>FileSystemXmlApplicationContext[知道即可]</li></ul></li><li><p>获取Bean的三种方式</p><ul><li>getBean(“名称”):需要类型转换</li><li>getBean(“名称”,类型.class):多了一个参数</li><li>getBean(类型.class):容器中不能有多个该类的bean对象</li></ul><p>上述三种方式，各有各的优缺点，用哪个都可以。</p></li><li><p>容器类层次结构</p><ul><li>只需要知晓容器的最上级的父接口为 BeanFactory即可</li></ul></li><li><p>BeanFactory</p><ul><li>使用BeanFactory创建的容器是延迟加载</li><li>使用ApplicationContext创建的容器是立即加载</li><li>具体BeanFactory如何创建只需要了解即可。</li></ul></li></ul><h3 id="2-2-核心容器总结"><a href="#2-2-核心容器总结" class="headerlink" title="2.2 核心容器总结"></a>2.2 核心容器总结</h3><p>这节中没有新的知识点，只是对前面知识的一个大总结，共包含如下内容:</p><h4 id="2-2-1-容器相关"><a href="#2-2-1-容器相关" class="headerlink" title="2.2.1 容器相关"></a>2.2.1 容器相关</h4><ul><li>BeanFactory是IoC容器的顶层接口，初始化BeanFactory对象时，加载的bean延迟加载</li><li>ApplicationContext接口是Spring容器的核心接口，初始化时bean立即加载</li><li>ApplicationContext接口提供基础的bean操作相关方法，通过其他接口扩展其功能</li><li>ApplicationContext接口常用初始化类<ul><li><strong>&#x3D;&#x3D;ClassPathXmlApplicationContext(常用)&#x3D;&#x3D;</strong></li><li>FileSystemXmlApplicationContext</li></ul></li></ul><h4 id="2-2-2-bean相关"><a href="#2-2-2-bean相关" class="headerlink" title="2.2.2 bean相关"></a>2.2.2 bean相关</h4><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172327119.png" alt="1629986510487"></p><p>其实整个配置中最常用的就两个属性&#x3D;&#x3D;id&#x3D;&#x3D;和&#x3D;&#x3D;class&#x3D;&#x3D;。</p><p>把scope、init-method、destroy-method框起来的原因是，后面注解在讲解的时候还会用到，所以大家对这三个属性关注下。</p><h4 id="2-2-3-依赖注入相关"><a href="#2-2-3-依赖注入相关" class="headerlink" title="2.2.3 依赖注入相关"></a>2.2.3 依赖注入相关</h4><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172327676.png" alt="1629986848563"></p><h2 id="3、IOC-DI注解开发"><a href="#3、IOC-DI注解开发" class="headerlink" title="3、IOC&#x2F;DI注解开发"></a>3、IOC&#x2F;DI注解开发</h2><p>Spring的IOC&#x2F;DI对应的配置开发就已经讲解完成，但是使用起来相对来说还是比较复杂的，复杂的地方在&#x3D;&#x3D;配置文件&#x3D;&#x3D;。</p><p>前面咱们聊Spring的时候说过，Spring可以简化代码的开发，到现在并没有体会到。</p><p>所以Spring到底是如何简化代码开发的呢?</p><p>要想真正简化开发，就需要用到Spring的注解开发，Spring对注解支持的版本历程:</p><ul><li>2.0版开始支持注解</li><li>2.5版注解功能趋于完善</li><li>3.0版支持纯注解开发</li></ul><p>关于注解开发，我们会讲解两块内容<code>注解开发定义bean</code>和<code>纯注解开发</code>。</p><p>注解开发定义bean用的是2.5版提供的注解，纯注解开发用的是3.0版提供的注解。</p><h3 id="3-1-环境准备"><a href="#3-1-环境准备" class="headerlink" title="3.1 环境准备"></a>3.1 环境准备</h3><p>在学习注解开发之前，先来准备下案例环境:</p><ul><li><p>创建一个Maven项目</p></li><li><p>pom.xml添加Spring的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>resources下添加applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加BookDao、BookDaoImpl、BookService、BookServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建运行类App</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终创建好的项目结构如下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172327960.png" alt="1629989221808"></p><h3 id="3-2-注解开发定义bean"><a href="#3-2-注解开发定义bean" class="headerlink" title="3.2 注解开发定义bean"></a>3.2 注解开发定义bean</h3><p>在上述环境的基础上，我们来学一学Spring是如何通过注解实现bean的定义开发?</p><h4 id="步骤1-删除原XML配置"><a href="#步骤1-删除原XML配置" class="headerlink" title="步骤1:删除原XML配置"></a>步骤1:删除原XML配置</h4><p>将配置文件中的<code>&lt;bean&gt;</code>标签删除掉</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤2-Dao上添加注解"><a href="#步骤2-Dao上添加注解" class="headerlink" title="步骤2:Dao上添加注解"></a>步骤2:Dao上添加注解</h4><p>在BookDaoImpl类上添加<code>@Component</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意:@Component注解不可以添加在接口上，因为接口是无法创建对象的。&#x3D;&#x3D;</p><p>XML与注解配置的对应关系:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172327964.png" alt="1629990315619"></p><h4 id="步骤3-配置Spring的注解包扫描"><a href="#步骤3-配置Spring的注解包扫描" class="headerlink" title="步骤3:配置Spring的注解包扫描"></a>步骤3:配置Spring的注解包扫描</h4><p>为了让Spring框架能够扫描到写在类上的注解，需要在配置文件上进行包扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>&#x3D;&#x3D;component-scan&#x3D;&#x3D;</p><ul><li>component:组件,Spring将管理的bean视作自己的一个组件</li><li>scan:扫描</li></ul><p>base-package指定Spring框架扫描的包路径，它会扫描指定包及其子包中的所有类上的注解。</p><ul><li>包路径越多[如:com.itheima.dao.impl]，扫描的范围越小速度越快</li><li>包路径越少[如:com.itheima],扫描的范围越大速度越慢</li><li>一般扫描到项目的组织名称即Maven的groupId下[如:com.itheima]即可。</li></ul><h4 id="步骤4：运行程序"><a href="#步骤4：运行程序" class="headerlink" title="步骤4：运行程序"></a>步骤4：运行程序</h4><p>运行<code>App</code>类查看打印结果</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172327840.png" alt="1630027590558"></p><h4 id="步骤5-Service上添加注解"><a href="#步骤5-Service上添加注解" class="headerlink" title="步骤5:Service上添加注解"></a>步骤5:Service上添加注解</h4><p>在BookServiceImpl类上也添加<code>@Component</code>交给Spring框架管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123; <span class="comment">//不添加@Autowired注解会报错,但是为什么？</span></span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">    ----------------------------------------------------------------------------</span><br><span class="line">     <span class="comment">/*public BookServiceImpl(BookDao bookDao) &#123; </span></span><br><span class="line"><span class="comment">        this.bookDao = bookDao;</span></span><br><span class="line"><span class="comment">         &#125;*/</span></span><br><span class="line">        注意：为什么用这个不会报错？</span><br><span class="line">        首先明确，这个bean的实例化用的是无参构造方法。</span><br><span class="line">        在注入依赖时用的是构造方法注入，相当于xml文件中的：</span><br><span class="line">        &lt;bean id=<span class="string">&quot;bookDao&quot;</span> class=<span class="string">&quot;dao.BookDaoImpl&quot;</span> /&gt;</span><br><span class="line">        这个在BookDaoImpl用注解声明为bean</span><br><span class="line">        &lt;bean id=<span class="string">&quot;bookService&quot;</span> class=<span class="string">&quot;service.impl.BookServiceImpl&quot;</span>&gt; </span><br><span class="line">        这个在BookServiceImpl用注解声明为bean                                     </span><br><span class="line">              &lt;constructor-arg ref=<span class="string">&quot;bookDao&quot;</span> /&gt;</span><br><span class="line">              这个就相当于构造方法</span><br><span class="line">              但是后面的ref=<span class="string">&quot;BookDao&quot;</span>如何实现？</span><br><span class="line">              就是构造方法的形参的类型和SpringIOC容器中的bean相匹配就注入。</span><br><span class="line">              注意：这个在纯注解不适用，不加<span class="meta">@Autowired</span>（自动装配会报错）</span><br><span class="line">        &lt;/bean&gt;</span><br><span class="line">    ---------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="步骤6-运行程序"><a href="#步骤6-运行程序" class="headerlink" title="步骤6:运行程序"></a>步骤6:运行程序</h4><p>在App类中，从IOC容器中获取BookServiceImpl对应的bean对象，打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        System.out.println(bookDao);</span><br><span class="line">        <span class="comment">//按类型获取bean</span></span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> ctx.getBean(BookService.class);</span><br><span class="line">        System.out.println(bookService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印观察结果，两个bean对象都已经打印到控制台</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172328898.png" alt="1630027743910"></p><p><strong>说明:</strong></p><ul><li><p>BookServiceImpl类没有起名称，所以在App中是&#x3D;&#x3D;按照类型&#x3D;&#x3D;来获取bean对象</p></li><li><p><strong>@Component注解如果不起名称，会有一个默认值就是</strong><code>当前类名首字母小写</code>，所以也可以按照名称获取，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> (BookService)ctx.getBean(<span class="string">&quot;bookServiceImpl&quot;</span>);</span><br><span class="line">System.out.println(bookService);</span><br></pre></td></tr></table></figure></li></ul><p>对于@Component注解，还衍生出了其他三个注解<code>@Controller</code>、<code>@Service</code>、<code>@Repository</code></p><p>通过查看源码会发现:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172328072.png" alt="1630028345074"></p><p>这三个注解和@Component注解的作用是一样的，为什么要衍生出这三个呢?</p><p>方便我们后期在编写类的时候能很好的区分出这个类是属于<code>表现层</code>、<code>业务层</code>还是<code>数据层</code>的类。</p><h4 id="知识点1-Component等"><a href="#知识点1-Component等" class="headerlink" title="知识点1:@Component等"></a>知识点1:@Component等</h4><table><thead><tr><th>名称</th><th>&#x3D;&#x3D;@Component&#x2F;@Controller&#x2F;@Service&#x2F;@Repository&#x3D;&#x3D;</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>类定义上方</td></tr><tr><td>作用</td><td>设置该类为spring管理的bean</td></tr><tr><td>属性</td><td>value（默认）：定义bean的id</td></tr></tbody></table><h3 id="3-2-纯注解开发模式"><a href="#3-2-纯注解开发模式" class="headerlink" title="3.2 纯注解开发模式"></a>3.2 纯注解开发模式</h3><p>上面已经可以使用注解来配置bean,但是依然有用到配置文件，在配置文件中对包进行了扫描，Spring在3.0版已经支持纯注解开发</p><ul><li>Spring3.0开启了纯注解开发模式，使用Java类替代配置文件，开启了Spring快速开发赛道</li></ul><p>具体如何实现?</p><h4 id="3-2-1-思路分析"><a href="#3-2-1-思路分析" class="headerlink" title="3.2.1 思路分析"></a>3.2.1 思路分析</h4><p>实现思路为: </p><ul><li>将配置文件applicationContext.xml删除掉，使用类来替换。</li></ul><h4 id="3-2-2-实现步骤"><a href="#3-2-2-实现步骤" class="headerlink" title="3.2.2 实现步骤"></a>3.2.2 实现步骤</h4><h5 id="步骤1-创建配置类"><a href="#步骤1-创建配置类" class="headerlink" title="步骤1:创建配置类"></a>步骤1:创建配置类</h5><p>创建一个配置类<code>SpringConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="步骤2-标识该类为配置类"><a href="#步骤2-标识该类为配置类" class="headerlink" title="步骤2:标识该类为配置类"></a>步骤2:标识该类为配置类</h5><p>在配置类上添加&#x3D;&#x3D;<strong>@Configuration注解</strong>&#x3D;&#x3D;，将其标识为一个配置类,替换applicationContext.xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤3-用注解替换包扫描配置"><a href="#步骤3-用注解替换包扫描配置" class="headerlink" title="步骤3:用注解替换包扫描配置"></a>步骤3:用注解替换包扫描配置</h5><p>在配置类上添加包扫描注解&#x3D;&#x3D;@ComponentScan&#x3D;&#x3D;替换&lt;context:component-scan base-package&#x3D;””&#x2F;&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤4-创建运行类并执行"><a href="#步骤4-创建运行类并执行" class="headerlink" title="步骤4:创建运行类并执行"></a>步骤4:创建运行类并执行</h5><p>创建一个新的运行类<code>AppForAnnotation</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForAnnotation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        System.out.println(bookDao);</span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> ctx.getBean(BookService.class);</span><br><span class="line">        System.out.println(bookService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行AppForAnnotation,可以看到两个对象依然被获取成功</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172328029.png" alt="1630029110506"></p><p>至此，纯注解开发的方式就已经完成了，主要内容包括:</p><ul><li><p>Java类替换Spring核心配置文件</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172328992.png" alt="1630029254372"></p></li><li><p>@Configuration注解用于设定当前类为配置类</p></li><li><p><strong>@ComponentScan注解用于设定扫描路径，此注解只能添加一次，多个数据请用数组格式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ComponentScan(&#123;com.itheima.service&quot;,&quot;com.itheima.dao&quot;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>&#x3D;&#x3D;<strong>读取Spring核心配置文件初始化容器对象切换为读取Java配置类初始化容器对象</strong>&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载配置文件初始化容器</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="comment">//加载配置类初始化容器</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br></pre></td></tr></table></figure></li></ul><h4 id="知识点1：-Configuration"><a href="#知识点1：-Configuration" class="headerlink" title="知识点1：@Configuration"></a>知识点1：@Configuration</h4><table><thead><tr><th>名称</th><th>@Configuration</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>类定义上方</td></tr><tr><td>作用</td><td>设置该类为spring配置类</td></tr><tr><td>属性</td><td><strong>value（默认）：定义bean的id</strong></td></tr></tbody></table><h4 id="知识点2：-ComponentScan"><a href="#知识点2：-ComponentScan" class="headerlink" title="知识点2：@ComponentScan"></a>知识点2：@ComponentScan</h4><table><thead><tr><th>名称</th><th>@ComponentScan</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>类定义上方</td></tr><tr><td>作用</td><td>设置spring配置类扫描路径，用于加载使用注解格式定义的bean</td></tr><tr><td>属性</td><td>value（默认）：扫描路径，此路径可以逐层向下扫描</td></tr></tbody></table><p><strong>小结:</strong></p><p>这一节重点掌握的是使用注解完成Spring的bean管理，需要掌握的内容为:</p><ul><li>记住@Component、@Controller、@Service、@Repository这四个注解</li><li>applicationContext.xml中<code>&lt;context:component-san/&gt;</code>的作用是指定扫描包路径，注解为@ComponentScan</li><li>@Configuration标识该类为配置类，使用类替换applicationContext.xml文件</li><li>&#x3D;&#x3D;<strong>ClassPathXmlApplicationContext是加载XML配置文件</strong>&#x3D;&#x3D;</li><li>&#x3D;&#x3D;<strong>AnnotationConfigApplicationContext是加载配置类</strong>&#x3D;&#x3D;</li></ul><h3 id="3-3-注解开发bean作用范围与生命周期管理"><a href="#3-3-注解开发bean作用范围与生命周期管理" class="headerlink" title="3.3 注解开发bean作用范围与生命周期管理"></a>3.3 注解开发bean作用范围与生命周期管理</h3><p>使用注解已经完成了bean的管理，接下来按照前面所学习的内容，将通过配置实现的内容都换成对应的注解实现，包含两部分内容:<code>bean作用范围</code>和<code>bean生命周期</code>。</p><h4 id="3-3-1-环境准备"><a href="#3-3-1-环境准备" class="headerlink" title="3.3.1 环境准备"></a>3.3.1 环境准备</h4><p>老规矩，学习之前先来准备环境:</p><ul><li><p>创建一个Maven项目</p></li><li><p>pom.xml添加Spring的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加一个配置类<code>SpringConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加BookDao、BookDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建运行类App</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao1</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao2</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        System.out.println(bookDao1);</span><br><span class="line">        System.out.println(bookDao2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终创建好的项目结构如下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172328683.png" alt="1630031112993"></p><h4 id="3-3-2-Bean的作用范围"><a href="#3-3-2-Bean的作用范围" class="headerlink" title="3.3.2 Bean的作用范围"></a>3.3.2 Bean的作用范围</h4><p>(1)先运行App类,在控制台打印两个一摸一样的地址，说明默认情况下bean是单例</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172328464.png" alt="1630031192753"></p><p>(2)要想将BookDaoImpl变成非单例，只需要在其类上添加&#x3D;&#x3D;@Scope&#x3D;&#x3D;注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="comment">//@Scope设置bean的作用范围</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次执行App类，打印结果:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172328473.png" alt="1630031808947"></p><h5 id="知识点1：-Scope"><a href="#知识点1：-Scope" class="headerlink" title="知识点1：@Scope"></a>知识点1：@Scope</h5><table><thead><tr><th>名称</th><th>@Scope</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>类定义上方</td></tr><tr><td>作用</td><td>设置该类创建对象的作用范围<br/>可用于设置创建出的bean是否为单例对象</td></tr><tr><td>属性</td><td>value（默认）：定义bean作用范围，<br/>&#x3D;&#x3D;默认值singleton（单例），可选值prototype（非单例）&#x3D;&#x3D;</td></tr></tbody></table><h4 id="3-3-3-Bean的生命周期"><a href="#3-3-3-Bean的生命周期" class="headerlink" title="3.3.3 Bean的生命周期"></a>3.3.3 Bean的生命周期</h4><p>(1)在BookDaoImpl中添加两个方法，<code>init</code>和<code>destroy</code>,方法名可以任意</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(2)如何对方法进行标识，哪个是初始化方法，哪个是销毁方法?</p><p>只需要在对应的方法上添加&#x3D;&#x3D;@PostConstruct&#x3D;&#x3D;和&#x3D;&#x3D;@PreDestroy&#x3D;&#x3D;注解即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostConstruct</span> <span class="comment">//在构造方法之后执行，替换 init-method</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PreDestroy</span> <span class="comment">//在销毁方法之前执行,替换 destroy-method</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(3)要想看到两个方法执行，需要注意的是<code>destroy</code>只有在容器关闭的时候，才会执行，所以需要修改App的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao1</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao2</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        System.out.println(bookDao1);</span><br><span class="line">        System.out.println(bookDao2);</span><br><span class="line">        ctx.close(); <span class="comment">//关闭容器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4)运行App,类查看打印结果，证明init和destroy方法都被执行了。</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172328110.png" alt="1630032385498"></p><p>&#x3D;&#x3D;<strong>注意:</strong>@PostConstruct和@PreDestroy注解如果找不到，需要导入下面的jar包&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;javax.annotation&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;javax.annotation-api&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">1.3</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>找不到的原因是，从JDK9以后jdk中的javax.annotation包被移除了，这两个注解刚好就在这个包中。</p><h5 id="知识点1：-PostConstruct"><a href="#知识点1：-PostConstruct" class="headerlink" title="知识点1：@PostConstruct"></a>知识点1：@PostConstruct</h5><table><thead><tr><th>名称</th><th>@PostConstruct</th></tr></thead><tbody><tr><td>类型</td><td>方法注解</td></tr><tr><td>位置</td><td>方法上</td></tr><tr><td>作用</td><td>设置该方法为初始化方法</td></tr><tr><td>属性</td><td>无</td></tr></tbody></table><h5 id="知识点2：-PreDestroy"><a href="#知识点2：-PreDestroy" class="headerlink" title="知识点2：@PreDestroy"></a>知识点2：@PreDestroy</h5><table><thead><tr><th>名称</th><th>@PreDestroy</th></tr></thead><tbody><tr><td>类型</td><td>方法注解</td></tr><tr><td>位置</td><td>方法上</td></tr><tr><td>作用</td><td>设置该方法为销毁方法</td></tr><tr><td>属性</td><td>无</td></tr></tbody></table><p><strong>小结</strong></p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172328912.png" alt="1630033039358"></p><h3 id="3-4-注解开发依赖注入"><a href="#3-4-注解开发依赖注入" class="headerlink" title="3.4 注解开发依赖注入"></a>3.4 注解开发依赖注入</h3><p>Spring为了使用注解简化开发，并没有提供<code>构造函数注入</code>、<code>setter注入</code>对应的注解，只提供了自动装配的注解实现。</p><h4 id="3-4-1-环境准备"><a href="#3-4-1-环境准备" class="headerlink" title="3.4.1 环境准备"></a>3.4.1 环境准备</h4><p>在学习之前，把案例环境介绍下:</p><ul><li><p>创建一个Maven项目</p></li><li><p>pom.xml添加Spring的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加一个配置类<code>SpringConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加BookDao、BookDaoImpl、BookService、BookServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建运行类App</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> ctx.getBean(BookService.class);</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终创建好的项目结构如下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172329431.png" alt="1630033604129"></p><p>环境准备好后，运行后会发现有问题</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172329094.png" alt="1630033710052"></p><p>出现问题的原因是，在BookServiceImpl类中添加了BookDao的属性，并提供了setter方法，但是目前是没有提供配置注入BookDao的，所以bookDao对象为Null,调用其save方法就会报<code>控指针异常</code>。</p><h4 id="3-4-2-注解实现按照类型注入"><a href="#3-4-2-注解实现按照类型注入" class="headerlink" title="3.4.2 注解实现按照类型注入"></a>3.4.2 注解实现按照类型注入</h4><p>对于这个问题使用注解该如何解决?</p><p>(1) 在BookServiceImpl类的bookDao属性上添加<code>@Autowired</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//  public void setBookDao(BookDao bookDao) &#123;</span></span><br><span class="line"><span class="comment">//        this.bookDao = bookDao;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li><strong>@Autowired可以写在属性上，也可也写在setter方法上，最简单的处理方式是<code>写在属性上并将setter方法删除掉</code></strong></li><li>为什么setter方法可以删除呢?<ul><li>自动装配基于反射设计创建对象并通过暴力反射为私有属性进行设值</li><li>普通反射只能获取public修饰的内容</li><li>暴力反射除了获取public修饰的内容还可以获取private修改的内容</li><li>所以此处无需提供setter方法</li></ul></li></ul><p>(2)@Autowired是按照类型注入，那么对应BookDao接口如果有多个实现类，比如添加BookDaoImpl2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl2</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候再次运行App，就会报错</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172329529.png" alt="1630034272959"></p><p>此时，按照类型注入就无法区分到底注入哪个对象，解决方案:<code>按照名称注入</code></p><ul><li><p>先给两个Dao类分别起个名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository(&quot;bookDao2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl2</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...2&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就可以注入成功，但是得思考个问题: </p><ul><li><p>@Autowired是按照类型注入的，给BookDao的两个实现起了名称，它还是有两个bean对象，为什么不报错?</p></li><li><p><strong>@Autowired默认按照类型自动装配，如果IOC容器中同类的Bean找到多个，就&#x3D;&#x3D;按照变量名和Bean的名称匹配&#x3D;&#x3D;。因为变量名叫<code>bookDao</code>而容器中也有一个<code>booDao</code>，所以可以成功注入。</strong></p></li><li><p>分析下面这种情况是否能完成注入呢?</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172329413.png" alt="1630036236150"></p></li><li><p>不行，因为按照类型会找到多个bean对象，此时会按照<code>bookDao</code>名称去找，因为IOC容器只有名称叫<code>bookDao1</code>和<code>bookDao2</code>,所以找不到，会报<code>NoUniqueBeanDefinitionException</code></p></li></ul></li></ul><h4 id="3-4-3-注解实现按照名称注入"><a href="#3-4-3-注解实现按照名称注入" class="headerlink" title="3.4.3 注解实现按照名称注入"></a>3.4.3 注解实现按照名称注入</h4><p>当根据类型在容器中找到多个bean,注入参数的属性名又和容器中bean的名称不一致，这个时候该如何解决，就需要使用到&#x3D;&#x3D;@Qualifier&#x3D;&#x3D;来指定注入哪个名称的bean对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;bookDao1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Qualifier注解后的值就是需要注入的bean的名称。</p><p>&#x3D;&#x3D;注意:@Qualifier不能独立使用，必须和@Autowired一起使用&#x3D;&#x3D;</p><h4 id="3-4-4-注解详解（字段注入、构造方法注入、Setter方法注入）"><a href="#3-4-4-注解详解（字段注入、构造方法注入、Setter方法注入）" class="headerlink" title="* 3.4.4  注解详解（字段注入、构造方法注入、Setter方法注入）"></a>* 3.4.4  注解详解（字段注入、构造方法注入、Setter方法注入）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BookDao接口</span></span><br><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BookDaoImpl类</span></span><br><span class="line"><span class="keyword">package</span> dao.impl;</span><br><span class="line"><span class="keyword">import</span> dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Book Dao-《 》 save...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//BookDaoImpl1类</span></span><br><span class="line"><span class="keyword">package</span> dao.impl;</span><br><span class="line"><span class="keyword">import</span> dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository(&quot;bookDao1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl1</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Book Dao-《1》 save...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//BookDaoImpl2类</span></span><br><span class="line"><span class="keyword">package</span> dao.impl;</span><br><span class="line"><span class="keyword">import</span> dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository(&quot;bookDao2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl2</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Book Dao-《2》save...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1、字段注入"><a href="#1、字段注入" class="headerlink" title="1、字段注入"></a><strong>1、字段注入</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> service.ServiceBook;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(&quot;serviceBook1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceImpl1</span> <span class="keyword">implements</span> <span class="title class_">ServiceBook</span> &#123;</span><br><span class="line">    <span class="comment">//1、使用字段注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="comment">//@Qualifier(&quot;bookDao2&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="comment">/**1、若只有一个BookDao实现类，则可以不用起别名（id）<span class="doctag">@Autowired</span>会自己根据字段类型识别bean，然后注入</span></span><br><span class="line"><span class="comment">     * 2、若<span class="doctag">@Repository</span>(&quot;bookDao&quot;)，<span class="doctag">@Repository</span>(&quot;bookDao2&quot;)而字段是private BookDao bookDao;</span></span><br><span class="line"><span class="comment">     *    这时虽然有两个相同类型的bean，但他会选择字段和别名（id）相同的注入</span></span><br><span class="line"><span class="comment">     * 3、若<span class="doctag">@Repository</span>(&quot;bookDao1&quot;)，<span class="doctag">@Repository</span>(&quot;bookDao2&quot;)而字段private BookDao bookDao</span></span><br><span class="line"><span class="comment">     *    这时有两个相同类型的bean，所以会查找和字段相同的id注入，但是返现都不同这会报错。</span></span><br><span class="line"><span class="comment">     *    对于这种情况可以在<span class="doctag">@Autowired</span>下用注解<span class="doctag">@Qualifier</span>(&quot;bookDao2&quot;)这时会选择id=bookDao2的bean注入*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用字段注入&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2、构造方法注入"><a href="#2、构造方法注入" class="headerlink" title="2、构造方法注入"></a>2、构造方法注入</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> service.ServiceBook;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(&quot;serviceBook2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceImpl2</span> <span class="keyword">implements</span> <span class="title class_">ServiceBook</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceImpl2</span><span class="params">(<span class="meta">@Qualifier(&quot;bookDao2&quot;)</span> BookDao bookDao2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**1、若只有一个BookDao的实现类，可以用不起别名（id）</span></span><br><span class="line"><span class="comment">     *    <span class="doctag">@Autowired</span></span></span><br><span class="line"><span class="comment">     *    public ServiceImpl2(BookDao bookDao) &#123;</span></span><br><span class="line"><span class="comment">     *         this.bookDao = bookDao;</span></span><br><span class="line"><span class="comment">     *     &#125;</span></span><br><span class="line"><span class="comment">     * 2、若有多个相同类型的bean，<span class="doctag">@Repository</span>(&quot;bookDao&quot;)、<span class="doctag">@Repository</span>(&quot;bookDao1&quot;)。</span></span><br><span class="line"><span class="comment">     *    则会找和构造函数形参字段相同注入。</span></span><br><span class="line"><span class="comment">     *    <span class="doctag">@Autowired</span></span></span><br><span class="line"><span class="comment">     *     public ServiceImpl2(BookDao bookDao1) &#123;</span></span><br><span class="line"><span class="comment">     *         this.bookDao = bookDao1;</span></span><br><span class="line"><span class="comment">     *     &#125;</span></span><br><span class="line"><span class="comment">     *  3、若有多个相同的bean，<span class="doctag">@Repository</span>(&quot;bookDao1&quot;)、<span class="doctag">@Repository</span>(&quot;bookDao2&quot;)。</span></span><br><span class="line"><span class="comment">     *     若此时构造函数的形参是BookDao bookDao则会报错，因为按字段找不到相同的。</span></span><br><span class="line"><span class="comment">     *     此时要指定名称：</span></span><br><span class="line"><span class="comment">     *     <span class="doctag">@Autowired</span></span></span><br><span class="line"><span class="comment">     *     public ServiceImpl2(<span class="doctag">@Qualifier</span>(&quot;bookDao2&quot;) BookDao bookDao2) &#123;</span></span><br><span class="line"><span class="comment">     *         this.bookDao = bookDao2;</span></span><br><span class="line"><span class="comment">     *     &#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法输入&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3、Setter方法注入"><a href="#3、Setter方法注入" class="headerlink" title="3、Setter方法注入"></a>3、Setter方法注入</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> service.ServiceBook;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(&quot;serviceBook3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceImpl3</span> <span class="keyword">implements</span> <span class="title class_">ServiceBook</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(<span class="meta">@Qualifier(&quot;bookDao2&quot;)</span> BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**1、若只有一个BookDao的实现类，可以用不起别名（id）</span></span><br><span class="line"><span class="comment">     *    <span class="doctag">@Autowired</span></span></span><br><span class="line"><span class="comment">     *     public void setBookDao(BookDao bookDao) &#123;</span></span><br><span class="line"><span class="comment">     *         this.bookDao = bookDao;</span></span><br><span class="line"><span class="comment">     *     &#125;</span></span><br><span class="line"><span class="comment">     * 2、若有多个相同类型的bean，<span class="doctag">@Repository</span>(&quot;bookDao&quot;)、<span class="doctag">@Repository</span>(&quot;bookDao1&quot;)。</span></span><br><span class="line"><span class="comment">     *    则会找和构造函数形参字段相同注入。</span></span><br><span class="line"><span class="comment">     *    <span class="doctag">@Autowired</span></span></span><br><span class="line"><span class="comment">     *     public void setBookDao(BookDao1 bookDao1) &#123;</span></span><br><span class="line"><span class="comment">     *         this.bookDao = bookDao1;</span></span><br><span class="line"><span class="comment">     *     &#125;</span></span><br><span class="line"><span class="comment">     *  3、若有多个相同的bean，<span class="doctag">@Repository</span>(&quot;bookDao1&quot;)、<span class="doctag">@Repository</span>(&quot;bookDao2&quot;)。</span></span><br><span class="line"><span class="comment">     *     若此时Setter函数的形参是BookDao bookDao则会报错，因为按字段找不到相同的。</span></span><br><span class="line"><span class="comment">     *     此时要指定名称：</span></span><br><span class="line"><span class="comment">     *     <span class="doctag">@Autowired</span></span></span><br><span class="line"><span class="comment">     *     public void setBookDao(<span class="doctag">@Qualifier</span>(&quot;bookDao2&quot;) BookDao bookDao) &#123;</span></span><br><span class="line"><span class="comment">     *         this.bookDao = bookDao;</span></span><br><span class="line"><span class="comment">     *     &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Setter方法注入&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试程序</span></span><br><span class="line"><span class="keyword">import</span> config.SpringConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> service.ServiceBook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">ServiceBook</span> <span class="variable">service</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;serviceBook1&quot;</span>,ServiceBook.class);</span><br><span class="line">        service.save();</span><br><span class="line">        service=ctx.getBean(<span class="string">&quot;serviceBook2&quot;</span>,ServiceBook.class);</span><br><span class="line">        service.save();</span><br><span class="line">        service=ctx.getBean(<span class="string">&quot;serviceBook3&quot;</span>, ServiceBook.class);</span><br><span class="line">        service.save();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-5-简单数据类型注入"><a href="#3-4-5-简单数据类型注入" class="headerlink" title="3.4.5 简单数据类型注入"></a>3.4.5 简单数据类型注入</h4><p>引用类型看完，简单类型注入就比较容易懂了。简单类型注入的是基本数据类型或者字符串类型，下面在<code>BookDaoImpl</code>类中添加一个<code>name</code>属性，用其进行简单类型注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据类型换了，对应的注解也要跟着换，这次使用<code>@Value</code>注解，将值写入注解的参数中就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;itheima&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意数据格式要匹配，如将”abc”注入给int值，这样程序就会报错。</p><p>介绍完后，会有一种感觉就是这个注解好像没什么用，跟直接赋值是一个效果，还没有直接赋值简单，所以这个注解存在的意义是什么?</p><h4 id="3-4-5-注解读取properties配置文件"><a href="#3-4-5-注解读取properties配置文件" class="headerlink" title="3.4.5 注解读取properties配置文件"></a>3.4.5 注解读取properties配置文件</h4><p><code>@Value</code>一般会被用在从properties配置文件中读取内容进行使用，具体如何实现?</p><h5 id="步骤1：resource下准备properties文件"><a href="#步骤1：resource下准备properties文件" class="headerlink" title="步骤1：resource下准备properties文件"></a>步骤1：resource下准备properties文件</h5><p>jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name</span>=<span class="string">itheima888</span></span><br></pre></td></tr></table></figure><h5 id="步骤2-使用注解加载properties配置文件"><a href="#步骤2-使用注解加载properties配置文件" class="headerlink" title="步骤2: 使用注解加载properties配置文件"></a>步骤2: 使用注解加载properties配置文件</h5><p>在配置类上添加&#x3D;&#x3D;<code>@PropertySource</code>&#x3D;&#x3D;注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="步骤3：使用-Value读取配置文件中的内容"><a href="#步骤3：使用-Value读取配置文件中的内容" class="headerlink" title="步骤3：使用@Value读取配置文件中的内容"></a>步骤3：使用@Value读取配置文件中的内容</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤4:运行程序</p><p>运行App类，查看运行结果，说明配置文件中的内容已经被加载到</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172329822.png" alt="1630084683663"></p><p><strong>注意:</strong></p><ul><li><p>如果读取的properties配置文件有多个，可以使用<code>@PropertySource</code>的属性来指定多个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&#123;&quot;jdbc.properties&quot;,&quot;xxx.properties&quot;&#125;)</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>@PropertySource</code>注解属性中&#x3D;&#x3D;不支持使用通配符<code>*</code>&#x3D;&#x3D;,运行会报错</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&#123;&quot;*.properties&quot;&#125;)</span></span><br></pre></td></tr></table></figure></li><li><p><code>@PropertySource</code>注解属性中可以把&#x3D;&#x3D;<code>classpath:</code>&#x3D;&#x3D;加上,代表从当前项目的根路径找文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:jdbc.properties&quot;&#125;)</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="知识点1：-Autowired"><a href="#知识点1：-Autowired" class="headerlink" title="知识点1：@Autowired"></a>知识点1：@Autowired</h4><table><thead><tr><th>名称</th><th>@Autowired</th></tr></thead><tbody><tr><td>类型</td><td>属性注解  或  方法注解（了解）  或  方法形参注解（了解）</td></tr><tr><td>位置</td><td>属性定义上方  或  标准set方法上方  或  类set方法上方  或  方法形参前面</td></tr><tr><td>作用</td><td>为引用类型属性设置值</td></tr><tr><td>属性</td><td>required：true&#x2F;false，定义该属性是否允许为null</td></tr></tbody></table><h4 id="知识点2：-Qualifier"><a href="#知识点2：-Qualifier" class="headerlink" title="知识点2：@Qualifier"></a>知识点2：@Qualifier</h4><table><thead><tr><th>名称</th><th>@Qualifier</th></tr></thead><tbody><tr><td>类型</td><td>属性注解  或  方法注解（了解）</td></tr><tr><td>位置</td><td>属性定义上方  或  标准set方法上方  或  类set方法上方</td></tr><tr><td>作用</td><td>为引用类型属性指定注入的beanId</td></tr><tr><td>属性</td><td>value（默认）：设置注入的beanId</td></tr></tbody></table><h4 id="知识点3：-Value"><a href="#知识点3：-Value" class="headerlink" title="知识点3：@Value"></a>知识点3：@Value</h4><table><thead><tr><th>名称</th><th>@Value</th></tr></thead><tbody><tr><td>类型</td><td>属性注解  或  方法注解（了解）</td></tr><tr><td>位置</td><td>属性定义上方  或  标准set方法上方  或  类set方法上方</td></tr><tr><td>作用</td><td>为  基本数据类型  或  字符串类型  属性设置值</td></tr><tr><td>属性</td><td>value（默认）：要注入的属性值</td></tr></tbody></table><h4 id="知识点4：-PropertySource"><a href="#知识点4：-PropertySource" class="headerlink" title="知识点4：@PropertySource"></a>知识点4：@PropertySource</h4><table><thead><tr><th>名称</th><th>@PropertySource</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>类定义上方</td></tr><tr><td>作用</td><td>加载properties文件中的属性值</td></tr><tr><td>属性</td><td>value（默认）：设置加载的properties文件对应的文件名或文件名组成的数组</td></tr></tbody></table><h2 id="4、IOC-DI注解开发管理第三方bean"><a href="#4、IOC-DI注解开发管理第三方bean" class="headerlink" title="4、IOC&#x2F;DI注解开发管理第三方bean"></a>4、IOC&#x2F;DI注解开发管理第三方bean</h2><p>前面定义bean的时候都是在自己开发的类上面写个注解就完成了，但如果是第三方的类，这些类都是在jar包中，我们没有办法在类上面添加注解，这个时候该怎么办?</p><p>遇到上述问题，我们就需要有一种更加灵活的方式来定义bean,这种方式不能在原始代码上面书写注解，一样能定义bean,这就用到了一个全新的注解&#x3D;&#x3D;@Bean&#x3D;&#x3D;。</p><p>这个注解该如何使用呢?</p><p>咱们把之前使用配置方式管理的数据源使用注解再来一遍，通过这个案例来学习下@Bean的使用。</p><h3 id="4-1-环境准备"><a href="#4-1-环境准备" class="headerlink" title="4.1 环境准备"></a>4.1 环境准备</h3><p>学习@Bean注解之前先来准备环境:</p><ul><li><p>创建一个Maven项目</p></li><li><p>pom.xml添加Spring的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加一个配置类<code>SpringConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加BookDao、BookDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建运行类App</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终创建好的项目结构如下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172329841.png" alt="1630122466404"></p><h3 id="4-2-注解开发管理第三方bean"><a href="#4-2-注解开发管理第三方bean" class="headerlink" title="4.2 注解开发管理第三方bean"></a>4.2 注解开发管理第三方bean</h3><p>在上述环境中完成对<code>Druid</code>数据源的管理，具体的实现步骤为:</p><h4 id="步骤1-导入对应的jar包"><a href="#步骤1-导入对应的jar包" class="headerlink" title="步骤1:导入对应的jar包"></a>步骤1:导入对应的jar包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤2-在配置类中添加一个方法"><a href="#步骤2-在配置类中添加一个方法" class="headerlink" title="步骤2:在配置类中添加一个方法"></a>步骤2:在配置类中添加一个方法</h4><p>注意该方法的返回值就是要创建的Bean对象类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤3-在方法上添加-Bean注解"><a href="#步骤3-在方法上添加-Bean注解" class="headerlink" title="步骤3:在方法上添加@Bean注解"></a>步骤3:在方法上添加<code>@Bean</code>注解</h4><p>@Bean注解的作用是将方法的返回值制作为Spring管理的一个bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:不能使用<code>DataSource ds = new DruidDataSource()</code></strong></p><p>因为DataSource接口中没有对应的setter方法来设置属性。</p><h4 id="步骤4-从IOC容器中获取对象并打印"><a href="#步骤4-从IOC容器中获取对象并打印" class="headerlink" title="步骤4:从IOC容器中获取对象并打印"></a>步骤4:从IOC容器中获取对象并打印</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> ctx.getBean(DataSource.class);</span><br><span class="line">        System.out.println(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此使用@Bean来管理第三方bean的案例就已经完成。</p><p>如果有多个bean要被Spring管理，直接在配置类中多些几个方法，方法上添加@Bean注解即可。</p><h3 id="4-3-引入外部配置类"><a href="#4-3-引入外部配置类" class="headerlink" title="4.3 引入外部配置类"></a>4.3 引入外部配置类</h3><p>如果把所有的第三方bean都配置到Spring的配置类<code>SpringConfig</code>中，虽然可以，但是不利于代码阅读和分类管理，所有我们就想能不能按照类别将这些bean配置到不同的配置类中?</p><p>对于数据源的bean,我们新建一个<code>JdbcConfig</code>配置类，并把数据源配置到该类下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在的问题是，这个配置类如何能被Spring配置类加载到，并创建DataSource对象在IOC容器中?</p><p>针对这个问题，有两个解决方案:</p><h4 id="4-3-1-使用包扫描引入"><a href="#4-3-1-使用包扫描引入" class="headerlink" title="4.3.1 使用包扫描引入"></a>4.3.1 使用包扫描引入</h4><h5 id="步骤1-在Spring的配置类上添加包扫描"><a href="#步骤1-在Spring的配置类上添加包扫描" class="headerlink" title="步骤1:在Spring的配置类上添加包扫描"></a>步骤1:在Spring的配置类上添加包扫描</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.config&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2-在JdbcConfig上添加配置注解"><a href="#步骤2-在JdbcConfig上添加配置注解" class="headerlink" title="步骤2:在JdbcConfig上添加配置注解"></a>步骤2:在JdbcConfig上添加配置注解</h5><p>JdbcConfig类要放入到<code>com.itheima.config</code>包下，需要被Spring的配置类扫描到即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤3-运行程序-2"><a href="#步骤3-运行程序-2" class="headerlink" title="步骤3:运行程序"></a>步骤3:运行程序</h5><p>依然能获取到bean对象并打印控制台。</p><p>这种方式虽然能够扫描到，但是不能很快的知晓都引入了哪些配置类，所有这种方式不推荐使用。</p><h4 id="4-3-2-使用-Import引入"><a href="#4-3-2-使用-Import引入" class="headerlink" title="4.3.2 使用@Import引入"></a>4.3.2 使用<code>@Import</code>引入</h4><p>方案一实现起来有点小复杂，Spring早就想到了这一点，于是又给我们提供了第二种方案。</p><p>这种方案可以不用加<code>@Configuration</code>注解，但是必须在Spring配置类上使用<code>@Import</code>注解手动引入需要加载的配置类</p><h5 id="步骤1-去除JdbcConfig类上的注解"><a href="#步骤1-去除JdbcConfig类上的注解" class="headerlink" title="步骤1:去除JdbcConfig类上的注解"></a>步骤1:去除JdbcConfig类上的注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2-在Spring配置类中引入"><a href="#步骤2-在Spring配置类中引入" class="headerlink" title="步骤2:在Spring配置类中引入"></a>步骤2:在Spring配置类中引入</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@ComponentScan(&quot;com.itheima.config&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li><p>扫描注解可以移除</p></li><li><p><strong>@Import参数需要的是一个数组，可以引入多个配置类。</strong></p></li><li><p>@Import注解在配置类中只能写一次，下面的方式是&#x3D;&#x3D;不允许的&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@ComponentScan(&quot;com.itheima.config&quot;)</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="meta">@Import(Xxx.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="步骤3-运行程序-3"><a href="#步骤3-运行程序-3" class="headerlink" title="步骤3:运行程序"></a>步骤3:运行程序</h5><p>依然能获取到bean对象并打印控制台</p><h3 id="知识点1：-Bean"><a href="#知识点1：-Bean" class="headerlink" title="知识点1：@Bean"></a>知识点1：@Bean</h3><table><thead><tr><th>名称</th><th>@Bean</th></tr></thead><tbody><tr><td>类型</td><td>方法注解</td></tr><tr><td>位置</td><td>方法定义上方</td></tr><tr><td>作用</td><td>设置该方法的返回值作为spring管理的bean</td></tr><tr><td>属性</td><td>value（默认）：定义bean的id</td></tr></tbody></table><h3 id="知识点2：-Import"><a href="#知识点2：-Import" class="headerlink" title="知识点2：@Import"></a>知识点2：@Import</h3><table><thead><tr><th>名称</th><th>@Import</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>类定义上方</td></tr><tr><td>作用</td><td>导入配置类</td></tr><tr><td>属性</td><td>value（默认）：定义导入的配置类类名，<br/>当配置类有多个时使用数组格式一次性导入多个配置类</td></tr></tbody></table><h3 id="4-4-注解开发实现为第三方bean注入资源"><a href="#4-4-注解开发实现为第三方bean注入资源" class="headerlink" title="4.4 注解开发实现为第三方bean注入资源"></a>4.4 注解开发实现为第三方bean注入资源</h3><p>在使用@Bean创建bean对象的时候，如果方法在创建的过程中需要其他资源该怎么办?</p><p>这些资源会有两大类，分别是<code>简单数据类型</code> 和<code>引用数据类型</code>。</p><h4 id="4-4-1-简单数据类型"><a href="#4-4-1-简单数据类型" class="headerlink" title="4.4.1 简单数据类型"></a>4.4.1 简单数据类型</h4><h5 id="4-4-1-1-需求分析"><a href="#4-4-1-1-需求分析" class="headerlink" title="4.4.1.1 需求分析"></a>4.4.1.1 需求分析</h5><p>对于下面代码关于数据库的四要素不应该写死在代码中，应该是从properties配置文件中读取。如何来优化下面的代码?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-4-1-2-注入简单数据类型步骤"><a href="#4-4-1-2-注入简单数据类型步骤" class="headerlink" title="4.4.1.2 注入简单数据类型步骤"></a>4.4.1.2 注入简单数据类型步骤</h5><h6 id="步骤1-类中提供四个属性"><a href="#步骤1-类中提供四个属性" class="headerlink" title="步骤1:类中提供四个属性"></a>步骤1:类中提供四个属性</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="步骤2-使用-Value注解引入值"><a href="#步骤2-使用-Value注解引入值" class="headerlink" title="步骤2:使用@Value注解引入值"></a>步骤2:使用<code>@Value</code>注解引入值</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;com.mysql.jdbc.Driver&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;jdbc:mysql://localhost:3306/spring_db&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;root&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;password&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h6><p>现在的数据库连接四要素还是写在代码中，需要做的是将这些内容提</p><p>取到jdbc.properties配置文件，大家思考下该如何实现?</p><blockquote><p>1.resources目录下添加jdbc.properties</p><p>2.配置文件中提供四个键值对分别是数据库的四要素</p><p>3.使用@PropertySource加载jdbc.properties配置文件</p><p>4.修改@Value注解属性的值，将其修改为<code>$&#123;key&#125;</code>，key就是键值对中的键的值</p></blockquote><p>具体的实现就交由大家自行实现下。</p><h4 id="4-4-2-引用数据类型"><a href="#4-4-2-引用数据类型" class="headerlink" title="4.4.2 引用数据类型"></a>4.4.2 引用数据类型</h4><h5 id="4-4-2-1-需求分析"><a href="#4-4-2-1-需求分析" class="headerlink" title="4.4.2.1 需求分析"></a>4.4.2.1 需求分析</h5><p>假设在构建DataSource对象的时候，需要用到BookDao对象，该如何把BookDao对象注入进方法内让其使用呢?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-4-2-2-注入引用数据类型步骤"><a href="#4-4-2-2-注入引用数据类型步骤" class="headerlink" title="4.4.2.2 注入引用数据类型步骤"></a>4.4.2.2 注入引用数据类型步骤</h5><h6 id="步骤1-在SpringConfig中扫描BookDao"><a href="#步骤1-在SpringConfig中扫描BookDao" class="headerlink" title="步骤1:在SpringConfig中扫描BookDao"></a>步骤1:在SpringConfig中扫描BookDao</h6><p>扫描的目的是让Spring能管理到BookDao,也就是说要让IOC容器中有一个bookDao对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.dao&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="步骤2-在JdbcConfig类的方法上添加参数"><a href="#步骤2-在JdbcConfig类的方法上添加参数" class="headerlink" title="步骤2:在JdbcConfig类的方法上添加参数"></a>步骤2:在JdbcConfig类的方法上添加参数</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(BookDao bookDao)</span>&#123;</span><br><span class="line">    System.out.println(bookDao);</span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    ds.setDriverClassName(driver);</span><br><span class="line">    ds.setUrl(url);</span><br><span class="line">    ds.setUsername(userName);</span><br><span class="line">    ds.setPassword(password);</span><br><span class="line">    <span class="keyword">return</span> ds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;引用类型注入只需要为bean定义方法设置形参即可，容器会根据类型自动装配对象。&#x3D;&#x3D;</p><h6 id="步骤3-运行程序-4"><a href="#步骤3-运行程序-4" class="headerlink" title="步骤3:运行程序"></a>步骤3:运行程序</h6><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172329787.png" alt="1630125475609"></p><h2 id="5、注解开发总结"><a href="#5、注解开发总结" class="headerlink" title="5、注解开发总结"></a>5、注解开发总结</h2><p>前面我们已经完成了XML配置和注解的开发实现，至于两者之间的差异，咱们放在一块去对比回顾下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172329651.png" alt="1630134786448"></p><h2 id="6、Spring整合"><a href="#6、Spring整合" class="headerlink" title="6、Spring整合"></a>6、Spring整合</h2><p>课程学习到这里，已经对Spring有一个简单的认识了，Spring有一个容器，叫做IoC容器，里面保存bean。在进行企业级开发的时候，其实除了将自己写的类让Spring管理之外，还有一部分重要的工作就是使用第三方的技术。前面已经讲了如何管理第三方bean了，下面结合IoC和DI，整合2个常用技术，进一步加深对Spring的使用理解。</p><h3 id="6-1-Spring整合Mybatis思路分析"><a href="#6-1-Spring整合Mybatis思路分析" class="headerlink" title="6.1 Spring整合Mybatis思路分析"></a>6.1 Spring整合Mybatis思路分析</h3><h4 id="6-1-1-环境准备"><a href="#6-1-1-环境准备" class="headerlink" title="6.1.1 环境准备"></a>6.1.1 环境准备</h4><p>在准备环境的过程中，我们也来回顾下Mybatis开发的相关内容:</p><h5 id="步骤1-准备数据库表"><a href="#步骤1-准备数据库表" class="headerlink" title="步骤1:准备数据库表"></a>步骤1:准备数据库表</h5><p>Mybatis是来操作数据库表，所以先创建一个数据库及表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database spring_db <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line">use spring_db;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_account(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">35</span>),</span><br><span class="line">    money <span class="keyword">double</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="步骤2-创建项目导入jar包"><a href="#步骤2-创建项目导入jar包" class="headerlink" title="步骤2:创建项目导入jar包"></a>步骤2:创建项目导入jar包</h5><p>项目的pom.xml添加相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤3-根据表创建模型类"><a href="#步骤3-根据表创建模型类" class="headerlink" title="步骤3:根据表创建模型类"></a>步骤3:根据表创建模型类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"><span class="comment">//setter...getter...toString...方法略    </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Serializable 是一个标记接口，用于指示类的对象可以被序列化。序列化是指将对象转换为字节流，以便可以在网络上传输或者存储到文件中，或者以其他方式在不同的 Java 虚拟机之间进行通信。被标记为 Serializable 的类的对象可以通过 Java 序列化机制进行序列化和反序列化。</span></span><br></pre></td></tr></table></figure><h5 id="步骤4-创建Dao接口"><a href="#步骤4-创建Dao接口" class="headerlink" title="步骤4:创建Dao接口"></a>步骤4:创建Dao接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_account(name,money)values(#&#123;name&#125;,#&#123;money&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from tbl_account where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_account set name = #&#123;name&#125; , money = #&#123;money&#125; where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_account&quot;)</span></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_account where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    Account <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤5-创建Service接口和实现类"><a href="#步骤5-创建Service接口和实现类" class="headerlink" title="步骤5:创建Service接口和实现类"></a>步骤5:创建Service接口和实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Account <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span> &#123;</span><br><span class="line">        accountDao.save(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>&#123;</span><br><span class="line">        accountDao.update(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        accountDao.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Account <span class="title function_">findById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤6-添加jdbc-properties文件"><a href="#步骤6-添加jdbc-properties文件" class="headerlink" title="步骤6:添加jdbc.properties文件"></a>步骤6:添加jdbc.properties文件</h5><p>resources目录下添加，用于配置数据库连接四要素</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring_db?useSSL=false</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p>useSSL:关闭MySQL的SSL连接</p><h5 id="步骤7-添加Mybatis核心配置文件"><a href="#步骤7-添加Mybatis核心配置文件" class="headerlink" title="步骤7:添加Mybatis核心配置文件"></a>步骤7:添加Mybatis核心配置文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--读取外部properties配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--别名扫描的包路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.domain&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--映射文件扫描包路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤8-编写应用程序"><a href="#步骤8-编写应用程序" class="headerlink" title="步骤8:编写应用程序"></a>步骤8:编写应用程序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建SqlSessionFactoryBuilder对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">// 2. 加载SqlMapConfig.xml配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml.bak&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 创建SqlSessionFactory对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(inputStream);</span><br><span class="line">        <span class="comment">// 4. 获取SqlSession</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// 5. 执行SqlSession对象执行查询，获取结果User</span></span><br><span class="line">        <span class="type">AccountDao</span> <span class="variable">accountDao</span> <span class="operator">=</span> sqlSession.getMapper(AccountDao.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Account</span> <span class="variable">ac</span> <span class="operator">=</span> accountDao.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(ac);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤9-运行程序"><a href="#步骤9-运行程序" class="headerlink" title="步骤9:运行程序"></a>步骤9:运行程序</h5><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172329691.png" alt="1630136904087"></p><h4 id="6-1-2-整合思路分析"><a href="#6-1-2-整合思路分析" class="headerlink" title="6.1.2 整合思路分析"></a>6.1.2 整合思路分析</h4><p>Mybatis的基础环境我们已经准备好了，接下来就得分析下在上述的内容中，哪些对象可以交给Spring来管理?</p><ul><li><p>Mybatis程序核心对象分析</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172329155.png" alt="1630137189480"></p><p>从图中可以获取到，真正需要交给Spring管理的是&#x3D;&#x3D;SqlSessionFactory&#x3D;&#x3D;</p></li><li><p>整合Mybatis，就是将Mybatis用到的内容交给Spring管理，分析下配置文件</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172330218.png" alt="1630137388717"></p><p><strong>说明:</strong></p><ul><li>第一行读取外部properties配置文件，Spring有提供具体的解决方案<code>@PropertySource</code>,需要交给Spring</li><li>第二行起别名包扫描，为SqlSessionFactory服务的，需要交给Spring</li><li>第三行主要用于做连接池，Spring之前我们已经整合了Druid连接池，这块也需要交给Spring</li><li>前面三行一起都是为了创建SqlSession对象用的，那么用Spring管理SqlSession对象吗?回忆下SqlSession是由SqlSessionFactory创建出来的，所以只需要将SqlSessionFactory交给Spring管理即可。</li><li>第四行是Mapper接口和映射文件[如果使用注解就没有该映射文件]，这个是在获取到SqlSession以后执行具体操作的时候用，所以它和SqlSessionFactory创建的时机都不在同一个时间，可能需要单独管理。</li></ul></li></ul><h3 id="6-2-Spring整合Mybatis"><a href="#6-2-Spring整合Mybatis" class="headerlink" title="6.2 Spring整合Mybatis"></a>6.2 Spring整合Mybatis</h3><p>前面我们已经分析了Spring与Mybatis的整合，大体需要做两件事，</p><p>第一件事是:Spring要管理MyBatis中的SqlSessionFactory</p><p>第二件事是:Spring要管理Mapper接口的扫描</p><p>具体该如何实现，具体的步骤为:</p><h4 id="步骤1-项目中导入整合需要的jar包"><a href="#步骤1-项目中导入整合需要的jar包" class="headerlink" title="步骤1:项目中导入整合需要的jar包"></a>步骤1:项目中导入整合需要的jar包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring操作数据库需要该jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Spring与Mybatis整合的jar包</span></span><br><span class="line"><span class="comment">这个jar包mybatis在前面，是Mybatis提供的</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤2-创建Spring的主配置类"><a href="#步骤2-创建Spring的主配置类" class="headerlink" title="步骤2:创建Spring的主配置类"></a>步骤2:创建Spring的主配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置类注解</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//包扫描，主要扫描的是项目中的AccountServiceImpl类</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="步骤3-创建数据源的配置类"><a href="#步骤3-创建数据源的配置类" class="headerlink" title="步骤3:创建数据源的配置类"></a>步骤3:创建数据源的配置类</h4><p>在配置类中完成数据源的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤4-主配置类中读properties并引入数据源配置类"><a href="#步骤4-主配置类中读properties并引入数据源配置类" class="headerlink" title="步骤4:主配置类中读properties并引入数据源配置类"></a>步骤4:主配置类中读properties并引入数据源配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="步骤5-创建Mybatis配置类并配置SqlSessionFactory"><a href="#步骤5-创建Mybatis配置类并配置SqlSessionFactory" class="headerlink" title="步骤5:创建Mybatis配置类并配置SqlSessionFactory"></a>步骤5:创建Mybatis配置类并配置SqlSessionFactory</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line">    <span class="comment">//定义bean，SqlSessionFactoryBean，用于产生SqlSessionFactory对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        <span class="comment">//设置模型类的别名扫描</span></span><br><span class="line">        ssfb.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">        <span class="comment">//设置数据源</span></span><br><span class="line">        ssfb.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ssfb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义bean，返回MapperScannerConfigurer对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li><p>使用SqlSessionFactoryBean封装SqlSessionFactory需要的环境信息</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172330776.png" alt="1630138835057"></p><ul><li>SqlSessionFactoryBean是前面我们讲解FactoryBean的一个子类，在该类中将SqlSessionFactory的创建进行了封装，简化对象的创建，我们只需要将其需要的内容设置即可。</li><li>方法中有一个参数为dataSource,当前Spring容器中已经创建了Druid数据源，类型刚好是DataSource类型，此时在初始化SqlSessionFactoryBean这个对象的时候，发现需要使用DataSource对象，而容器中刚好有这么一个对象，就自动加载了DruidDataSource对象。</li></ul></li><li><p>使用MapperScannerConfigurer加载Dao接口，创建代理对象保存到IOC容器中</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172330424.png" alt="1630138916939"></p><ul><li>这个MapperScannerConfigurer对象也是MyBatis提供的专用于整合的jar包中的类，用来处理原始配置文件中的mappers相关配置，加载数据层的Mapper接口类</li><li>MapperScannerConfigurer有一个核心属性basePackage，就是用来设置所扫描的包路径</li></ul></li></ul><h4 id="步骤6-主配置类中引入Mybatis配置类"><a href="#步骤6-主配置类中引入Mybatis配置类" class="headerlink" title="步骤6:主配置类中引入Mybatis配置类"></a>步骤6:主配置类中引入Mybatis配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤7-编写运行类"><a href="#步骤7-编写运行类" class="headerlink" title="步骤7:编写运行类"></a>步骤7:编写运行类</h4><p>在运行类中，从IOC容器中获取Service对象，调用方法获取结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">AccountService</span> <span class="variable">accountService</span> <span class="operator">=</span> ctx.getBean(AccountService.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Account</span> <span class="variable">ac</span> <span class="operator">=</span> accountService.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(ac);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="步骤8-运行程序"><a href="#步骤8-运行程序" class="headerlink" title="步骤8:运行程序"></a>步骤8:运行程序</h4><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172330397.png" alt="1630139036627"></p><p>支持Spring与Mybatis的整合就已经完成了，其中主要用到的两个类分别是:</p><ul><li>&#x3D;&#x3D;SqlSessionFactoryBean&#x3D;&#x3D;</li><li>&#x3D;&#x3D;MapperScannerConfigurer&#x3D;&#x3D;</li></ul><h3 id="6-3-Spring整合Junit"><a href="#6-3-Spring整合Junit" class="headerlink" title="6.3 Spring整合Junit"></a>6.3 Spring整合Junit</h3><p>整合Junit与整合Druid和MyBatis差异比较大，为什么呢？Junit是一个搞单元测试用的工具，它不是我们程序的主体，也不会参加最终程序的运行，从作用上来说就和之前的东西不一样，它不是做功能的，看做是一个辅助工具就可以了。</p><h4 id="6-3-1-环境准备"><a href="#6-3-1-环境准备" class="headerlink" title="6.3.1 环境准备"></a>6.3.1 环境准备</h4><p>这块环境，大家可以直接使用Spring与Mybatis整合的环境即可。当然也可以重新创建一个，因为内容是一模一样，所以我们直接来看下项目结构即可:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172330872.png" alt="1630139720273"></p><h4 id="6-3-2-整合Junit步骤"><a href="#6-3-2-整合Junit步骤" class="headerlink" title="6.3.2 整合Junit步骤"></a>6.3.2 整合Junit步骤</h4><p>在上述环境的基础上，我们来对Junit进行整合。</p><h5 id="步骤1-引入依赖"><a href="#步骤1-引入依赖" class="headerlink" title="步骤1:引入依赖"></a>步骤1:引入依赖</h5><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤2-编写测试类"><a href="#步骤2-编写测试类" class="headerlink" title="步骤2:编写测试类"></a>步骤2:编写测试类</h5><p>在test\java下创建一个AccountServiceTest,这个名字任意</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置类运行器</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//设置Spring环境对应的配置类</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfiguration.class&#125;)</span> <span class="comment">//加载配置类</span></span><br><span class="line"><span class="comment">//@ContextConfiguration(locations=&#123;&quot;classpath:applicationContext.xml&quot;&#125;)//加载配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceTest</span> &#123;</span><br><span class="line">    <span class="comment">//支持自动装配注入bean</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindById</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(accountService.findById(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(accountService.findAll());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li>单元测试，如果测试的是注解配置类，则使用<code>@ContextConfiguration(classes = 配置类.class)</code></li><li>单元测试，如果测试的是配置文件，则使用<code>@ContextConfiguration(locations=&#123;配置文件名,...&#125;)</code></li><li>Junit运行后是基于Spring环境运行的，所以Spring提供了一个专用的类运行器，这个务必要设置，这个类运行器就在Spring的测试专用包中提供的，导入的坐标就是这个东西<code>SpringJUnit4ClassRunner</code></li><li>上面两个配置都是固定格式，当需要测试哪个bean时，使用自动装配加载对应的对象，下面的工作就和以前做Junit单元测试完全一样了</li></ul><h4 id="知识点1：-RunWith"><a href="#知识点1：-RunWith" class="headerlink" title="知识点1：@RunWith"></a>知识点1：@RunWith</h4><table><thead><tr><th>名称</th><th>@RunWith</th></tr></thead><tbody><tr><td>类型</td><td>测试类注解</td></tr><tr><td>位置</td><td>测试类定义上方</td></tr><tr><td>作用</td><td>设置JUnit运行器</td></tr><tr><td>属性</td><td>value（默认）：运行所使用的运行期</td></tr></tbody></table><h4 id="知识点2：-ContextConfiguration"><a href="#知识点2：-ContextConfiguration" class="headerlink" title="知识点2：@ContextConfiguration"></a>知识点2：@ContextConfiguration</h4><table><thead><tr><th>名称</th><th>@ContextConfiguration</th></tr></thead><tbody><tr><td>类型</td><td>测试类注解</td></tr><tr><td>位置</td><td>测试类定义上方</td></tr><tr><td>作用</td><td>设置JUnit加载的Spring核心配置</td></tr><tr><td>属性</td><td>classes：核心配置类，可以使用数组的格式设定加载多个配置类<br/>locations:配置文件，可以使用数组的格式设定加载多个配置文件名称</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringIOC&amp;DI(XML)</title>
      <link href="/2024/05/17/Spring/SpringIOC-DI-XML/"/>
      <url>/2024/05/17/Spring/SpringIOC-DI-XML/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><p>#SpringIOC&amp;DI（XML）</p><p><strong>学习目标</strong></p><blockquote><ul><li>掌握Spring相关概念</li><li>完成IOC&#x2F;DI的入门案例编写</li><li>掌握IOC的相关配置与使用</li><li>掌握DI的相关配置与使用</li></ul></blockquote><h2 id="1、Spring介绍"><a href="#1、Spring介绍" class="headerlink" title="1、Spring介绍"></a>1、Spring介绍</h2><p>对于一门新技术，我们需要从<code>为什么要学</code>、<code>学什么</code>以及<code>怎么学</code>这三个方向入手来学习。那对于Spring来说:</p><h3 id="1-1-为什么要学"><a href="#1-1-为什么要学" class="headerlink" title="1.1 为什么要学?"></a>1.1 为什么要学?</h3><ul><li><p>从使用和占有率看</p><ul><li><p>Spring在市场的占有率与使用率高</p></li><li><p>Spring在企业的技术选型命中率高</p></li><li><p>所以说,Spring技术是JavaEE开发必备技能，企业开发技术选型命中率&gt;&#x3D;&#x3D;90%&#x3D;&#x3D;</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172258964.png" alt="image-20210729171139088"></p><p><strong>说明</strong>:对于未使用Spring的项目一般都是些比较老的项目，大多都处于维护阶段。</p></li></ul></li><li><p>从专业角度看</p><ul><li>随着时代发展，软件规模与功能都呈几何式增长，开发难度也在不断递增，该如何解决?<ul><li>Spring可以&#x3D;&#x3D;简化开发&#x3D;&#x3D;，降低企业级开发的复杂性，使开发变得更简单快捷</li></ul></li><li>随着项目规模与功能的增长,遇到的问题就会增多，为了解决问题会引入更多的框架，这些框架如何协调工作?<ul><li>Spring可以&#x3D;&#x3D;框架整合&#x3D;&#x3D;，高效整合其他技术，提高企业级应用开发与运行效率</li></ul></li></ul><p>综上所述，&#x3D;&#x3D;Spring是一款非常优秀而且功能强大的框架，不仅要学，而且还要学好。&#x3D;&#x3D;</p></li></ul><h3 id="1-2-学什么"><a href="#1-2-学什么" class="headerlink" title="1.2 学什么?"></a>1.2 学什么?</h3><p>从上面的介绍中，我们可以看到Spring框架主要的优势是在<code>简化开发</code>和<code>框架整合</code>上，至于如何实现就是咱们要学习Spring框架的主要内容:</p><ul><li><p>简化开发: Spring框架中提供了两个大的核心技术，分别是:</p><ul><li>&#x3D;&#x3D;IOC&#x3D;&#x3D;</li><li>&#x3D;&#x3D;AOP&#x3D;&#x3D;<ul><li>&#x3D;&#x3D;事务处理&#x3D;&#x3D;</li></ul></li></ul><p> 1.Spring的简化操作都是基于这两块内容,所以这也是Spring学习中最为重要的两个知识点。</p><p> 2.事务处理属于Spring中AOP的具体应用，可以简化项目中的事务管理，也是Spring技术中的一大亮点。</p></li><li><p>框架整合: Spring在框架整合这块已经做到了极致，它可以整合市面上几乎所有主流框架，比如:</p><ul><li>&#x3D;&#x3D;MyBatis&#x3D;&#x3D;</li><li>MyBatis-plus</li><li>Struts</li><li>Struts2</li><li>Hibernate</li><li>……</li></ul><p>这些框架中，我们目前只学习了MyBatis，所以在Spring框架的学习中，主要是学习如何整合MyBatis。</p><p>综上所述，对于Spring的学习，主要学习四块内容:</p><p>&#x3D;&#x3D;(1)IOC,(2)整合Mybatis(IOC的具体应用)，(3)AOP,(4)声明式事务(AOP的具体应用)&#x3D;&#x3D;</p></li></ul><h3 id="1-3-怎么学"><a href="#1-3-怎么学" class="headerlink" title="1.3 怎么学?"></a>1.3 怎么学?</h3><ul><li>学习Spring框架设计思想<ul><li>对于Spring来说，它能迅速占领全球市场，不只是说它的某个功能比较强大，更重要是在它的<code>思想</code>上。</li></ul></li><li>学习基础操作，思考操作与思想间的联系<ul><li>掌握了Spring的设计思想，然后就需要通过一些基础操作来思考操作与思想之间的关联关系</li></ul></li><li>学习案例，熟练应用操作的同时，体会思想<ul><li>会了基础操作后，就需要通过大量案例来熟练掌握框架的具体应用，加深对设计思想的理解。</li></ul></li></ul><p>介绍完<code>为什么要学</code>、<code>学什么</code>和<code>怎么学</code>Spring框架后，大家需要重点掌握的是:</p><ul><li>Spring很优秀，需要认真重点的学习</li><li>Spring的学习主线是IOC、AOP、声明式事务和整合MyBais</li></ul><p>接下来，咱们就开始进入Spring框架的学习。</p><h2 id="2、Spring相关概念"><a href="#2、Spring相关概念" class="headerlink" title="2、Spring相关概念"></a>2、Spring相关概念</h2><h3 id="2-1-初识Spring"><a href="#2-1-初识Spring" class="headerlink" title="2.1 初识Spring"></a>2.1 初识Spring</h3><p>在这一节，主要通过以下两个点来了解下Spring:</p><h4 id="2-1-1-Spring家族"><a href="#2-1-1-Spring家族" class="headerlink" title="2.1.1  Spring家族"></a>2.1.1  Spring家族</h4><ul><li><p>官网：<a href="https://spring.io，从官网我们可以大概了解到：">https://spring.io，从官网我们可以大概了解到：</a></p><ul><li>Spring能做什么:用以开发web、微服务以及分布式系统等,光这三块就已经占了JavaEE开发的九成多。</li><li>Spring并不是单一的一个技术，而是一个大家族，可以从官网的<code>Projects</code>中查看其包含的所有技术。</li></ul></li><li><p>Spring发展到今天已经形成了一种开发的生态圈,Spring提供了若干个项目,每个项目用于完成特定的功能。</p><ul><li><p>Spring已形成了完整的生态圈，也就是说我们可以完全使用Spring技术完成整个项目的构建、设计与开发。</p></li><li><p>Spring有若干个项目，可以根据需要自行选择，把这些个项目组合起来，起了一个名称叫&#x3D;&#x3D;全家桶&#x3D;&#x3D;，如下图所示</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172259202.png" alt="image-20210729171850181"></p><p><strong>说明:</strong></p><p>图中的图标都代表什么含义，可以进入<code>https://spring.io/projects</code>网站进行对比查看。</p><p>这些技术并不是所有的都需要学习，额外需要重点关注<code>Spring Framework</code>、<code>SpringBoot</code>和<code>SpringCloud</code>:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172259408.png" alt="1629714811435"></p><ul><li>Spring Framework:Spring框架，是Spring中最早最核心的技术，也是所有其他技术的基础。</li><li>SpringBoot:Spring是来简化开发，而SpringBoot是来帮助Spring在简化的基础上能更快速进行开发。</li><li>SpringCloud:这个是用来做分布式之微服务架构的相关开发。</li></ul><p>除了上面的这三个技术外，还有很多其他的技术，也比较流行，如SpringData,SpringSecurity等，这些都可以被应用在我们的项目中。我们今天所学习的Spring其实指的是&#x3D;&#x3D;Spring Framework&#x3D;&#x3D;。</p></li></ul></li></ul><h4 id="2-1-2-了解Spring发展史"><a href="#2-1-2-了解Spring发展史" class="headerlink" title="2.1.2 了解Spring发展史"></a>2.1.2 了解Spring发展史</h4><p> 接下来我们介绍下Spring Framework这个技术是如何来的呢?</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172259000.png" alt="image-20210729171926576"></p><p>Spring发展史</p><ul><li>IBM(IT公司-国际商业机器公司)在1997年提出了EJB思想,早期的JAVAEE开发大都基于该思想。</li><li>Rod Johnson(Java和J2EE开发领域的专家)在2002年出版的<code>Expert One-on-One J2EE Design and Development</code>,书中有阐述在开发中使用EJB该如何做。</li><li>Rod Johnson在2004年出版的<code>Expert One-on-One J2EE Development without EJB</code>,书中提出了比EJB思想更高效的实现方案，并且在同年将方案进行了具体的落地实现，这个实现就是Spring1.0。</li><li>随着时间推移，版本不断更新维护，目前最新的是Spring5<ul><li>Spring1.0是纯配置文件开发</li><li>Spring2.0为了简化开发引入了注解开发，此时是配置文件加注解的开发方式</li><li>Spring3.0已经可以进行纯注解开发，使开发效率大幅提升，我们的课程会以注解开发为主</li><li>Spring4.0根据JDK的版本升级对个别API进行了调整</li><li>Spring5.0已经全面支持JDK8，现在Spring最新的是5系列所以建议大家把JDK安装成1.8版</li></ul></li></ul><p>本节介绍了Spring家族与Spring的发展史，需要大家重点掌握的是:</p><ul><li>今天所学的Spring其实是Spring家族中的Spring Framework</li><li>Spring Framework是Spring家族中其他框架的底层基础，学好Spring可以为其他Spring框架的学习打好基础</li></ul><h3 id="2-2-Spring系统架构"><a href="#2-2-Spring系统架构" class="headerlink" title="2.2 Spring系统架构"></a>2.2 Spring系统架构</h3><p>前面我们说spring指的是Spring Framework,那么它其中都包含哪些内容以及我们该如何学习这个框架?</p><p>针对这些问题，我们将从<code>系统架构图</code>和<code>课程学习路线</code>来进行说明:</p><h4 id="2-2-1-系统架构图"><a href="#2-2-1-系统架构图" class="headerlink" title="2.2.1 系统架构图"></a>2.2.1 系统架构图</h4><ul><li><p>Spring Framework是Spring生态圈中最基础的项目，是其他项目的根基。</p></li><li><p>Spring Framework的发展也经历了很多版本的变更，每个版本都有相应的调整</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172259888.png" alt="image-20210729172153796"></p></li><li><p>Spring Framework的5版本目前没有最新的架构图，而最新的是4版本，所以接下来主要研究的是4的架构图</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172259072.png" alt="1629720945720"></p><p>(1)核心层</p><ul><li>Core Container:核心容器，这个模块是Spring最核心的模块，其他的都需要依赖该模块</li></ul><p>(2)AOP层</p><ul><li>AOP:面向切面编程，它依赖核心层容器，目的是&#x3D;&#x3D;在不改变原有代码的前提下对其进行功能增强&#x3D;&#x3D;</li><li>Aspects:AOP是思想,Aspects是对AOP思想的具体实现</li></ul><p>(3)数据层</p><ul><li>Data Access:数据访问，Spring全家桶中有对数据访问的具体实现技术</li><li>Data Integration:数据集成，Spring支持整合其他的数据层解决方案，比如Mybatis</li><li>Transactions:事务，Spring中事务管理是Spring AOP的一个具体实现，也是后期学习的重点内容</li></ul><p>(4)Web层</p><ul><li>这一层的内容将在SpringMVC框架具体学习</li></ul><p>(5)Test层</p><ul><li>Spring主要整合了Junit来完成单元测试和集成测试</li></ul></li></ul><h4 id="2-2-2-课程学习路线"><a href="#2-2-2-课程学习路线" class="headerlink" title="2.2.2 课程学习路线"></a>2.2.2 课程学习路线</h4><p>介绍完Spring的体系结构后，从中我们可以得出对于Spring的学习主要包含四部分内容，分别是:</p><ul><li>&#x3D;&#x3D;Spring的IOC&#x2F;DI&#x3D;&#x3D;</li><li>&#x3D;&#x3D;Spring的AOP&#x3D;&#x3D;</li><li>&#x3D;&#x3D;AOP的具体应用,事务管理&#x3D;&#x3D;</li><li>&#x3D;&#x3D;IOC&#x2F;DI的具体应用,整合Mybatis&#x3D;&#x3D;</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172259617.png" alt="1629722300996"></p><p>对于这节的内容，大家重点要记住的是Spring需要学习的四部分内容。接下来就从第一部分开始学起。</p><h3 id="2-3-Spring核心概念"><a href="#2-3-Spring核心概念" class="headerlink" title="2.3 Spring核心概念"></a>2.3 Spring核心概念</h3><p>在Spring核心概念这部分内容中主要包含<code>IOC/DI</code>、<code>IOC容器</code>和<code>Bean</code>,那么问题就来了，这些都是什么呢?</p><h4 id="2-3-1-目前项目中的问题"><a href="#2-3-1-目前项目中的问题" class="headerlink" title="2.3.1 目前项目中的问题"></a>2.3.1 目前项目中的问题</h4><p>要想解答这个问题，就需要先分析下目前咱们代码在编写过程中遇到的问题:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172300556.png" alt="1629723232339"></p><p>(1)业务层需要调用数据层的方法，就需要在业务层new数据层的对象</p><p>(2)如果数据层的实现类发生变化，那么业务层的代码也需要跟着改变，发生变更后，都需要进行编译打包和重部署</p><p>(3)所以，现在代码在编写的过程中存在的问题是：&#x3D;&#x3D;耦合度偏高&#x3D;&#x3D;</p><p>针对这个问题，该如何解决呢?</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172300426.png" alt="1629724206002"></p><p>我们就想，如果能把框中的内容给去掉，不就可以降低依赖了么，但是又会引入新的问题，去掉以后程序能运行么?</p><p>答案肯定是不行，因为bookDao没有赋值为Null，强行运行就会出空指针异常。</p><p>所以现在的问题就是，业务层不想new对象，运行的时候又需要这个对象，该咋办呢?</p><p>针对这个问题，Spring就提出了一个解决方案:</p><ul><li>使用对象时，在程序中不要主动使用new产生对象，转换为由&#x3D;&#x3D;外部&#x3D;&#x3D;提供对象</li></ul><p>这种实现思就是Spring的一个核心概念</p><h4 id="2-3-2-IOC、IOC容器、Bean、DI"><a href="#2-3-2-IOC、IOC容器、Bean、DI" class="headerlink" title="2.3.2 IOC、IOC容器、Bean、DI"></a>2.3.2 IOC、IOC容器、Bean、DI</h4><ol><li>&#x3D;&#x3D;IOC（Inversion of Control）控制反转&#x3D;&#x3D;</li></ol><p>(1)什么是控制反转呢？</p><ul><li>使用对象时，由主动new产生对象转换为由&#x3D;&#x3D;外部&#x3D;&#x3D;提供对象，此过程中对象创建控制权由程序转移到外部，此思想称为控制反转。<ul><li>业务层要用数据层的类对象，以前是自己<code>new</code>的</li><li>现在自己不new了，交给<code>别人[外部]</code>来创建对象</li><li><code>别人[外部]</code>就反转控制了数据层对象的创建权</li><li>这种思想就是控制反转</li><li>别人[外部]指定是什么呢?继续往下学</li></ul></li></ul><p>(2)Spring和IOC之间的关系是什么呢?</p><ul><li>Spring技术对IOC思想进行了实现</li><li>Spring提供了一个容器，称为&#x3D;&#x3D;IOC容器&#x3D;&#x3D;，用来充当IOC思想中的”外部”</li><li>IOC思想中的<code>别人[外部]</code>指的就是Spring的IOC容器</li></ul><p>(3)IOC容器的作用以及内部存放的是什么?</p><ul><li>IOC容器负责对象的创建、初始化等一系列工作，其中包含了数据层和业务层的类对象</li><li>被创建或被管理的对象在IOC容器中统称为&#x3D;&#x3D;Bean&#x3D;&#x3D;</li><li>IOC容器中放的就是一个个的Bean对象</li></ul><p>(4)当IOC容器中创建好service和dao对象后，程序能正确执行么?</p><ul><li>不行，因为service运行需要依赖dao对象</li><li>IOC容器中虽然有service和dao对象</li><li>但是service对象和dao对象没有任何关系</li><li>需要把dao对象交给service,也就是说要绑定service和dao对象之间的关系</li></ul><p>像这种在容器中建立对象与对象之间的绑定关系就要用到DI:</p><ol start="2"><li>&#x3D;&#x3D;DI（Dependency Injection）依赖注入&#x3D;&#x3D;</li></ol><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172300531.png" alt="1629735078619"></p><p>(1)什么是依赖注入呢?</p><ul><li>在容器中建立bean与bean之间的依赖关系的整个过程，称为依赖注入<ul><li>业务层要用数据层的类对象，以前是自己<code>new</code>的</li><li>现在自己不new了，靠<code>别人[外部其实指的就是IOC容器]</code>来给注入进来</li><li>这种思想就是依赖注入</li></ul></li></ul><p>(2)IOC容器中哪些bean之间要建立依赖关系呢?</p><ul><li>这个需要程序员根据业务需求提前建立好关系，如业务层需要依赖数据层，service就要和dao建立依赖关系</li></ul><p>介绍完Spring的IOC和DI的概念后，我们会发现这两个概念的最终目标就是:&#x3D;&#x3D;充分解耦&#x3D;&#x3D;，具体实现靠:</p><ul><li>使用IOC容器管理bean（IOC)</li><li>在IOC容器内将有依赖关系的bean进行关系绑定（DI）</li><li>最终结果为:使用对象时不仅可以直接从IOC容器中获取，并且获取到的bean已经绑定了所有的依赖关系.</li></ul><h4 id="2-3-3-核心概念小结"><a href="#2-3-3-核心概念小结" class="headerlink" title="2.3.3 核心概念小结"></a>2.3.3 核心概念小结</h4><p>这节比较重要，重点要理解<code>什么是IOC/DI思想</code>、<code>什么是IOC容器</code>和<code>什么是Bean</code>：</p><p>(1)什么IOC&#x2F;DI思想?</p><ul><li>IOC:控制反转，控制反转的是对象的创建权</li><li>DI:依赖注入，绑定对象与对象之间的依赖关系</li></ul><p>(2)什么是IOC容器?</p><p>Spring创建了一个容器用来存放所创建的对象，这个容器就叫IOC容器</p><p>(3)什么是Bean?</p><p>容器中所存放的一个个对象就叫Bean或Bean对象</p><h2 id="3、入门案例"><a href="#3、入门案例" class="headerlink" title="3、入门案例"></a>3、入门案例</h2><p>介绍完Spring的核心概念后，接下来我们得思考一个问题就是，Spring到底是如何来实现IOC和DI的，那接下来就通过一些简单的入门案例，来演示下具体实现过程:</p><h3 id="3-1-IOC入门案例"><a href="#3-1-IOC入门案例" class="headerlink" title="3.1 IOC入门案例"></a>3.1 IOC入门案例</h3><p>对于入门案例，我们得先<code>分析思路</code>然后再<code>代码实现</code>，</p><h4 id="3-1-1-入门案例思路分析"><a href="#3-1-1-入门案例思路分析" class="headerlink" title="3.1.1 入门案例思路分析"></a>3.1.1 入门案例思路分析</h4><p>(1)Spring是使用容器来管理bean对象的，那么管什么? </p><ul><li>主要管理项目中所使用到的类对象，比如(Service和Dao)</li></ul><p>(2)如何将被管理的对象告知IOC容器?</p><ul><li>使用配置文件</li></ul><p>(3)被管理的对象交给IOC容器，要想从容器中获取对象，就先得思考如何获取到IOC容器?</p><ul><li>Spring框架提供相应的接口</li></ul><p>(4)IOC容器得到后，如何从容器中获取bean?</p><ul><li>调用Spring框架提供对应接口中的方法</li></ul><p>(5)使用Spring导入哪些坐标?</p><ul><li>用别人的东西，就需要在pom.xml添加对应的依赖</li></ul><h4 id="3-1-2-入门案例代码实现"><a href="#3-1-2-入门案例代码实现" class="headerlink" title="3.1.2 入门案例代码实现"></a>3.1.2 入门案例代码实现</h4><blockquote><p>需求分析:将BookServiceImpl和BookDaoImpl交给Spring管理，并从容器中获取对应的bean对象进行方法调用。</p><p>1.创建Maven的java项目</p><p>2.pom.xml添加Spring的依赖jar包</p><p>3.创建BookService,BookServiceImpl，BookDao和BookDaoImpl四个类</p><p>4.resources下添加spring配置文件，并完成bean的配置</p><p>5.使用Spring提供的接口完成IOC容器的创建</p><p>6.从容器中获取对象进行方法调用</p></blockquote><h5 id="步骤1-创建Maven项目"><a href="#步骤1-创建Maven项目" class="headerlink" title="步骤1:创建Maven项目"></a>步骤1:创建Maven项目</h5><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172300316.png" alt="1629734010072"></p><h5 id="步骤2-添加Spring的依赖jar包"><a href="#步骤2-添加Spring的依赖jar包" class="headerlink" title="步骤2:添加Spring的依赖jar包"></a>步骤2:添加Spring的依赖jar包</h5><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤3-添加案例中需要的类"><a href="#步骤3-添加案例中需要的类" class="headerlink" title="步骤3:添加案例中需要的类"></a>步骤3:添加案例中需要的类</h5><p>创建BookService,BookServiceImpl，BookDao和BookDaoImpl四个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookDaoImpl</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤4-添加spring配置文件"><a href="#步骤4-添加spring配置文件" class="headerlink" title="步骤4:添加spring配置文件"></a>步骤4:添加spring配置文件</h5><p>resources下添加spring配置文件applicationContext.xml，并完成bean的配置</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172300054.png" alt="1629734336440"></p><h5 id="步骤5-在配置文件中完成bean的配置"><a href="#步骤5-在配置文件中完成bean的配置" class="headerlink" title="步骤5:在配置文件中完成bean的配置"></a>步骤5:在配置文件中完成bean的配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--bean标签标示配置bean</span></span><br><span class="line"><span class="comment">    id属性标示给bean起名字</span></span><br><span class="line"><span class="comment">    class属性表示给bean定义类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>&#x3D;&#x3D;注意事项：bean定义时id属性在同一个上下文中(配置文件)不能重复&#x3D;&#x3D;</strong></p><h5 id="步骤6-获取IOC容器"><a href="#步骤6-获取IOC容器" class="headerlink" title="步骤6:获取IOC容器"></a>步骤6:获取IOC容器</h5><p>使用Spring提供的接口完成IOC容器的创建，创建App类，编写main方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取IOC容器</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤7-从容器中获取对象进行方法调用"><a href="#步骤7-从容器中获取对象进行方法调用" class="headerlink" title="步骤7:从容器中获取对象进行方法调用"></a>步骤7:从容器中获取对象进行方法调用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取IOC容器</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>); </span><br><span class="line"><span class="comment">//        BookDao bookDao = (BookDao) ctx.getBean(&quot;bookDao&quot;);</span></span><br><span class="line"><span class="comment">//        bookDao.save();</span></span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> (BookService) ctx.getBean(<span class="string">&quot;bookService&quot;</span>);</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤8-运行程序"><a href="#步骤8-运行程序" class="headerlink" title="步骤8:运行程序"></a>步骤8:运行程序</h5><p>测试结果为：</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172300320.png" alt="image-20210729184337603"></p><p>Spring的IOC入门案例已经完成，但是在<code>BookServiceImpl</code>的类中依然存在<code>BookDaoImpl</code>对象的new操作，它们之间的耦合度还是比较高，这块该如何解决，就需要用到下面的<code>DI:依赖注入</code>。</p><h3 id="3-2-DI入门案例"><a href="#3-2-DI入门案例" class="headerlink" title="3.2 DI入门案例"></a>3.2 DI入门案例</h3><p>对于DI的入门案例，我们依然先<code>分析思路</code>然后再<code>代码实现</code>，</p><h4 id="3-2-1-入门案例思路分析"><a href="#3-2-1-入门案例思路分析" class="headerlink" title="3.2.1 入门案例思路分析"></a>3.2.1 入门案例思路分析</h4><p>(1)要想实现依赖注入，必须要基于IOC管理Bean</p><ul><li>DI的入门案例要依赖于前面IOC的入门案例</li></ul><p>(2)Service中使用new形式创建的Dao对象是否保留?</p><ul><li>需要删除掉，最终要使用IOC容器中的bean对象</li></ul><p>(3)Service中需要的Dao对象如何进入到Service中?</p><ul><li>在Service中提供方法，让Spring的IOC容器可以通过该方法传入bean对象</li></ul><p>(4)Service与Dao间的关系如何描述?</p><ul><li>使用配置文件</li></ul><h4 id="3-2-2-入门案例代码实现"><a href="#3-2-2-入门案例代码实现" class="headerlink" title="3.2.2 入门案例代码实现"></a>3.2.2 入门案例代码实现</h4><blockquote><p>需求:基于IOC入门案例，在BookServiceImpl类中删除new对象的方式，使用Spring的DI完成Dao层的注入</p><p>1.删除业务层中使用new的方式创建的dao对象</p><p>2.在业务层提供BookDao的setter方法</p><p>3.在配置文件中添加依赖注入的配置</p><p>4.运行程序调用方法</p></blockquote><h5 id="步骤1-去除代码中的new"><a href="#步骤1-去除代码中的new" class="headerlink" title="步骤1: 去除代码中的new"></a>步骤1: 去除代码中的new</h5><p>在BookServiceImpl类中，删除业务层中使用new的方式创建的dao对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="comment">//删除业务层中使用new的方式创建的dao对象</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2-为属性提供setter方法"><a href="#步骤2-为属性提供setter方法" class="headerlink" title="步骤2:为属性提供setter方法"></a>步骤2:为属性提供setter方法</h5><p>在BookServiceImpl类中,为BookDao提供setter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="comment">//删除业务层中使用new的方式创建的dao对象</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提供对应的set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="步骤3-修改配置完成注入"><a href="#步骤3-修改配置完成注入" class="headerlink" title="步骤3:修改配置完成注入"></a>步骤3:修改配置完成注入</h5><p>在配置文件中添加依赖注入的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--bean标签标示配置bean</span></span><br><span class="line"><span class="comment">    id属性标示给bean起名字</span></span><br><span class="line"><span class="comment">    class属性表示给bean定义类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置server与dao的关系--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--property标签表示配置当前bean的属性</span></span><br><span class="line"><span class="comment">        name属性表示配置哪一个具体的属性</span></span><br><span class="line"><span class="comment">        ref属性表示参照哪一个bean</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意:配置中的两个bookDao的含义是不一样的&#x3D;&#x3D;</p><ul><li>name&#x3D;”bookDao”中<code>bookDao</code>的作用是让Spring的IOC容器在获取到名称后，将首字母大写，前面加set找对应的<code>setBookDao()</code>方法进行对象注入</li><li>ref&#x3D;”bookDao”中<code>bookDao</code>的作用是让Spring能在IOC容器中找到id为<code>bookDao</code>的Bean对象给<code>bookService</code>进行注入</li><li>综上所述，对应关系如下:</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172300692.png" alt="1629736314989"></p><h5 id="步骤4-运行程序"><a href="#步骤4-运行程序" class="headerlink" title="步骤4:运行程序"></a>步骤4:运行程序</h5><p>运行，测试结果为：</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172300645.png" alt="image-20210729184337603"></p><h2 id="4、IOC相关内容"><a href="#4、IOC相关内容" class="headerlink" title="4、IOC相关内容"></a>4、IOC相关内容</h2><p>通过前面两个案例，我们已经学习了<code>bean如何定义配置</code>，<code>DI如何定义配置</code>以及<code>容器对象如何获取</code>的内容，接下来主要是把这三块内容展开进行详细的讲解，深入的学习下这三部分的内容，首先是bean基础配置。</p><h3 id="4-1-bean基础配置"><a href="#4-1-bean基础配置" class="headerlink" title="4.1 bean基础配置"></a>4.1 bean基础配置</h3><p>对于bean的配置中，主要会讲解<code>bean基础配置</code>,<code>bean的别名配置</code>,<code>bean的作用范围配置</code>&#x3D;&#x3D;(重点)&#x3D;&#x3D;,这三部分内容：</p><h4 id="4-1-1-bean基础配置-id与class"><a href="#4-1-1-bean基础配置-id与class" class="headerlink" title="4.1.1 bean基础配置(id与class)"></a>4.1.1 bean基础配置(id与class)</h4><p>对于bean的基础配置，在前面的案例中已经使用过:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;&quot; class=&quot;&quot;/&gt;</span><br></pre></td></tr></table></figure><p>其中，bean标签的功能、使用方式以及id和class属性的作用，我们通过一张图来描述下</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172301743.png" alt="image-20210729183500978"></p><p>这其中需要大家重点掌握的是:&#x3D;&#x3D;bean标签的id和class属性的使用&#x3D;&#x3D;。</p><p><strong>思考：</strong></p><ul><li>class属性能不能写接口如<code>BookDao</code>的类全名呢?</li></ul><p>答案肯定是不行，因为接口是没办法创建对象的。</p><ul><li>前面提过为bean设置id时，id必须唯一，但是如果由于命名习惯而产生了分歧后，该如何解决?</li></ul><p>在解决这个问题之前，我们需要准备下开发环境，对于开发环境我们可以有两种解决方案:</p><ul><li><p>使用前面IOC和DI的案例</p></li><li><p>重新搭建一个新的案例环境,目的是方便大家查阅代码</p><ul><li><p>搭建的内容和前面的案例是一样的，内容如下：</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172301638.png" alt="1629769227068"></p></li></ul></li></ul><h4 id="4-1-2-bean的name属性"><a href="#4-1-2-bean的name属性" class="headerlink" title="4.1.2 bean的name属性"></a>4.1.2 bean的name属性</h4><p>环境准备好后，接下来就可以在这个环境的基础上来学习下bean的别名配置，</p><p>首先来看下别名的配置说明:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172301035.png" alt="image-20210729183558051"></p><h5 id="步骤1：配置别名"><a href="#步骤1：配置别名" class="headerlink" title="步骤1：配置别名"></a>步骤1：配置别名</h5><p>打开spring的配置文件applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--name:为bean指定别名，别名可以有多个，使用逗号，分号，空格进行分隔--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">name</span>=<span class="string">&quot;service service4 bookEbi&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--scope：为bean设置作用范围，可选值为单例singloton，非单例prototype--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:Ebi全称Enterprise Business Interface，翻译为企业业务接口</strong></p><h5 id="步骤2-根据名称容器中获取bean对象"><a href="#步骤2-根据名称容器中获取bean对象" class="headerlink" title="步骤2:根据名称容器中获取bean对象"></a>步骤2:根据名称容器中获取bean对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForName</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//此处根据bean标签的id属性和name属性的任意一个值来获取bean对象</span></span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> (BookService) ctx.getBean(<span class="string">&quot;service4&quot;</span>);</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤3-运行程序"><a href="#步骤3-运行程序" class="headerlink" title="步骤3:运行程序"></a>步骤3:运行程序</h5><p>测试结果为：</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172301609.png" alt="image-20210729184337603"></p><p>&#x3D;&#x3D;注意事项:&#x3D;&#x3D;</p><ul><li><p>bean依赖注入的ref属性指定bean，必须在容器中存在</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172301344.png" alt="1629771744003"></p></li><li><p>如果不存在,则会报错，如下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172301469.png" alt="1629771880920"></p><p>这个错误大家需要特别关注下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172301793.png" alt="1629771972886"></p><p>获取bean无论是通过id还是name获取，如果无法获取到，将抛出异常&#x3D;&#x3D;NoSuchBeanDefinitionException&#x3D;&#x3D;</p></li></ul><h4 id="4-1-3-bean作用范围scope配置"><a href="#4-1-3-bean作用范围scope配置" class="headerlink" title="4.1.3 bean作用范围scope配置"></a>4.1.3 bean作用范围scope配置</h4><p>关于bean的作用范围是bean属性配置的一个&#x3D;&#x3D;重点&#x3D;&#x3D;内容。</p><p>看到这个作用范围，我们就得思考bean的作用范围是来控制bean哪块内容的?</p><p>我们先来看下<code>bean作用范围的配置属性</code>:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172301631.png" alt="image-20210729183628138"></p><h5 id="4-1-3-1-验证IOC容器中对象是否为单例"><a href="#4-1-3-1-验证IOC容器中对象是否为单例" class="headerlink" title="4.1.3.1 验证IOC容器中对象是否为单例"></a>4.1.3.1 验证IOC容器中对象是否为单例</h5><h6 id="验证思路"><a href="#验证思路" class="headerlink" title="验证思路"></a>验证思路</h6><p>​同一个bean获取两次，将对象打印到控制台，看打印出的地址值是否一致。</p><h6 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h6><ul><li><p>创建一个AppForScope的类，在其main方法中来验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForScope</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">            <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao1</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao2</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        System.out.println(bookDao1);</span><br><span class="line">        System.out.println(bookDao2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印，观察控制台的打印结果</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172301921.png" alt="1629772538893"></p></li><li><p>结论:默认情况下，Spring创建的bean对象都是单例的</p></li></ul><p>获取到结论后，问题就来了，那如果我想创建出来非单例的bean对象，该如何实现呢?</p><h5 id="4-1-3-2-配置bean为非单例"><a href="#4-1-3-2-配置bean为非单例" class="headerlink" title="4.1.3.2 配置bean为非单例"></a>4.1.3.2 配置bean为非单例</h5><p>在Spring配置文件中，配置scope属性来实现bean的非单例创建</p><ul><li><p>在Spring的配置文件中，修改<code>&lt;bean&gt;</code>的scope属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将scope设置为<code>singleton</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>运行AppForScope，打印看结果</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172301446.png" alt="1629772538893"></p></li><li><p>将scope设置为<code>prototype</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;bookDao&quot; name=&quot;dao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot; scope=&quot;prototype&quot;/&gt;</span><br></pre></td></tr></table></figure><p>运行AppForScope，打印看结果</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172301960.png" alt="1629772928714"></p></li><li><p>结论，使用bean的<code>scope</code>属性可以控制bean的创建是否为单例：</p><ul><li><code>singleton</code>默认为单例</li><li><code>prototype</code>为非单例</li></ul></li></ul><h5 id="4-1-3-3-scope使用后续思考"><a href="#4-1-3-3-scope使用后续思考" class="headerlink" title="4.1.3.3 scope使用后续思考"></a>4.1.3.3 scope使用后续思考</h5><p>介绍完<code>scope</code>属性以后，我们来思考几个问题:</p><ul><li>为什么bean默认为单例?<ul><li>bean为单例的意思是在Spring的IOC容器中只会有该类的一个对象</li><li>bean对象只有一个就避免了对象的频繁创建与销毁，达到了bean对象的复用，性能高</li></ul></li><li>bean在容器中是单例的，会不会产生 &#x3D;&#x3D;线程安全&#x3D;&#x3D; 问题?<ul><li>如果对象是有状态对象，即该对象有成员变量可以用来存储数据的，</li><li>因为所有请求线程共用一个bean对象，所以会存在线程安全问题。</li><li>如果对象是无状态对象，即该对象没有成员变量没有进行数据存储的，</li><li>因方法中的局部变量在方法调用完成后会被销毁，所以不会存在线程安全问题。</li></ul></li><li>哪些bean对象适合交给容器进行管理?<ul><li>表现层对象</li><li>业务层对象</li><li>数据层对象</li><li>工具对象</li></ul></li><li>哪些bean对象不适合交给容器进行管理?<ul><li>封装实例的域对象，因为会引发线程安全问题，所以不适合。</li></ul></li></ul><h4 id="4-14-bean基础配置小结"><a href="#4-14-bean基础配置小结" class="headerlink" title="4.14 bean基础配置小结"></a>4.14 bean基础配置小结</h4><p>关于bean的基础配置中，需要大家掌握以下属性:</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172301053.png"   width="550"   height="125"/><h3 id="4-2-bean实例化"><a href="#4-2-bean实例化" class="headerlink" title="4.2 bean实例化"></a>4.2 bean实例化</h3><p>对象已经能交给Spring的IOC容器来创建了，但是容器是如何来创建对象的呢?</p><p>就需要研究下<code>bean的实例化过程</code>，在这块内容中主要解决两部分内容，分别是</p><ul><li>bean是如何创建的</li><li>实例化bean的三种方式，<code>构造方法</code>,<code>静态工厂</code>和<code>实例工厂</code></li></ul><p>在讲解这三种创建方式之前，我们需要先确认一件事:</p><p>bean &#x3D;&#x3D;本质上就是对象&#x3D;&#x3D; ，对象在new的时候会使用构造方法完成，那创建bean也是使用构造方法完成的。</p><p>基于这个知识点出发，我们来验证spring中bean的三种创建方式，</p><h4 id="4-2-1-环境准备"><a href="#4-2-1-环境准备" class="headerlink" title="4.2.1 环境准备"></a>4.2.1 环境准备</h4><p>为了方便大家阅读代码，重新准备个开发环境，</p><ul><li>创建一个Maven项目</li><li>pom.xml添加依赖</li><li>resources下添加spring的配置文件applicationContext.xml</li></ul><p>这些步骤和前面的都一致，大家可以快速的拷贝即可，最终项目的结构如下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172305000.png" alt="1629775585694"></p><h4 id="4-2-2-构造方法实例化"><a href="#4-2-2-构造方法实例化" class="headerlink" title="4.2.2 构造方法实例化"></a>4.2.2 构造方法实例化</h4><p>在上述的环境下，我们来研究下Spring中的第一种bean的创建方式<code>构造方法实例化</code>:</p><h5 id="步骤1-准备需要被创建的类"><a href="#步骤1-准备需要被创建的类" class="headerlink" title="步骤1:准备需要被创建的类"></a>步骤1:准备需要被创建的类</h5><p>准备一个BookDao和BookDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BookDao类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//BookDaoImpl类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2-将类配置到Spring容器"><a href="#步骤2-将类配置到Spring容器" class="headerlink" title="步骤2:将类配置到Spring容器"></a>步骤2:将类配置到Spring容器</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤3-编写运行程序"><a href="#步骤3-编写运行程序" class="headerlink" title="步骤3:编写运行程序"></a>步骤3:编写运行程序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForInstanceBook</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">            <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤4-类中提供构造函数测试"><a href="#步骤4-类中提供构造函数测试" class="headerlink" title="步骤4:类中提供构造函数测试"></a>步骤4:类中提供构造函数测试</h5><p>在BookDaoImpl类中添加一个无参构造函数，并打印一句话，方便观察结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookDaoImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao constructor is running ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，如果控制台有打印构造函数中的输出，说明Spring容器在创建对象的时候也走的是构造函数</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172305631.png" alt="1629775972507"></p><h5 id="步骤5-将构造函数改成private测试"><a href="#步骤5-将构造函数改成private测试" class="headerlink" title="步骤5:将构造函数改成private测试"></a>步骤5:将构造函数改成private测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">BookDaoImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao constructor is running ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，能执行成功,说明内部走的依然是构造函数,能访问到类中的私有构造方法,显而易见Spring底层用的是&#x3D;&#x3D;反射&#x3D;&#x3D;</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172305374.png" alt="1629775972507"></p><h5 id="步骤6-构造函数中添加一个参数测试"><a href="#步骤6-构造函数中添加一个参数测试" class="headerlink" title="步骤6:构造函数中添加一个参数测试"></a>步骤6:构造函数中添加一个参数测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">BookDaoImpl</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao constructor is running ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，</p><p>程序会报错，说明Spring底层使用的是类的无参构造方法。</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172305148.png" alt="1629776331499"></p><h4 id="4-2-3-分析Spring的错误信息"><a href="#4-2-3-分析Spring的错误信息" class="headerlink" title="4.2.3 分析Spring的错误信息"></a>4.2.3 分析Spring的错误信息</h4><p>接下来，我们主要研究下Spring的报错信息来学一学如阅读。</p><ul><li>错误信息从下往上依次查看，因为上面的错误大都是对下面错误的一个包装，最核心错误是在最下面</li><li>Caused by: java.lang.NoSuchMethodException: com.itheima.dao.impl.BookDaoImpl.<code>&lt;init&gt;</code>()<ul><li>Caused by 翻译为<code>引起</code>，即出现错误的原因</li><li>java.lang.NoSuchMethodException:抛出的异常为<code>没有这样的方法异常</code></li><li>com.itheima.dao.impl.BookDaoImpl.<code>&lt;init&gt;</code>():哪个类的哪个方法没有被找到导致的异常，<code>&lt;init&gt;</code>()指定是类的构造方法，即该类的无参构造方法</li></ul></li></ul><p>如果最后一行错误获取不到错误信息，接下来查看第二层:</p><p>Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.itheima.dao.impl.BookDaoImpl]: No default constructor found; nested exception is java.lang.NoSuchMethodException: com.itheima.dao.impl.BookDaoImpl.<code>&lt;init&gt;</code>()</p><ul><li>nested:嵌套的意思，后面的异常内容和最底层的异常是一致的</li><li>Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.itheima.dao.impl.BookDaoImpl]: No default constructor found; <ul><li>Caused by: <code>引发</code></li><li>BeanInstantiationException:翻译为<code>bean实例化异常</code></li><li>No default constructor found:没有一个默认的构造函数被发现</li></ul></li></ul><p>看到这其实错误已经比较明显，给大家个练习，把倒数第三层的错误分析下吧:</p><p>Exception in thread “main” org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘bookDao’ defined in class path resource [applicationContext.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.itheima.dao.impl.BookDaoImpl]: No default constructor found; nested exception is java.lang.NoSuchMethodException: com.itheima.dao.impl.BookDaoImpl.<code>&lt;init&gt;</code>()。</p><p>至此，关于Spring的构造方法实例化就已经学习完了，因为每一个类默认都会提供一个无参构造函数，所以其实真正在使用这种方式的时候，我们什么也不需要做。这也是我们以后比较常用的一种方式。</p><h4 id="4-2-4-静态工厂实例化"><a href="#4-2-4-静态工厂实例化" class="headerlink" title="4.2.4 静态工厂实例化"></a>4.2.4 静态工厂实例化</h4><p>接下来研究Spring中的第二种bean的创建方式<code>静态工厂实例化</code>:</p><h5 id="4-2-4-1-工厂方式创建bean"><a href="#4-2-4-1-工厂方式创建bean" class="headerlink" title="4.2.4.1 工厂方式创建bean"></a>4.2.4.1 工厂方式创建bean</h5><p>在讲这种方式之前，我们需要先回顾一个知识点是使用工厂来创建对象的方式:</p><p>(1)准备一个OrderDao和OrderDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//OrderDao类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//OrderDaoImpl类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;order dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)创建一个工厂类OrderDaoFactory并提供一个&#x3D;&#x3D;静态方法&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态工厂创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> OrderDao <span class="title function_">getOrderDao</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意static，这是和实例工厂的区别。</span></span><br></pre></td></tr></table></figure><p>(3)编写AppForInstanceOrder运行类，在类中通过工厂获取对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForInstanceOrder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//通过静态工厂创建对象</span></span><br><span class="line">        <span class="type">OrderDao</span> <span class="variable">orderDao</span> <span class="operator">=</span> OrderDaoFactory.getOrderDao();</span><br><span class="line">        orderDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4)运行后，可以查看到结果</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172306246.png" alt="1629786862329"></p><p>如果代码中对象是通过上面的这种方式来创建的，如何将其交给Spring来管理呢?</p><h5 id="4-2-4-2-静态工厂实例化"><a href="#4-2-4-2-静态工厂实例化" class="headerlink" title="4.2.4.2 静态工厂实例化"></a>4.2.4.2 静态工厂实例化</h5><p>这就要用到Spring中的静态工厂实例化的知识了，具体实现步骤为:</p><p>(1)在spring的配置文件application.properties中添加以下内容:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.OrderDaoFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getOrderDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>class:工厂类的类全名</p><p>factory-mehod:具体工厂类中创建对象的方法名</p><p>对应关系如下图:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172306970.png" alt="image-20210729195248948"></p><p>(2)在AppForInstanceOrder运行类，使用从IOC容器中获取bean的方法进行运行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForInstanceOrder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">OrderDao</span> <span class="variable">orderDao</span> <span class="operator">=</span> (OrderDao) ctx.getBean(<span class="string">&quot;orderDao&quot;</span>);</span><br><span class="line"></span><br><span class="line">        orderDao.save();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)运行后，可以查看到结果</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172306207.png" alt="1629786862329"></p><p>看到这，可能有人会问了，你这种方式在工厂类中不也是直接new对象的，和我自己直接new没什么太大的区别，而且静态工厂的方式反而更复杂，这种方式的意义是什么?</p><p>主要的原因是:</p><ul><li>在工厂的静态方法中，我们除了new对象还可以做其他的一些业务操作，这些操作必不可少,如:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> OrderDao <span class="title function_">getOrderDao</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;factory setup....&quot;</span>);<span class="comment">//模拟必要的业务操作</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前new对象的方式就无法添加其他的业务内容，重新运行，查看结果:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172306824.png" alt="1629788036885"></p><p>介绍完静态工厂实例化后，这种方式一般是用来兼容早期的一些老系统，所以&#x3D;&#x3D;了解为主&#x3D;&#x3D;。</p><h4 id="4-2-5-实例工厂与FactoryBean"><a href="#4-2-5-实例工厂与FactoryBean" class="headerlink" title="4.2.5 实例工厂与FactoryBean"></a>4.2.5 实例工厂与FactoryBean</h4><p>接下来继续来研究Spring的第三种bean的创建方式<code>实例工厂实例化</code>:</p><h5 id="4-2-3-1-环境准备"><a href="#4-2-3-1-环境准备" class="headerlink" title="4.2.3.1 环境准备"></a>4.2.3.1 环境准备</h5><p>(1)准备一个UserDao和UserDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)创建一个工厂类OrderDaoFactory并提供一个&#x3D;&#x3D;普通方法&#x3D;&#x3D;，注意此处和静态工厂的工厂类不一样的地方是方法不是静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> UserDao <span class="title function_">getUserDao</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意和静态工厂的区别：static</span></span><br></pre></td></tr></table></figure><p>(3)编写AppForInstanceUser运行类，在类中通过工厂获取对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForInstanceUser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建实例工厂对象</span></span><br><span class="line">        <span class="type">UserDaoFactory</span> <span class="variable">userDaoFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoFactory</span>();</span><br><span class="line">        <span class="comment">//通过实例工厂对象创建对象</span></span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> userDaoFactory.getUserDao();</span><br><span class="line">        userDao.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4)运行后，可以查看到结果</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172306997.png" alt="1629788769436"></p><p>对于上面这种实例工厂的方式如何交给Spring管理呢?</p><h5 id="4-2-3-2-实例工厂实例化"><a href="#4-2-3-2-实例工厂实例化" class="headerlink" title="4.2.3.2 实例工厂实例化"></a>4.2.3.2 实例工厂实例化</h5><p>具体实现步骤为:</p><p>(1)在spring的配置文件中添加以下内容:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.UserDaoFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;userFactory&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>实例化工厂运行的顺序是:</p><ul><li><p>创建实例化工厂对象,对应的是第一行配置</p></li><li><p>调用对象中的方法来创建bean，对应的是第二行配置</p><ul><li><p>factory-bean:工厂的实例对象</p></li><li><p>factory-method:工厂对象中的具体创建对象的方法名,对应关系如下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172306705.png" alt="image-20210729200203249"></p></li></ul></li></ul><p>factory-mehod:具体工厂类中创建对象的方法名</p><p>(2)在AppForInstanceUser运行类，使用从IOC容器中获取bean的方法进行运行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForInstanceUser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">            <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) ctx.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)运行后，可以查看到结果</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172306651.png" alt="1629788769436"></p><p>（4）静态工厂实例化不需要事先在IOC容器中配置静态工厂，而实例工厂需要事先在IOC容器中配置的原因是？</p><ul><li><p><strong>静态工厂</strong>：</p><ul><li><p>静态工厂使用静态方法来创建Bean实例。</p></li><li><p>不需要在IoC容器中配置静态工厂，因为它们的创建方法是静态的，可以直接通过&#x3D;&#x3D;类名调用&#x3D;&#x3D;。</p></li><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStaticFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MyBean <span class="title function_">createBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在配置文件中，可以直接使用<bean>标签来引用静态工厂方法：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.MyStaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createBean&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--实际上发生了以下步骤：</span></span><br><span class="line"><span class="comment">1. Spring 容器读取配置文件并开始初始化。</span></span><br><span class="line"><span class="comment">2. Spring 知道要创建一个名为 `myBean` 的 Bean。</span></span><br><span class="line"><span class="comment">3. Spring 查找 `com.example.MyStaticFactory` 类并加载它。</span></span><br><span class="line"><span class="comment">4. Spring 调用 `MyStaticFactory.createBean()` 方法,因为是静态方法可以直接用类名来调用。</span></span><br><span class="line"><span class="comment">5. `createBean()` 方法返回一个新的 `MyBean` 实例。</span></span><br><span class="line"><span class="comment">6. Spring 将这个实例注册为 `myBean`。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">因此，`myBean` 实际上是通过调用 `MyStaticFactory.createBean()` 方法来创建的。这种方式允许我们将 Bean 的创建逻辑与 Bean 的使用分离，使代码更加清晰和模块化。在其他地方，我们可以通过 `myBean` 引用这个实例，例如在其他 Bean 的依赖注入中。--&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>实例工厂</strong>：</p><ul><li><p>实例工厂使用非静态方法来创建Bean实例。</p></li><li><p>需要在IoC容器中配置实例工厂，因为它们的创建方法是非静态的，需要先创建工厂实例，然后通过工厂实例调用创建方法。</p></li><li><p>示例代码：</p><p>Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInstanceFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> MyBean <span class="title function_">createBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在配置文件中，&#x3D;&#x3D;首先配置实例工厂的Bean&#x3D;&#x3D;，然后再引用工厂方法：</p><p>XML</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myInstanceFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.MyInstanceFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;myInstanceFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createBean&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">实际上发生了以下步骤：</span></span><br><span class="line"><span class="comment">1. Spring 容器读取配置文件并开始初始化。</span></span><br><span class="line"><span class="comment">2. Spring 知道要创建一个名为 `myBean` 的 Bean。</span></span><br><span class="line"><span class="comment">3. Spring 查找 `com.example.MyInstanceFactory` 类并加载它。</span></span><br><span class="line"><span class="comment">4. Spring 创建 `myInstanceFactory` 实例，通过默认构造方法。</span></span><br><span class="line"><span class="comment">5. 然后，Spring 调用 `myInstanceFactory` 实例的 `createBean()` 方法。</span></span><br><span class="line"><span class="comment">6. `createBean()` 方法返回一个新的 `MyBean` 实例。</span></span><br><span class="line"><span class="comment">7. Spring 将这个实例注册为 `myBean`。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">因此，`myBean` 实际上是通过调用 `MyInstanceFactory.createBean()` 方法来创建的。这种方式允许我们在 Bean 创建过程中添加自己的业务逻辑，从而更好地满足应用程序的需求。</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>实例工厂实例化的方式就已经介绍完了，配置的过程还是比较复杂，所以Spring为了简化这种配置方式就提供了一种叫<code>FactoryBean</code>的方式来简化开发。</p><h5 id="4-2-3-3-FactoryBean的使用-实例工厂的衍生"><a href="#4-2-3-3-FactoryBean的使用-实例工厂的衍生" class="headerlink" title="4.2.3.3 FactoryBean的使用(实例工厂的衍生)"></a>4.2.3.3 FactoryBean的使用(实例工厂的衍生)</h5><p>具体的使用步骤为:</p><p>(1)创建一个UserDaoFactoryBean的类，实现FactoryBean接口，重写接口的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;UserDao&gt; &#123;</span><br><span class="line">    <span class="comment">//代替原始实例工厂中创建对象的方法</span></span><br><span class="line">    <span class="keyword">public</span> UserDao <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回所创建类的Class对象</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> UserDao.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)在Spring的配置文件中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.UserDaoFactoryBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>(3)AppForInstanceUser运行类不用做任何修改，直接运行</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172306172.png" alt="1629788769436"></p><p>这种方式在Spring去整合其他框架的时候会被用到，所以这种方式需要大家理解掌握。</p><p>查看源码会发现，FactoryBean接口其实会有三个方法，分别是:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">T <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; getObjectType();</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法一:<code>T getObject() throws Exception</code>：返回创建的 Bean 实例（具体实现类）。</p><p>方法二:<code>Class&lt;?&gt; getObjectType()</code>：返回创建的 Bean 类型（父类，接口）。</p><p>方法三:<code>boolean isSingleton()</code>：指示是否为单例 Bean。如果返回 <code>true</code>，则表示创建的 Bean 是单例，Spring 容器将缓存它。如果返       回 <code>false</code>，则表示每次请求都会创建一个新的 Bean 实例。</p><p>思路很简单，就是从容器中获取该对象的多个值，打印到控制台，查看是否为同一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForInstanceUser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">            <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao1</span> <span class="operator">=</span> (UserDao) ctx.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao2</span> <span class="operator">=</span> (UserDao) ctx.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        System.out.println(userDao1);</span><br><span class="line">        System.out.println(userDao2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果，如下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172306358.png" alt="1629790070607"></p><p>通过验证，会发现默认是单例，那如果想改成单例具体如何实现?</p><p>只需要将isSingleton()方法进行重写，修改返回为false，即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//FactoryBean创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;UserDao&gt; &#123;</span><br><span class="line">    <span class="comment">//代替原始实例工厂中创建对象的方法</span></span><br><span class="line">    <span class="keyword">public</span> UserDao <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> UserDao.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新运行AppForInstanceUser，查看结果</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172306086.png" alt="1629790197860"></p><p>从结果中可以看出现在已经是非单例了，但是一般情况下我们都会采用单例，也就是采用默认即可。所以isSingleton()方法一般不需要进行重写。</p><h4 id="4-2-6-bean实例化小结"><a href="#4-2-6-bean实例化小结" class="headerlink" title="4.2.6 bean实例化小结"></a>4.2.6 bean实例化小结</h4><p>通过这一节的学习，需要掌握:</p><p>(1)bean是如何创建的呢?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">构造方法</span><br></pre></td></tr></table></figure><p>(2)Spring的IOC实例化对象的三种方式分别是:</p><ul><li>构造方法(常用)</li><li>静态工厂(了解)</li><li>实例工厂(了解)<ul><li>FactoryBean(实用)</li></ul></li></ul><p>这些方式中，重点掌握<code>构造方法</code>和<code>FactoryBean</code>即可。</p><p>需要&#x3D;&#x3D;注意&#x3D;&#x3D;的一点是，构造方法在类中默认会提供，但是如果重写了构造方法，默认的就会消失，在使用的过程中需要注意，如果需要重写构造方法，最好把默认的构造方法也重写下。</p><h3 id="4-3-bean的生命周期"><a href="#4-3-bean的生命周期" class="headerlink" title="4.3 bean的生命周期"></a>4.3 bean的生命周期</h3><p>关于bean的相关知识还有最后一个是<code>bean的生命周期</code>,对于生命周期，我们主要围绕着<code>bean生命周期控制</code>来讲解:</p><ul><li>首先理解下什么是生命周期?<ul><li>从创建到消亡的完整过程,例如人从出生到死亡的整个过程就是一个生命周期。</li></ul></li><li>bean生命周期是什么?<ul><li>bean对象从创建到销毁的整体过程。</li></ul></li><li>bean生命周期控制是什么?<ul><li>在bean创建后到销毁前做一些事情。</li></ul></li></ul><p>现在我们面临的问题是如何在bean的创建之后和销毁之前把我们需要添加的内容添加进去。</p><h4 id="4-3-1-环境准备"><a href="#4-3-1-环境准备" class="headerlink" title="4.3.1 环境准备"></a>4.3.1 环境准备</h4><p>还是老规矩，为了方便大家后期代码的阅读，我们重新搭建下环境:</p><ul><li>创建一个Maven项目</li><li>pom.xml添加依赖</li><li>resources下添加spring的配置文件applicationContext.xml</li></ul><p>这些步骤和前面的都一致，大家可以快速的拷贝即可，最终项目的结构如下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172306369.png" alt="1629791473409"></p><p>(1)项目中添加BookDao、BookDaoImpl、BookService和BookServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)resources下提供spring的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3)编写AppForLifeCycle运行类，加载Spring的IOC容器，并从中获取对应的bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForLifeCycle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">        <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-2-生命周期设置"><a href="#4-3-2-生命周期设置" class="headerlink" title="4.3.2 生命周期设置"></a>4.3.2 生命周期设置</h4><p>接下来，在上面这个环境中来为BookDao添加生命周期的控制方法，具体的控制有两个阶段:</p><ul><li>bean创建之后，想要添加内容，比如用来初始化需要用到资源</li><li>bean销毁之前，想要添加内容，比如用来释放用到的资源</li></ul><h5 id="步骤1-添加初始化和销毁方法"><a href="#步骤1-添加初始化和销毁方法" class="headerlink" title="步骤1:添加初始化和销毁方法"></a>步骤1:添加初始化和销毁方法</h5><p>针对这两个阶段，我们在BooDaoImpl类中分别添加两个方法，&#x3D;&#x3D;方法名任意&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//表示bean初始化对应的操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//表示bean销毁前对应的操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destory...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2-配置生命周期"><a href="#步骤2-配置生命周期" class="headerlink" title="步骤2:配置生命周期"></a>步骤2:配置生命周期</h5><p>在配置文件添加配置，如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤3-运行程序-1"><a href="#步骤3-运行程序-1" class="headerlink" title="步骤3:运行程序"></a>步骤3:运行程序</h5><p>运行AppForLifeCycle打印结果为:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172306996.png" alt="1629792339889"></p><p>从结果中可以看出，init方法执行了，但是destroy方法却未执行，这是为什么呢?</p><ul><li>Spring的IOC容器是运行在JVM中</li><li>运行main方法后,JVM启动,Spring加载配置文件生成IOC容器,从容器获取bean对象，然后调方法执行</li><li>main方法执行完后，JVM退出，这个时候IOC容器中的bean还没有来得及销毁就已经结束了</li><li>所以没有调用对应的destroy方法</li></ul><p>知道了出现问题的原因，具体该如何解决呢?</p><h4 id="4-3-3-close关闭容器"><a href="#4-3-3-close关闭容器" class="headerlink" title="4.3.3 close关闭容器"></a>4.3.3 close关闭容器</h4><ul><li><p>ApplicationContext中没有close方法</p></li><li><p>需要将ApplicationContext更换成<strong>ClassPathXmlApplicationContext</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">    <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>调用ctx的&#x3D;&#x3D;close()&#x3D;&#x3D;方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.close();</span><br></pre></td></tr></table></figure></li><li><p>运行程序，就能执行destroy方法的内容</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172306632.png" alt="1629792857608"></p></li></ul><h4 id="4-3-4-注册钩子关闭容器"><a href="#4-3-4-注册钩子关闭容器" class="headerlink" title="4.3.4 注册钩子关闭容器"></a>4.3.4 注册钩子关闭容器</h4><ul><li><p>在容器未关闭之前，提前设置好回调函数，让JVM在退出之前回调此函数来关闭容器</p></li><li><p>调用ctx的&#x3D;&#x3D;registerShutdownHook()&#x3D;&#x3D;方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.registerShutdownHook();</span><br></pre></td></tr></table></figure><p>**注意:**registerShutdownHook在ApplicationContext中也没有</p></li><li><p>运行后，查询打印结果</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172306265.png" alt="1629792857608"></p></li></ul><p>两种方式介绍完后，close和registerShutdownHook选哪个?</p><p>相同点:这两种都能用来关闭容器</p><p>不同点:close()是在调用的时候关闭，registerShutdownHook()是在JVM退出前调用关闭，所以close()一定要在程序最后执行，registerShutdownHook()则随意。</p><p>分析上面的实现过程，会发现添加初始化和销毁方法，即需要编码也需要配置，实现起来步骤比较多也比较乱。</p><p><strong>Spring提供了两个接口来完成生命周期的控制</strong>，好处是可以不用再进行配置<code>init-method</code>和<code>destroy-method</code></p><p>接下来在BookServiceImpl完成这两个接口的使用:</p><p>修改BookServiceImpl类，添加两个接口<code>InitializingBean</code>， <code>DisposableBean</code>并实现接口中的两个方法<code>afterPropertiesSet</code>和<code>destroy</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>, InitializingBean, DisposableBean &#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save(); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新运行AppForLifeCycle类，</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172307815.png" alt="1629794527419"></p><p>那第二种方式的实现，我们也介绍完了。</p><p><strong>小细节</strong></p><ul><li><p>对于InitializingBean接口中的afterPropertiesSet方法，翻译过来为<code>属性设置之后</code>。</p></li><li><p>对于BookServiceImpl来说，bookDao是它的一个属性</p></li><li><p>setBookDao方法是Spring的IOC容器为其注入属性的方法</p></li><li><p>思考:afterPropertiesSet和setBookDao谁先执行?</p><ul><li><p>从方法名分析，猜想应该是setBookDao方法先执行</p></li><li><p>验证思路，在setBookDao方法中添加一句话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;set .....&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>重新运行AppForLifeCycle，打印结果如下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172307052.png" alt="1629794928636"></p><p>验证的结果和我们猜想的结果是一致的，所以初始化方法会在&#x3D;&#x3D;类中属性设置之后执行&#x3D;&#x3D;。</p></li></ul></li></ul><h4 id="4-3-5-bean生命周期小结"><a href="#4-3-5-bean生命周期小结" class="headerlink" title="4.3.5 bean生命周期小结"></a>4.3.5 bean生命周期小结</h4><p>(1)关于Spring中对bean生命周期控制提供了两种方式:</p><ul><li>在配置文件中的bean标签中添加<code>init-method</code>和<code>destroy-method</code>属性</li><li>类实现<code>InitializingBean</code>与<code>DisposableBean</code>接口，这种方式了解下即可。</li></ul><p>(2)对于bean的生命周期控制在bean的整个生命周期中所处的位置如下:</p><ul><li>初始化容器（容器创建就会执行，不需要调用bean）<ul><li>1.创建对象(内存分配)</li><li>2.执行构造方法</li><li>3.执行属性注入(set操作)</li><li>&#x3D;&#x3D;4.执行bean初始化方法&#x3D;&#x3D;</li></ul></li><li>使用bean<ul><li>1.执行业务操作</li></ul></li><li>关闭&#x2F;销毁容器<ul><li>&#x3D;&#x3D;1.执行bean销毁方法&#x3D;&#x3D;</li></ul></li></ul><p>(3)关闭容器的两种方式:</p><ul><li>ConfigurableApplicationContext是ApplicationContext的子类<ul><li>close()方法</li><li>registerShutdownHook()方法</li></ul></li></ul><h2 id="5、DI相关内容"><a href="#5、DI相关内容" class="headerlink" title="5、DI相关内容"></a>5、DI相关内容</h2><p>前面我们已经完成了bean相关操作的讲解，接下来就进入第二个大的模块<code>DI依赖注入</code>，首先来介绍下Spring中有哪些注入方式?</p><p>我们先来思考</p><ul><li>向一个类中传递数据的方式有几种?<ul><li>普通方法(set方法)</li><li>构造方法</li></ul></li><li>依赖注入描述了在容器中建立bean与bean之间的依赖关系的过程，如果bean运行需要的是数字或字符串呢?<ul><li>引用类型</li><li>简单类型(基本数据类型与String)</li></ul></li></ul><p>Spring就是基于上面这些知识点，为我们提供了两种注入方式，分别是:</p><ul><li>setter注入<ul><li>简单类型</li><li>&#x3D;&#x3D;引用类型&#x3D;&#x3D;</li></ul></li><li>构造器注入<ul><li>简单类型</li><li>引用类型</li></ul></li></ul><p>依赖注入的方式已经介绍完，接下来挨个学习下:</p><h3 id="5-1-setter注入"><a href="#5-1-setter注入" class="headerlink" title="5.1 setter注入"></a>5.1 setter注入</h3><ol><li>对于setter方式注入引用类型的方式之前已经学习过，快速回顾下:</li></ol><ul><li>在bean中定义引用类型属性，并提供可访问的&#x3D;&#x3D;set&#x3D;&#x3D;方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置中使用&#x3D;&#x3D;property&#x3D;&#x3D;标签&#x3D;&#x3D;ref&#x3D;&#x3D;属性注入引用类型对象</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.imipl.BookDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-1-1-环境准备"><a href="#5-1-1-环境准备" class="headerlink" title="5.1.1 环境准备"></a>5.1.1 环境准备</h4><p>为了更好的学习下面内容，我们依旧准备一个新环境:</p><ul><li>创建一个Maven项目</li><li>pom.xml添加依赖</li><li>resources下添加spring的配置文件</li></ul><p>这些步骤和前面的都一致，大家可以快速的拷贝即可，最终项目的结构如下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172307145.png" alt="1629799214191"></p><p>(1)项目中添加BookDao、BookDaoImpl、UserDao、UserDaoImpl、BookService和BookServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)resources下提供spring的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3)编写AppForDISet运行类，加载Spring的IOC容器，并从中获取对应的bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForDISet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> (BookService) ctx.getBean(<span class="string">&quot;bookService&quot;</span>);</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，在上面这个环境中来完成setter注入的学习:</p><h4 id="5-1-2-注入引用数据类型"><a href="#5-1-2-注入引用数据类型" class="headerlink" title="5.1.2 注入引用数据类型"></a>5.1.2 注入引用数据类型</h4><blockquote><p>需求:在bookServiceImpl对象中注入userDao</p><p>1.在BookServiceImpl中声明userDao属性</p><p>2.为userDao属性提供setter方法</p><p>3.在配置文件中使用property标签注入</p></blockquote><h5 id="步骤1-声明属性并提供setter方法"><a href="#步骤1-声明属性并提供setter方法" class="headerlink" title="步骤1:声明属性并提供setter方法"></a>步骤1:声明属性并提供setter方法</h5><p>在BookServiceImpl中声明userDao属性，并提供setter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2-配置文件中进行注入配置"><a href="#步骤2-配置文件中进行注入配置" class="headerlink" title="步骤2:配置文件中进行注入配置"></a>步骤2:配置文件中进行注入配置</h5><p>在applicationContext.xml配置文件中使用property标签注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤3-运行程序-2"><a href="#步骤3-运行程序-2" class="headerlink" title="步骤3:运行程序"></a>步骤3:运行程序</h5><p>运行AppForDISet类，查看结果，说明userDao已经成功注入。</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172307443.png" alt="1629799873386"></p><h4 id="5-1-3-注入简单数据类型"><a href="#5-1-3-注入简单数据类型" class="headerlink" title="5.1.3 注入简单数据类型"></a>5.1.3 注入简单数据类型</h4><blockquote><p>需求：给BookDaoImpl注入一些简单数据类型的数据</p><p>参考引用数据类型的注入，我们可以推出具体的步骤为:</p><p>1.在BookDaoImpl类中声明对应的简单数据类型的属性</p><p>2.为这些属性提供对应的setter方法</p><p>3.在applicationContext.xml中配置</p></blockquote><p><strong>思考:</strong></p><p>引用类型使用的是<code>&lt;property name=&quot;&quot; ref=&quot;&quot;/&gt;</code>,简单数据类型还是使用ref么?</p><p>ref是指向Spring的IOC容器中的另一个bean对象的，对于简单数据类型，没有对应的bean对象，该如何配置?</p><h5 id="步骤1-声明属性并提供setter方法-1"><a href="#步骤1-声明属性并提供setter方法-1" class="headerlink" title="步骤1:声明属性并提供setter方法"></a>步骤1:声明属性并提供setter方法</h5><p>在BookDaoImpl类中声明对应的简单数据类型的属性,并提供对应的setter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String databaseName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> connectionNum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setConnectionNum</span><span class="params">(<span class="type">int</span> connectionNum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.connectionNum = connectionNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDatabaseName</span><span class="params">(String databaseName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.databaseName = databaseName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>+databaseName+<span class="string">&quot;,&quot;</span>+connectionNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2-配置文件中进行注入配置-1"><a href="#步骤2-配置文件中进行注入配置-1" class="headerlink" title="步骤2:配置文件中进行注入配置"></a>步骤2:配置文件中进行注入配置</h5><p>在applicationContext.xml配置文件中使用property标签注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>value:后面跟的是简单数据类型，对于参数类型，Spring在注入的时候会自动转换，但是不能写成</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;abc&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这样的话，spring在将<code>abc</code>转换成int类型的时候就会报错。</p><h5 id="步骤3-运行程序-3"><a href="#步骤3-运行程序-3" class="headerlink" title="步骤3:运行程序"></a>步骤3:运行程序</h5><p>运行AppForDISet类，查看结果，说明userDao已经成功注入。</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172307780.png" alt="1629800324721"></p><p>**注意:**两个property注入标签的顺序可以任意。</p><p>对于setter注入方式的基本使用就已经介绍完了，</p><ul><li>对于引用数据类型使用的是<code>&lt;property name=&quot;&quot; ref=&quot;&quot;/&gt;</code></li><li>对于简单数据类型使用的是<code>&lt;property name=&quot;&quot; value=&quot;&quot;/&gt;</code></li></ul><h3 id="5-2-构造器注入"><a href="#5-2-构造器注入" class="headerlink" title="5.2 构造器注入"></a>5.2 构造器注入</h3><h4 id="5-2-1-环境准备"><a href="#5-2-1-环境准备" class="headerlink" title="5.2.1 环境准备"></a>5.2.1 环境准备</h4><p>构造器注入也就是构造方法注入，学习之前，还是先准备下环境:</p><ul><li>创建一个Maven项目</li><li>pom.xml添加依赖</li><li>resources下添加spring的配置文件</li></ul><p>这些步骤和前面的都一致，大家可以快速的拷贝即可，最终项目的结构如下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172307329.png" alt="1629800748639"></p><p>(1)项目中添加BookDao、BookDaoImpl、UserDao、UserDaoImpl、BookService和BookServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String databaseName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> connectionNum;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)resources下提供spring的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3)编写AppForDIConstructor运行类，加载Spring的IOC容器，并从中获取对应的bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForDIConstructor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> (BookService) ctx.getBean(<span class="string">&quot;bookService&quot;</span>);</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-构造器注入引用数据类型"><a href="#5-2-2-构造器注入引用数据类型" class="headerlink" title="5.2.2 构造器注入引用数据类型"></a>5.2.2 构造器注入引用数据类型</h4><p>接下来，在上面这个环境中来完成构造器注入的学习:</p><blockquote><p>需求：将BookServiceImpl类中的bookDao修改成使用构造器的方式注入。</p><p>1.将bookDao的setter方法删除掉</p><p>2.添加带有bookDao参数的构造方法</p><p>3.在applicationContext.xml中配置</p></blockquote><h5 id="步骤1-删除setter方法并提供构造方法"><a href="#步骤1-删除setter方法并提供构造方法" class="headerlink" title="步骤1:删除setter方法并提供构造方法"></a>步骤1:删除setter方法并提供构造方法</h5><p>在BookServiceImpl类中将bookDao的setter方法删除掉,并添加带有bookDao参数的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookServiceImpl</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2-配置文件中进行配置构造方式注入"><a href="#步骤2-配置文件中进行配置构造方式注入" class="headerlink" title="步骤2:配置文件中进行配置构造方式注入"></a>步骤2:配置文件中进行配置构造方式注入</h5><p>在applicationContext.xml中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>标签<constructor-arg>中</p><ul><li><p>name属性对应的值为构造函数中方法形参的参数名，必须要保持一致。</p></li><li><p>ref属性指向的是spring的IOC容器中其他bean对象。</p></li></ul><h5 id="步骤3：运行程序"><a href="#步骤3：运行程序" class="headerlink" title="步骤3：运行程序"></a>步骤3：运行程序</h5><p>运行AppForDIConstructor类，查看结果，说明bookDao已经成功注入。</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172307641.png" alt="1629802656916"></p><h4 id="5-2-3-构造器注入多个引用数据类型"><a href="#5-2-3-构造器注入多个引用数据类型" class="headerlink" title="5.2.3 构造器注入多个引用数据类型"></a>5.2.3 构造器注入多个引用数据类型</h4><blockquote><p>需求:在BookServiceImpl使用构造函数注入多个引用数据类型，比如userDao</p><p>1.声明userDao属性</p><p>2.生成一个带有bookDao和userDao参数的构造函数</p><p>3.在applicationContext.xml中配置注入</p></blockquote><h5 id="步骤1-提供多个属性的构造函数"><a href="#步骤1-提供多个属性的构造函数" class="headerlink" title="步骤1:提供多个属性的构造函数"></a>步骤1:提供多个属性的构造函数</h5><p>在BookServiceImpl声明userDao并提供多个参数的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookServiceImpl</span><span class="params">(BookDao bookDao,UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤2:配置文件中配置多参数注入</p><p>在applicationContext.xml中配置注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>**说明:**这两个<code>&lt;contructor-arg&gt;</code>的配置顺序可以任意</p><h5 id="步骤3-运行程序-4"><a href="#步骤3-运行程序-4" class="headerlink" title="步骤3:运行程序"></a>步骤3:运行程序</h5><p>运行AppForDIConstructor类，查看结果，说明userDao已经成功注入。</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172307757.png" alt="1629802697318"></p><h4 id="5-2-4-构造器注入多个简单数据类型"><a href="#5-2-4-构造器注入多个简单数据类型" class="headerlink" title="5.2.4 构造器注入多个简单数据类型"></a>5.2.4 构造器注入多个简单数据类型</h4><blockquote><p>需求:在BookDaoImpl中，使用构造函数注入databaseName和connectionNum两个参数。</p><p>参考引用数据类型的注入，我们可以推出具体的步骤为:</p><p>1.提供一个包含这两个参数的构造方法</p><p>2.在applicationContext.xml中进行注入配置</p></blockquote><h5 id="步骤1-添加多个简单属性并提供构造方法"><a href="#步骤1-添加多个简单属性并提供构造方法" class="headerlink" title="步骤1:添加多个简单属性并提供构造方法"></a>步骤1:添加多个简单属性并提供构造方法</h5><p>修改BookDaoImpl类，添加构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String databaseName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> connectionNum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookDaoImpl</span><span class="params">(String databaseName, <span class="type">int</span> connectionNum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.databaseName = databaseName;</span><br><span class="line">        <span class="built_in">this</span>.connectionNum = connectionNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>+databaseName+<span class="string">&quot;,&quot;</span>+connectionNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2-配置完成多个属性构造器注入"><a href="#步骤2-配置完成多个属性构造器注入" class="headerlink" title="步骤2:配置完成多个属性构造器注入"></a>步骤2:配置完成多个属性构造器注入</h5><p>在applicationContext.xml中进行注入配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;databaseName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;connectionNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;666&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>**说明:**这两个<code>&lt;contructor-arg&gt;</code>的配置顺序可以任意</p><h5 id="步骤3-运行程序-5"><a href="#步骤3-运行程序-5" class="headerlink" title="步骤3:运行程序"></a>步骤3:运行程序</h5><p>运行AppForDIConstructor类，查看结果</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172307695.png" alt="1629803111769"></p><p>上面已经完成了构造函数注入的基本使用，但是会存在一些问题:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172307485.png" alt="1629803529598"></p><ul><li>当构造函数中方法的参数名发生变化后，配置文件中的name属性也需要跟着变</li><li>这两块存在紧耦合，具体该如何解决?</li></ul><p>在解决这个问题之前，需要提前说明的是，这个参数名发生变化的情况并不多，所以上面的还是比较主流的配置方式，下面介绍的，大家都以了解为主。</p><p>方式一:删除name属性，添加type属性，按照类型注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这种方式可以解决构造函数形参名发生变化带来的耦合问题</li><li>但是如果构造方法参数中有类型相同的参数，这种方式就不太好实现了</li></ul><p>方式二:删除type属性，添加index属性，按照索引下标注入，下标从0开始</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这种方式可以解决参数类型重复问题</li><li>但是如果构造方法参数顺序发生变化后，这种方式又带来了耦合问题</li></ul><p>介绍完两种参数的注入方式，具体我们该如何选择呢?</p><ol><li>强制依赖使用构造器进行，使用setter注入有概率不进行注入导致null对象出现<ul><li>强制依赖指对象在创建的过程中必须要注入指定的参数</li></ul></li><li>可选依赖使用setter注入进行，灵活性强<ul><li>可选依赖指对象在创建过程中注入的参数可有可无</li></ul></li><li>Spring框架倡导使用构造器，第三方框架内部大多数采用构造器注入的形式进行数据初始化，相对严谨</li><li>如果有必要可以两者同时使用，使用构造器注入完成强制依赖的注入，使用setter注入完成可选依赖的注入</li><li>实际开发过程中还要根据实际情况分析，如果受控对象没有提供setter方法就必须使用构造器注入</li><li><strong>&#x3D;&#x3D;自己开发的模块推荐使用setter注入&#x3D;&#x3D;</strong></li></ol><p>这节中主要讲解的是Spring的依赖注入的实现方式:</p><ul><li><p>setter注入</p><ul><li><p>简单数据类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引用数据类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>构造器注入</p><ul><li><p>简单数据类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">index</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引用数据类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">index</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>依赖注入的方式选择上</p><ul><li>建议使用setter注入</li><li>第三方技术根据情况选择</li></ul></li></ul><h3 id="5-3-自动配置"><a href="#5-3-自动配置" class="headerlink" title="5.3 自动配置"></a>5.3 自动配置</h3><p>前面花了大量的时间把Spring的注入去学习了下，总结起来就一个字&#x3D;&#x3D;麻烦&#x3D;&#x3D;。</p><p>问:麻烦在哪?</p><p>答:配置文件的编写配置上。</p><p>问:有更简单方式么?</p><p>答:有，自动配置</p><p>什么是自动配置以及如何实现自动配置，就是接下来要学习的内容：</p><h4 id="5-3-1-什么是依赖自动装配"><a href="#5-3-1-什么是依赖自动装配" class="headerlink" title="5.3.1 什么是依赖自动装配?"></a>5.3.1 什么是依赖自动装配?</h4><ul><li>IoC容器根据bean所依赖的资源在容器中自动查找并注入到bean中的过程称为自动装配</li></ul><h4 id="5-3-2-自动装配方式有哪些"><a href="#5-3-2-自动装配方式有哪些" class="headerlink" title="5.3.2 自动装配方式有哪些?"></a>5.3.2 自动装配方式有哪些?</h4><ul><li>&#x3D;&#x3D;按类型（常用）&#x3D;&#x3D;</li><li>按名称</li><li>按构造方法</li><li>不启用自动装配</li></ul><h4 id="5-3-3-准备下案例环境"><a href="#5-3-3-准备下案例环境" class="headerlink" title="5.3.3 准备下案例环境"></a>5.3.3 准备下案例环境</h4><ul><li>创建一个Maven项目</li><li>pom.xml添加依赖</li><li>resources下添加spring的配置文件</li></ul><p>这些步骤和前面的都一致，大家可以快速的拷贝即可，最终项目的结构如下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172308592.png" alt="1629805387647"></p><p>(1)项目中添加BookDao、BookDaoImpl、BookService和BookServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String databaseName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> connectionNum;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)resources下提供spring的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3)编写AppForAutoware运行类，加载Spring的IOC容器，并从中获取对应的bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForAutoware</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> (BookService) ctx.getBean(<span class="string">&quot;bookService&quot;</span>);</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-4-完成自动装配的配置"><a href="#5-3-4-完成自动装配的配置" class="headerlink" title="5.3.4 完成自动装配的配置"></a>5.3.4 完成自动装配的配置</h4><p>接下来，在上面这个环境中来完成<code>自动装配</code>的学习:</p><p>自动装配只需要修改applicationContext.xml配置文件即可:</p><p>(1)将<code>&lt;property&gt;</code>标签删除</p><p>(2)在<code>&lt;bean&gt;</code>标签中添加autowire属性</p><p>首先来实现<strong>按照类型注入</strong>的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--autowire属性：开启自动装配，通常使用按类型装配--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Spring 容器会尝试将某个 Bean 的属性与其他 Bean 的类型进行匹配。</span></span><br><span class="line"><span class="comment">    如果找到与属性类型相同的 Bean，就会自动将其注入到目标 Bean 中。--&gt;</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意事项:&#x3D;&#x3D;</p><ul><li>需要注入属性的类中对应属性的setter方法不能省略</li><li>被注入的对象必须要被Spring的IOC容器管理</li><li>按照类型在Spring的IOC容器中如果找到多个对象，会报<code>NoUniqueBeanDefinitionException</code></li></ul><p>一个类型在IOC中有多个对象，还想要注入成功，这个时候就需要<strong>按照名称注入</strong>，配置方式为:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--autowire属性：开启自动装配，通常使用按类型装配--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意事项:&#x3D;&#x3D;</p><ul><li><p>按照名称注入中的名称指的是什么?</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172308208.png" alt="1629806856156"></p><ul><li>bookDao是private修饰的，外部类无法直接方法</li><li>外部类只能通过属性的set方法进行访问</li><li>对外部类来说，setBookDao方法名，去掉set后首字母小写是其属性名<ul><li>为什么是去掉set首字母小写?</li><li>这个规则是set方法生成的默认规则，set方法的生成是把属性名首字母大写前面加set形成的方法名</li></ul></li><li><strong>所以按照名称注入，其实是和对应的set方法有关</strong>，但是如果按照标准起名称，属性名和set对应的名是一致的</li></ul></li><li><p>如果按照名称去找对应的bean对象，找不到则注入Null</p></li><li><p>当某一个类型在IOC容器中有多个对象，按照名称注入只找其指定名称对应的bean对象，不会报错</p></li></ul><p>两种方式介绍完后，以后用的更多的是&#x3D;&#x3D;按照类型&#x3D;&#x3D;注入。</p><p>最后对于依赖注入，需要注意一些其他的配置特征:</p><ol><li>自动装配用于引用类型依赖注入，不能对简单类型进行操作</li><li>使用按类型装配时（byType）必须保障容器中相同类型的bean唯一，推荐使用</li><li>使用按名称装配时（byName）必须保障容器中具有指定名称的bean，因变量名与配置耦合，不推荐使用</li><li>自动装配优先级低于setter注入与构造器注入，同时出现时自动装配配置失效</li></ol><h3 id="5-4-集合注入"><a href="#5-4-集合注入" class="headerlink" title="5.4 集合注入"></a>5.4 集合注入</h3><p>前面我们已经能完成引入数据类型和简单数据类型的注入，但是还有一种数据类型&#x3D;&#x3D;集合&#x3D;&#x3D;，集合中既可以装简单数据类型也可以装引用数据类型，对于集合，在Spring中该如何注入呢?</p><p>先来回顾下，常见的集合类型有哪些?</p><ul><li>数组</li><li>List</li><li>Set</li><li>Map</li><li>Properties</li></ul><p>针对不同的集合类型，该如何实现注入呢?</p><h4 id="5-4-1-环境准备"><a href="#5-4-1-环境准备" class="headerlink" title="5.4.1 环境准备"></a>5.4.1 环境准备</h4><ul><li>创建一个Maven项目</li><li>pom.xml添加依赖</li><li>resources下添加spring的配置文件applicationContext.xml</li></ul><p>这些步骤和前面的都一致，大家可以快速的拷贝即可，最终项目的结构如下:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172308212.png" alt="1629807579330"></p><p>(1)项目中添加添加BookDao、BookDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] array;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;遍历数组:&quot;</span> + Arrays.toString(array));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;遍历List&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;遍历Set&quot;</span> + set);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;遍历Map&quot;</span> + map);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;遍历Properties&quot;</span> + properties);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//setter....方法省略，自己使用工具生成</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)resources下提供spring的配置文件，applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3)编写AppForDICollection运行类，加载Spring的IOC容器，并从中获取对应的bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForDICollection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，在上面这个环境中来完成<code>集合注入</code>的学习:</p><p>下面的所以配置方式，都是在bookDao的bean标签中使用<property>进行注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-4-2-注入数组类型数据"><a href="#5-4-2-注入数组类型数据" class="headerlink" title="5.4.2 注入数组类型数据"></a>5.4.2 注入数组类型数据</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;array&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>200<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>300<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-4-3-注入List类型数据"><a href="#5-4-3-注入List类型数据" class="headerlink" title="5.4.3 注入List类型数据"></a>5.4.3 注入List类型数据</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>itheima<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>boxuegu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>chuanzhihui<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-4-4-注入Set类型数据"><a href="#5-4-4-注入Set类型数据" class="headerlink" title="5.4.4 注入Set类型数据"></a>5.4.4 注入Set类型数据</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>itheima<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>boxuegu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>boxuegu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-4-5-注入Map类型数据"><a href="#5-4-5-注入Map类型数据" class="headerlink" title="5.4.5 注入Map类型数据"></a>5.4.5 注入Map类型数据</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;country&quot;</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;province&quot;</span> <span class="attr">value</span>=<span class="string">&quot;henan&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;city&quot;</span> <span class="attr">value</span>=<span class="string">&quot;kaifeng&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-4-6-注入Properties类型数据"><a href="#5-4-6-注入Properties类型数据" class="headerlink" title="5.4.6 注入Properties类型数据"></a>5.4.6 注入Properties类型数据</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;country&quot;</span>&gt;</span>china<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;province&quot;</span>&gt;</span>henan<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;city&quot;</span>&gt;</span>kaifeng<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置完成后，运行下看结果:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172308506.png" alt="1629808046783"></p><p><strong>说明：</strong></p><ul><li>property标签表示setter方式注入，构造方式注入constructor-arg标签内部也可以写<code>&lt;array&gt;</code>、<code>&lt;list&gt;</code>、<code>&lt;set&gt;</code>、<code>&lt;map&gt;</code>、<code>&lt;props&gt;</code>标签</li><li>List的底层也是通过数组实现的，所以<code>&lt;list&gt;</code>和<code>&lt;array&gt;</code>标签是可以混用</li><li>集合中要添加引用类型，只需要把<code>&lt;value&gt;</code>标签改成<code>&lt;ref&gt;</code>标签，这种方式用的比较少</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git分布式版本控制工具</title>
      <link href="/2024/05/17/git/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/"/>
      <url>/2024/05/17/git/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="Git-分布式版本控制工具"><a href="#Git-分布式版本控制工具" class="headerlink" title="Git - 分布式版本控制工具"></a>Git - 分布式版本控制工具</h1><h2 id="1、目标"><a href="#1、目标" class="headerlink" title="1、目标"></a>1、目标</h2><ul><li>了解Git基本概念</li><li>能够概述Git工作流程</li><li>能够使用Git常用命令</li><li>熟悉Git代码托管服务</li><li>能够使用IDEA操作Git</li></ul><h2 id="2、概述"><a href="#2、概述" class="headerlink" title="2、概述"></a>2、概述</h2><h3 id="2-1、开发中的实际场景"><a href="#2-1、开发中的实际场景" class="headerlink" title="2.1、开发中的实际场景"></a>2.1、开发中的实际场景</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">场景一：备份</span><br><span class="line">小明负责的模块就要完成了，就在即将Release之前的一瞬间，电脑突然蓝屏，硬盘光荣牺牲！几个月来的努力付之东流</span><br><span class="line"></span><br><span class="line">场景二：代码还原</span><br><span class="line">这个项目中需要一个很复杂的功能，老王摸索了一个星期终于有眉目了，可是这被改得面目全非的代码已经回不到从前了。什么地方能买到哆啦A梦的时光机啊？</span><br><span class="line"></span><br><span class="line">场景三：协同开发</span><br><span class="line">小刚和小强先后从文件服务器上下载了同一个文件：Analysis.java。小刚在Analysis.java文件中的第30行声明了一个方法，叫count()，先保存到了文件服务器上；小强在Analysis.java文件中的第50行声明了一个方法，叫sum()，也随后保存到了文件服务器上，于是，count()方法就只存在于小刚的记忆中了</span><br><span class="line"></span><br><span class="line">场景四：追溯问题代码的编写人和编写时间！</span><br><span class="line">老王是另一位项目经理，每次因为项目进度挨骂之后，他都不知道该扣哪个程序员的工资！就拿这次来说吧，有个Bug调试了30多个小时才知道是因为相关属性没有在应用初始化时赋值！可是二胖、王东、刘流和正经牛都不承认是自己干的！</span><br></pre></td></tr></table></figure><h3 id="2-2、版本控制器的方式"><a href="#2-2、版本控制器的方式" class="headerlink" title="2.2、版本控制器的方式"></a>2.2、版本控制器的方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a、集中式版本控制工具</span><br><span class="line">集中式版本控制工具，版本库是集中存放在中央服务器的，team里每个人work时从中央服务器下载代码，是必须联网才能工作，局域网或互联网。个人修改后然后提交到中央版本库。</span><br><span class="line">举例：SVN和CVS</span><br><span class="line">b、分布式版本控制工具</span><br><span class="line">分布式版本控制系统没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样工作的时候，无需要联网了，因为版本库就在你自己的电脑上。多人协作只需要各自的修改推送给对方，就能互相看到对方的修改了。</span><br><span class="line">举例：Git</span><br></pre></td></tr></table></figure><h3 id="2-3、SVN"><a href="#2-3、SVN" class="headerlink" title="2.3、SVN"></a>2.3、SVN</h3><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172232008.png" alt="SVN"></p><h3 id="2-4、Git"><a href="#2-4、Git" class="headerlink" title="2.4、Git"></a>2.4、Git</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Git是分布式的,Git不需要有中心服务器，我们每台电脑拥有的东西都是一样的。我们使用Git并且有个中心服务器，仅仅是为了方便交换大家的修改，但是这个服务器的地位和我们每个人的PC是一样的。我们可以把它当做一个开发者的pc就可以就是为了大家代码容易交流不关机用的。没有它大家一样可以工作，只不过“交换”修改不方便而已。</span><br><span class="line">git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git是Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</span><br><span class="line">同生活中的许多伟大事物一样，Git 诞生于一个极富纷争大举创新的年代。Linux 内核开源项目有着为数众多的参与者。 绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。 到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。</span><br><span class="line">到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了Linux 内核社区免费使用 BitKeeper 的权力。 这就迫使 Linux 开源社区（特别是 Linux 的缔造者Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。 他们对新的系统制订了若干目标：</span><br><span class="line"> 速度</span><br><span class="line"> 简单的设计</span><br><span class="line"> 对非线性开发模式的强力支持（允许成千上万个并行开发的分支）</span><br><span class="line"> 完全分布式</span><br><span class="line"> 有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172232365.png" alt="Git"></p><h3 id="2-5、Git工作流程图"><a href="#2-5、Git工作流程图" class="headerlink" title="2.5、Git工作流程图"></a>2.5、Git工作流程图</h3><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172232630.png" alt="Git工作流程图"></p><p>命令如下：</p><ol><li>clone（克隆）: 从远程仓库中克隆代码到本地仓库</li><li>checkout （检出）:从本地仓库中检出一个仓库分支然后进行修订</li><li>add（添加）: 在提交前先将代码提交到暂存区</li><li>commit（提交）: 提交到本地仓库。本地仓库中保存修改的各个历史版本</li><li>fetch (抓取) ： 从远程库，抓取到本地仓库，不进行任何的合并动作，一般操作比较少。</li><li>pull (拉取) ： 从远程库拉到本地库，自动进行合并(merge)，然后放到到工作区，相当于fetch+merge</li><li>push（推送） : 修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库</li></ol><h2 id="3、Git安装与常用命令"><a href="#3、Git安装与常用命令" class="headerlink" title="3、Git安装与常用命令"></a>3、Git安装与常用命令</h2><p>本教程里的git命令例子都是在Git Bash中演示的，会用到一些基本的linux命令，在此为大家提前列举：</p><ul><li><code>ls</code>&#x2F;<code>ll</code> 查看当前目录</li><li><code>cat</code> 查看文件内容</li><li><code>touch</code> 创建文件</li><li><code>vi</code> vi编辑器（使用vi编辑器是为了方便展示效果，学员可以记事本、EditPlus、NotePad++等其它编辑器）</li></ul><h3 id="3-1、-Git环境配置"><a href="#3-1、-Git环境配置" class="headerlink" title="3.1、 Git环境配置"></a>3.1、 Git环境配置</h3><h4 id="3-1-1-下载与安装"><a href="#3-1-1-下载与安装" class="headerlink" title="3.1.1 下载与安装"></a>3.1.1 下载与安装</h4><p>下载地址： <a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172232352.png" alt="Git下载与安装"></p><p>下载完成后可以得到如下安装文件：</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172232626.png" alt="Git安装包"></p><p>双击下载的安装文件来安装Git。安装完成后在电脑桌面（也可以是其他目录)点击右键，如果能够看到如下两个菜单则说明Git安装成功。</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172232416.png" alt="Git右键菜单"></p><p>备注：</p><p>Git GUI：Git提供的图形界面工具</p><p>Git Bash：Git提供的命令行工具</p><p>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息</p><h4 id="3-1-2基本配置"><a href="#3-1-2基本配置" class="headerlink" title="3.1.2基本配置"></a>3.1.2基本配置</h4><ol><li>打开Git Bash</li><li>设置用户信息<br> <code>git config --global user.name “itcast”</code><br> <code>git config --global user.email “hello@itcast.cn”</code></li></ol><p>查看配置信息<br><code>git config --global user.name</code><br><code>git config --global user.email</code></p><h4 id="3-1-3-为常用指令配置别名（可选）"><a href="#3-1-3-为常用指令配置别名（可选）" class="headerlink" title="3.1.3 为常用指令配置别名（可选）"></a>3.1.3 为常用指令配置别名（可选）</h4><p>有些常用的指令参数非常多，每次都要输入好多参数，我们可以使用别名。</p><ol><li>打开用户目录，创建<code>.bashrc</code>文件<br> 部分windows系统不允许用户创建点号开头的文件，可以打开gitBash,执行<code>touch ~/.bashrc</code><br> <img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172232808.png" alt="创建bashrc"></li><li>在<code>.bashrc</code>文件中输入如下内容：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用于输出git提交日志</span></span><br><span class="line">alias git-log=&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用于输出当前目录所有文件及基本信息</span></span><br><span class="line">alias ll=&#x27;ls -al&#x27;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用于一次性暂存并提交所有修改和删除的文件</span></span><br><span class="line">alias commit=&#x27;git commit -a&#x27;</span><br></pre></td></tr></table></figure></li><li>打开gitBash，执行<code>source ~/.bashrc</code><br><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172233049.png" alt="bashrc"></li></ol><h4 id="3-1-4-解决GitBash乱码问题"><a href="#3-1-4-解决GitBash乱码问题" class="headerlink" title="3.1.4 解决GitBash乱码问题"></a>3.1.4 解决GitBash乱码问题</h4><ol><li><p>打开GitBash执行下面命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.quotepath false</span><br></pre></td></tr></table></figure></li><li><p><code>$&#123;git_home&#125;/etc/bash.bashrc</code>文件最后加入下面两行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export LANG=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">export LC_ALL=&quot;zh_CN.UTF-8&quot;</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-2、获取本地仓库"><a href="#3-2、获取本地仓库" class="headerlink" title="3.2、获取本地仓库"></a>3.2、获取本地仓库</h3><p>要使用Git对我们的代码进行版本控制，首先需要获得本地仓库<br>1）在电脑的任意位置创建一个空目录（例如test）作为我们的本地Git仓库<br>2）进入这个目录中，点击右键打开Git bash窗口<br>3）执行命令<code>git init</code><br>4）如果创建成功后可在文件夹下看到隐藏的.git目录。</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172233680.png" alt="获取本地仓库"></p><h3 id="3-3、基础操作指令"><a href="#3-3、基础操作指令" class="headerlink" title="3.3、基础操作指令"></a>3.3、基础操作指令</h3><p>Git工作目录下对于文件的<strong>修改</strong>（增加、删除、更新）会存在几个状态，这些修改的状态会随着我们执行Git的命令而发生变化。</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172233832.png" alt="基础操作指令"></p><p>本章节主要讲解如何使用命令来控制这些状态之间的转换：</p><ol><li>git add (工作区 –&gt; 暂存区)</li><li>git commit (暂存区 –&gt; 本地仓库)</li></ol><h4 id="3-3-1、-查看修改的状态-status"><a href="#3-3-1、-查看修改的状态-status" class="headerlink" title="3.3.1、*查看修改的状态(status)"></a>3.3.1、*查看修改的状态(status)</h4><ul><li>作用：查看的修改的状态（暂存区、工作区）</li><li>命令形式：<code>git status</code></li></ul><h4 id="3-3-2、-添加工作区到暂存区-add"><a href="#3-3-2、-添加工作区到暂存区-add" class="headerlink" title="3.3.2、*添加工作区到暂存区(add)"></a>3.3.2、*添加工作区到暂存区(add)</h4><ul><li>作用：添加工作区一个或多个文件的修改到暂存区</li><li>命令形式：<code>git add 单个文件名|通配符</code><ul><li>将所有修改加入暂存区：<code>git add .</code></li></ul></li></ul><h4 id="3-3-3、-提交暂存区到本地仓库-commit"><a href="#3-3-3、-提交暂存区到本地仓库-commit" class="headerlink" title="3.3.3、*提交暂存区到本地仓库(commit)"></a>3.3.3、*提交暂存区到本地仓库(commit)</h4><ul><li>作用：提交暂存区内容到本地仓库的当前分支</li><li>命令形式：<code>git commit -m &#39;注释内容&#39;</code></li></ul><h4 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h4><ul><li>命令形式：<code>git commit [options]</code><ul><li>options<ul><li><code>-a</code> &#x3D; <code>--all</code><br>automatically stage files that have been <strong>modified and deleted</strong>.<br>（新创建的文件仍需<code>git add</code>）</li></ul></li></ul></li></ul><h4 id="3-3-4、-查看提交日志-log"><a href="#3-3-4、-查看提交日志-log" class="headerlink" title="3.3.4、*查看提交日志(log)"></a>3.3.4、*查看提交日志(log)</h4><p><strong>在[3.1.3](#3.1.3 为常用指令配置别名（可选）)中配置的别名<code>git-log</code>就包含了这些参数，所以后续可以直接使用指令<code>git-log</code></strong></p><ul><li>作用:查看提交记录</li><li>命令形式：<code>git log [option]</code><ul><li>options<ul><li><code>--all</code> 显示所有分支</li><li><code>--pretty=oneline</code> 将提交信息显示为一行</li><li><code>--abbrev-commit</code> 使得输出的commitID更简短</li><li><code>--graph</code> 以图的形式显示</li></ul></li></ul></li></ul><h4 id="3-3-5、版本回退"><a href="#3-3-5、版本回退" class="headerlink" title="3.3.5、版本回退"></a>3.3.5、版本回退</h4><ul><li>作用：版本切换</li><li>命令形式：<code>git reset --hard commitID</code><ul><li>commitID 可以使用<code>git-log</code>或<code>git log</code>指令查看</li></ul></li><li>如何查看已经删除的记录？<ul><li><code>git reflog</code></li><li>这个指令可以看到已经删除的提交记录</li></ul></li></ul><h4 id="3-3-6、添加文件至忽略列表"><a href="#3-3-6、添加文件至忽略列表" class="headerlink" title="3.3.6、添加文件至忽略列表"></a>3.3.6、添加文件至忽略列表</h4><p>一般我们总会有些文件无需纳入Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以在工作目录中创建一个名为<code> .gitignore</code>的文件（文件名称固定），列出要忽略的文件模式。下面是一个示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">no .a files</span></span><br><span class="line">*.a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">but <span class="keyword">do</span> track lib.a, even though you<span class="string">&#x27;re ignoring .a files above</span></span></span><br><span class="line">!lib.a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">only ignore the &#x27;</span>TODO<span class="string">&#x27; file in the current directory, not subdir/TODO</span></span></span><br><span class="line">/TODO</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">ignore all files in the &#x27;</span>build/<span class="string">&#x27; directory</span></span></span><br><span class="line">build/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">ignore doc/notes.txt, but not doc/server/arch.txt</span></span></span><br><span class="line">doc/*.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">ignore all .pdf files in the doc/ directory</span></span></span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure><h4 id="练习-基础操作"><a href="#练习-基础操作" class="headerlink" title="练习:基础操作"></a>练习:基础操作</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">####################仓库初始化######################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建目录（git_test01）并在目录下打开gitbash</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化git仓库</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">####################创建文件并提交#####################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">目录下创建文件 file01.txt</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将修改加入暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将修改提交到本地仓库，提交记录内容为：commit 001</span></span><br><span class="line">git commit -m &#x27;commit 001&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看日志</span></span><br><span class="line">git log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###################修改文件并提交######################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改file01的内容为：count=1</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将修改加入暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># 将修改提交到本地仓库，提交记录内容为：update file01</span></span></span><br><span class="line">git commit -m &#x27;update file01&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看日志</span></span><br><span class="line">git log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###################将最后一次修改还原##################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到倒数第2次提交的commitID</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">版本回退</span></span><br><span class="line">git reset commitID --hard</span><br></pre></td></tr></table></figure><h3 id="3-4、分支"><a href="#3-4、分支" class="headerlink" title="3.4、分支"></a>3.4、分支</h3><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的Bug修改、开发新的功能，以免影响开发主线。</p><h4 id="3-4-1、查看本地分支"><a href="#3-4-1、查看本地分支" class="headerlink" title="3.4.1、查看本地分支"></a>3.4.1、查看本地分支</h4><ul><li>命令：<code>git branch</code></li></ul><h4 id="3-4-2、创建本地分支"><a href="#3-4-2、创建本地分支" class="headerlink" title="3.4.2、创建本地分支"></a>3.4.2、创建本地分支</h4><ul><li>命令：<code>git branch 分支名</code></li></ul><h4 id="3-4-4、-切换分支-checkout"><a href="#3-4-4、-切换分支-checkout" class="headerlink" title="3.4.4、*切换分支(checkout)"></a>3.4.4、*切换分支(checkout)</h4><ul><li>命令：<code>git checkout 分支名</code></li></ul><p>我们还可以直接切换到一个不存在的分支（创建并切换）</p><ul><li>命令：<code>git checkout -b 分支名</code></li></ul><h4 id="3-4-6、-合并分支-merge"><a href="#3-4-6、-合并分支-merge" class="headerlink" title="3.4.6、*合并分支(merge)"></a>3.4.6、*合并分支(merge)</h4><p>一个分支（合并分支）上的提交可以合并到另一个分支（目标分支）</p><ul><li>需要先切换到目标分支：<code>git checkout 目标分支名</code></li><li>合并命令：<code>git merge 合并分支名</code></li></ul><h4 id="3-4-7、删除分支"><a href="#3-4-7、删除分支" class="headerlink" title="3.4.7、删除分支"></a>3.4.7、删除分支</h4><p><strong>不能删除当前分支，只能删除其他分支</strong></p><ul><li><code>git branch -d 分支名</code> 删除分支时，需要做各种检查</li><li><code>git branch -D 分支名</code> 不做任何检查，强制删除</li><li>E.g.<br><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172233982.png" alt="删除分支"></li></ul><h4 id="3-4-8、解决冲突"><a href="#3-4-8、解决冲突" class="headerlink" title="3.4.8、解决冲突"></a>3.4.8、解决冲突</h4><p>当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解决冲突，解决冲突步骤如下：</p><ol><li>处理文件中冲突的地方</li><li>将解决完冲突的文件加入暂存区(add)</li><li>提交到仓库(commit)</li></ol><p>冲突部分的内容处理如下所示：</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172233341.png" alt="冲突处理.png"></p><h4 id="3-4-9、开发中分支使用原则与流程"><a href="#3-4-9、开发中分支使用原则与流程" class="headerlink" title="3.4.9、开发中分支使用原则与流程"></a>3.4.9、开发中分支使用原则与流程</h4><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的Bug修改、开发新的功能，以免影响开发主线。</p><p>在开发中，一般有如下分支使用原则与流程：</p><ul><li>master （生产） 分支<br>线上分支，主分支，中小规模项目作为线上运行的应用对应的分支。</li><li>develop（开发）分支<br>是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到master分支,准备上线。</li><li>feature&#x2F;xxxx分支<br>从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完成后合并到develop分支。</li><li>hotfix&#x2F;xxxx分支，<br>从master派生的分支，一般作为线上bug修复使用，修复完成后需要合并到master、test、develop分支。</li><li>还有一些其他分支，在此不再详述，例如test分支（用于代码测试）、pre分支（预上线分支）等等。</li><li><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172233249.png" alt="分支"></li></ul><h4 id="练习-分支操作"><a href="#练习-分支操作" class="headerlink" title="练习:分支操作"></a>练习:分支操作</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################创建并切换到dev01分支，在dev01分支提交</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]创建分支dev01</span></span><br><span class="line">git branch dev01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]切换到dev01</span></span><br><span class="line">git checkout dev01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[dev01]创建文件file02.txt</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[dev01]将修改加入暂存区并提交到仓库,提交记录内容为：add file02 on dev</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;add file02 on dev&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[dev01]以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################切换到master分支，将dev01合并到master分支</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[dev01]切换到master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]合并dev01到master分支</span></span><br><span class="line">git merge dev01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]查看文件变化(目录下也出现了file02.txt)</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#########################删除dev01分支</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]删除dev01分支</span></span><br><span class="line">git branch -d dev01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br></pre></td></tr></table></figure><h2 id="4、Git远程仓库"><a href="#4、Git远程仓库" class="headerlink" title="4、Git远程仓库"></a>4、Git远程仓库</h2><h3 id="4-1、-常用的托管服务-远程仓库"><a href="#4-1、-常用的托管服务-远程仓库" class="headerlink" title="4.1、 常用的托管服务[远程仓库]"></a>4.1、 常用的托管服务[远程仓库]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">前面我们已经知道了Git中存在两种类型的仓库，即本地仓库和远程仓库。那么我们如何搭建Git远程仓库呢？我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有GitHub、码云、GitLab等。</span><br><span class="line">gitHub（ 地址：https://github.com/ ）是一个面向开源及私有软件项目的托管平台，因为只支持Git 作为唯一的版本库格式进行托管，故名gitHub</span><br><span class="line">码云（地址： https://gitee.com/ ）是国内的一个代码托管平台，由于服务器在国内，所以相比于GitHub，码云速度会更快</span><br><span class="line">GitLab （地址： https://about.gitlab.com/ ）是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务,一般用于在企业、学校等内部网络搭建git私服。</span><br></pre></td></tr></table></figure><h3 id="4-2、-注册码云"><a href="#4-2、-注册码云" class="headerlink" title="4.2、 注册码云"></a>4.2、 注册码云</h3><p>要想使用码云的相关服务，需要注册账号（地址： <a href="https://gitee.com/signup">https://gitee.com/signup</a> ）</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172233230.png" alt="注册码云"></p><h3 id="4-3、-创建远程仓库"><a href="#4-3、-创建远程仓库" class="headerlink" title="4.3、 创建远程仓库"></a>4.3、 创建远程仓库</h3><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172233787.png" alt="创建远程仓库"></p><p>仓库创建完成后可以看到仓库地址，如下图所示:</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172233645.png" alt="仓库地址"></p><h3 id="4-4、配置SSH公钥"><a href="#4-4、配置SSH公钥" class="headerlink" title="4.4、配置SSH公钥"></a>4.4、配置SSH公钥</h3><ul><li>生成SSH公钥<ul><li><code>ssh-keygen -t rsa</code></li><li>不断回车<ul><li>如果公钥已经存在，则自动覆盖</li></ul></li></ul></li><li>Gitee设置账户共公钥<ul><li>获取公钥<ul><li><code>cat ~/.ssh/id_rsa.pub</code></li></ul></li><li><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172234478.png" alt="SSH公钥"></li><li>验证是否配置成功<ul><li><code>ssh -T git@gitee.com</code></li></ul></li></ul></li></ul><h3 id="4-5、操作远程仓库"><a href="#4-5、操作远程仓库" class="headerlink" title="4.5、操作远程仓库"></a>4.5、操作远程仓库</h3><h4 id="4-5-1、添加远程仓库"><a href="#4-5-1、添加远程仓库" class="headerlink" title="4.5.1、添加远程仓库"></a>4.5.1、添加远程仓库</h4><p><strong>此操作是先初始化本地库，然后与已创建的远程库进行对接。</strong></p><ul><li>命令： <code>git remote add &lt;远端名称&gt; &lt;仓库路径&gt;</code><ul><li>远端名称，默认是origin，取决于远端服务器设置</li><li>仓库路径，从远端服务器获取此URL</li><li>例如：<br> <code>git remote add origin git@gitee.com:czbk_zhang_meng/git_test.git</code><br><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172234651.png" alt="添加远程仓库"></li></ul></li></ul><h4 id="4-5-2、查看远程仓库"><a href="#4-5-2、查看远程仓库" class="headerlink" title="4.5.2、查看远程仓库"></a>4.5.2、查看远程仓库</h4><ul><li>命令：<code>git remote</code><br><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172234530.png" alt="查看远程仓库"></li></ul><h4 id="4-5-3、推送到远程仓库"><a href="#4-5-3、推送到远程仓库" class="headerlink" title="4.5.3、推送到远程仓库"></a>4.5.3、推送到远程仓库</h4><ul><li>命令：<code>git push[ -f][ --set-upstream][ 远端名称[ 本地分支名[:远端分支名]]]</code><ul><li>如果远程分支名和本地分支名称相同，则可以只写本地分支<ul><li><code>git push origin master</code>&#x3D;<code>git push origin master:master</code><br><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172234558.png" alt="推送到远程仓库-两种写法"></li></ul></li><li><code>-f</code> &#x3D; <code>--force</code> 表示强制覆盖</li><li><code>-u</code> &#x3D; <code>--set-upstream</code> 推送到远端的同时并且建立起和远端分支的关联关系。<ul><li><code>git push --set-upstream origin master</code></li></ul></li><li>如果<strong>当前分支已经和远端分支关联</strong>，则可以省略分支名和远端名。<ul><li><code>git push</code> 将master分支推送到已关联的远端分支。<br><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172234823.png" alt="推送到远程仓库"></li></ul></li></ul></li></ul><p>查询远程仓库</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172234715.png" alt="查询远程仓库"></p><h4 id="4-5-4、-本地分支与远程分支的关联关系"><a href="#4-5-4、-本地分支与远程分支的关联关系" class="headerlink" title="4.5.4、 本地分支与远程分支的关联关系"></a>4.5.4、 本地分支与远程分支的关联关系</h4><ul><li>查看关联关系我们可以使用 <code>git branch -vv</code> 命令</li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172234998.png" alt="查看本地分支和远程分支的关联关系"></p><h4 id="4-5-5、从远程仓库克隆"><a href="#4-5-5、从远程仓库克隆" class="headerlink" title="4.5.5、从远程仓库克隆"></a>4.5.5、从远程仓库克隆</h4><p>如果已经有一个远端仓库，我们可以直接clone到本地。</p><ul><li>命令: <code>git clone &lt;仓库路径&gt; [本地目录]</code><ul><li>本地目录可以省略，会自动生成一个目录</li></ul></li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172234905.png" alt="克隆远程仓库到本地"></p><h4 id="4-5-6、从远程仓库中抓取和拉取"><a href="#4-5-6、从远程仓库中抓取和拉取" class="headerlink" title="4.5.6、从远程仓库中抓取和拉取"></a>4.5.6、从远程仓库中抓取和拉取</h4><p>远程分支和本地的分支一样，我们可以进行merge操作，只是需要先把远端仓库里的更新都下载到本地，再进行操作。</p><ul><li>抓取 命令：<code>git fetch [remote name] [branch name]</code><ul><li><strong>抓取指令就是将仓库里的更新都抓取到本地，不会进行合并</strong></li><li>如果不指定远端名称和分支名，则抓取所有分支。</li></ul></li><li>拉取 命令：<code>git pull [remote name] [branch name]</code><ul><li><strong>拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+merge</strong></li><li>如果不指定远端名称和分支名，则抓取所有并更新当前分支。</li></ul></li></ul><ol><li>在test01这个本地仓库进行一次提交并推送到远程仓库<br><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172234159.png" alt="在test01这个本地仓库进行一次提交并推送到远程仓库"></li><li>在另一个仓库将远程提交的代码拉取到本地仓库<br><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172234506.png" alt="将仓库里远程提交的代码拉取到本地仓库"></li></ol><h4 id="4-5-7、解决合并冲突"><a href="#4-5-7、解决合并冲突" class="headerlink" title="4.5.7、解决合并冲突"></a>4.5.7、解决合并冲突</h4><p>在一段时间，A、B用户修改了同一个文件，且修改了同一行位置的代码，此时会发生合并冲突。</p><p>A用户在本地修改代码后优先推送到远程仓库，此时B用户在本地修订代码，提交到本地仓库后，也需要推送到远程仓库，此时B用户晚于A用户，<strong>故需要先拉取远程仓库的提交，经过合并后才能推送到远端分支</strong>，如下图所示。</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172234899.png" alt="解决远程仓库合并冲突"></p><p>在B用户拉取代码时，因为A、B用户同一段时间修改了同一个文件的相同位置代码，故会发生合并冲突。</p><p><strong>远程分支也是分支，所以合并时冲突的解决方式也和解决本地分支冲突相同相同</strong>，在此不再赘述，需要学员自己练习。</p><h4 id="练习-远程仓库操作"><a href="#练习-远程仓库操作" class="headerlink" title="练习:远程仓库操作"></a>练习:远程仓库操作</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#########################1-将本地仓库推送到远程仓库</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完成4.1、4.2、4.3、4.4的操作</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test01]添加远程仓库</span></span><br><span class="line">git remote add origin git@gitee.com/**/**.git</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test01]将master分支推送到远程仓库,并与远程仓库的master分支绑定关联关系</span></span><br><span class="line">git push --set-upstream origin master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################2-将远程仓库克隆到本地</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将远程仓库克隆到本地git_test02目录下</span></span><br><span class="line">git clone git@gitee.com/**/**.git git_test02</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test02]以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################3-将本地修改推送到远程仓库</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test01]创建文件file03.txt</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test01]将修改加入暂存区并提交到仓库,提交记录内容为：add file03</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;add file03&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test01]将master分支的修改推送到远程仓库</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################4-将远程仓库的修改更新到本地</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test02]将远程仓库修改再拉取到本地</span></span><br><span class="line">git pull</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看文件变化(目录下也出现了file03.txt)</span></span><br><span class="line">略</span><br></pre></td></tr></table></figure><h4 id="移除远程仓库"><a href="#移除远程仓库" class="headerlink" title="移除远程仓库"></a>移除远程仓库</h4><ul><li>命令：<code>git remote rm &lt;remote-name&gt;</code> &#x3D; <code>git remote remove &lt;remote-name&gt;</code></li></ul><h2 id="5、在Idea中使用Git"><a href="#5、在Idea中使用Git" class="headerlink" title="5、在Idea中使用Git"></a>5、在Idea中使用Git</h2><h3 id="5-1、在Idea中配置Git"><a href="#5-1、在Idea中配置Git" class="headerlink" title="5.1、在Idea中配置Git"></a>5.1、在Idea中配置Git</h3><p>安装好IntelliJ IDEA后，如果Git安装在默认路径下，那么idea会自动找到git的位置，如果更改了Git的安装位置则需要手动配置下Git的路径。选择File→Settings打开设置窗口，找到Version Control下的git选项：</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172235997.png" alt="在Idea中配置Git"></p><p>点击Test按钮,现在执行成功，配置完成</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172235673.png" alt="在Idea中成功配置Git"></p><h3 id="5-2、在Idea中操作Git"><a href="#5-2、在Idea中操作Git" class="headerlink" title="5.2、在Idea中操作Git"></a>5.2、在Idea中操作Git</h3><p>场景：本地已经有一个项目，但是并不是git项目，我们需要将这个放到码云的仓库里，和其他开发人员继续一起协作开发。</p><h4 id="5-2-1、创建项目远程仓库（参照4-3）"><a href="#5-2-1、创建项目远程仓库（参照4-3）" class="headerlink" title="5.2.1、创建项目远程仓库（参照4.3）"></a>5.2.1、创建项目远程仓库（参照4.3）</h4><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172235053.png" alt="IDEA-创建项目远程仓库"></p><h4 id="5-2-2、初始化本地仓库"><a href="#5-2-2、初始化本地仓库" class="headerlink" title="5.2.2、初始化本地仓库"></a>5.2.2、初始化本地仓库</h4><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172236094.png" alt="IDEA-初始化本地仓库"></p><h4 id="5-2-3、设置远程仓库"><a href="#5-2-3、设置远程仓库" class="headerlink" title="5.2.3、设置远程仓库"></a>5.2.3、设置远程仓库</h4><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172236885.png" alt="IDEA-设置远程仓库"></p><h4 id="5-2-4、提交到本地仓库"><a href="#5-2-4、提交到本地仓库" class="headerlink" title="5.2.4、提交到本地仓库"></a>5.2.4、提交到本地仓库</h4><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172236629.png" alt="IDEA-提交到本地仓库"></p><h4 id="5-2-6、推送到远程仓库"><a href="#5-2-6、推送到远程仓库" class="headerlink" title="5.2.6、推送到远程仓库"></a>5.2.6、推送到远程仓库</h4><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172236245.png" alt="IDEA-推送到远程仓库"></p><h4 id="5-2-7、克隆远程仓库到本地"><a href="#5-2-7、克隆远程仓库到本地" class="headerlink" title="5.2.7、克隆远程仓库到本地"></a>5.2.7、克隆远程仓库到本地</h4><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172236491.png" alt="IDEA-克隆远程仓库到本地"></p><h4 id="5-2-8、创建分支"><a href="#5-2-8、创建分支" class="headerlink" title="5.2.8、创建分支"></a>5.2.8、创建分支</h4><ul><li>最常规的方式<br><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172236767.png" alt="IDEA-创建分支（常规）"></li><li>最强大的的方式<br><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172236172.png" alt="IDEA-创建分支（强大）"></li></ul><h4 id="5-2-9、切换分支及其他分支相关操作"><a href="#5-2-9、切换分支及其他分支相关操作" class="headerlink" title="5.2.9、切换分支及其他分支相关操作"></a>5.2.9、切换分支及其他分支相关操作</h4><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172236398.png" alt="IDEA-切换分支及其他分支相关操作"></p><h4 id="5-2-11、解决冲突"><a href="#5-2-11、解决冲突" class="headerlink" title="5.2.11、解决冲突"></a>5.2.11、解决冲突</h4><ol><li>执行merge或pull操作时，可能发生冲突<br>  <img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172236862.png" alt="IDEA-解决冲突"></li><li>冲突解决后加入暂存区<br> 略</li><li>提交到本地仓库<br> 略</li><li>推送到远程仓库<br> 略</li></ol><h3 id="5-3、IDEA常用GIT操作入口"><a href="#5-3、IDEA常用GIT操作入口" class="headerlink" title="5.3、IDEA常用GIT操作入口"></a>5.3、IDEA常用GIT操作入口</h3><ol><li>第一张图上的快捷入口可以基本满足开发的需求。<br><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172236597.png" alt="IDEA常用GIT操作入口"></li><li>第二张图是更多在IDEA操作git的入口。<br><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172237924.png" alt="IDEA常用GIT操作入口"></li></ol><h3 id="5-4、场景分析"><a href="#5-4、场景分析" class="headerlink" title="5.4、场景分析"></a>5.4、场景分析</h3><p>基于我们后面的实战模式，我们做一个综合练习</p><p>当前的开发环境如下，我们每个人都对这个项目已经开发一段时间，接下来我们要切换成团队开发模<br>式。</p><p>也就是我们由一个团队来完成这个项目实战的内容。团队有组长和若干组员组成（组长就是开发中的项<br>目经理）。</p><p>所有操作都在idea中完成。</p><p>练习场景如下：</p><ol><li>由组长，基于本项目创建本地仓库；创建远程仓库，推送项目到远程仓库。<br><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172237535.png" alt="综合练习-1"></li><li>每一位组员从远程仓库克隆项目到idea中,这样每位同学在自己电脑上就有了一个工作副本，可以正<br>式的开始开发了。我们模拟两个组员(组员A、组员B)，克隆两个工作区。<br><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172237341.png" alt="综合练习-2"></li><li>组员A修改工作区,提交到本地仓库，再推送到远程仓库。组员B可以直接从远程仓库获取最新的代<br>码。<br><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172237648.png" alt="综合练习-3"></li><li>组员A和组员B修改了同一个文件的同一行，提交到本地没有问题，但是推送到远程仓库时，后一个<br>推送操作就会失败。<br>解决方法：需要先获取远程仓库的代码到本地仓库，编辑冲突，提交并推送代码。<br><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172237964.png" alt="综合练习-4"></li></ol><h2 id="附-几条铁令"><a href="#附-几条铁令" class="headerlink" title="附:几条铁令"></a>附:几条铁令</h2><ol><li><strong>切换分支前先提交本地的修改</strong></li><li>代码及时提交，提交过了就不会丢</li><li>遇到任何问题都不要删除文件目录，第1时间找老师</li></ol><h2 id="附-疑难问题解决"><a href="#附-疑难问题解决" class="headerlink" title="附:疑难问题解决"></a>附:疑难问题解决</h2><h3 id="1-windows下看不到隐藏的文件（-bashrc、-gitignore）"><a href="#1-windows下看不到隐藏的文件（-bashrc、-gitignore）" class="headerlink" title="1. windows下看不到隐藏的文件（.bashrc、.gitignore）"></a>1. windows下看不到隐藏的文件（.bashrc、.gitignore）</h3><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172237019.png" alt="windows下查看隐藏文件"></p><h3 id="2-windows下无法创建-ignore-bashrc文件"><a href="#2-windows下无法创建-ignore-bashrc文件" class="headerlink" title="2. windows下无法创建.ignore|.bashrc文件"></a>2. windows下无法创建.ignore|.bashrc文件</h3><p>这里以创建.ignore 文件为例：</p><ul><li>在git目录下打开gitbash</li><li>执行指令<code>touch .gitignore</code></li></ul><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172237818.png" alt="windows下创建.ignore、.bashrc文件"></p><h2 id="附：IDEA集成GitBash作为Terminal"><a href="#附：IDEA集成GitBash作为Terminal" class="headerlink" title="附：IDEA集成GitBash作为Terminal"></a>附：IDEA集成GitBash作为Terminal</h2><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405172237245.png" alt="IDEA集成GitBash作为Terminal"></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JDBC介绍&amp;编程六部</title>
      <link href="/2024/05/17/JDBC/1.%20JDBC%E4%BB%8B%E7%BB%8D&amp;%E7%BC%96%E7%A8%8B%E5%85%AD%E9%83%A8/"/>
      <url>/2024/05/17/JDBC/1.%20JDBC%E4%BB%8B%E7%BB%8D&amp;%E7%BC%96%E7%A8%8B%E5%85%AD%E9%83%A8/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="一、JDBC介绍"><a href="#一、JDBC介绍" class="headerlink" title="一、JDBC介绍"></a>一、JDBC介绍</h2><ol><li>JDBC是Java语言连接数据库（Java DataBase Connectivity）</li><li>JDBC的本质是什么？<ul><li>JDBC是SUN公司制定的一套接口（interface）</li><li>接口都有调用者和实现者</li><li>面向接口调用、面向接口写实现类，这都属于面向接口编程。<blockquote><p>为什么SUN制定一套JDBC接口呢？<br>因为每个数据库的底层实现原理都不一样。</p></blockquote></li></ul></li></ol><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405171637239.png"><br>3. JDBC开发前的准备工作，先从官网下载对应的驱动jar包，然后将其配置到环境变量classpath当中。<br>4. JDBC编程六部(important！！！)<br>    * 注册数据库（作用：告诉Java程序，即将要连接的是哪个品牌的数据库）<br>    * 获取连接（表示JVM的进程和数据库进程之间的通道打开了，属于进程之间的通信，重量级、使用完一定要关闭。）<br>    * 获取数据库操作对象（专门执行Sql语句的对象）<br>    * 执行SQL语句（DQL DML…）<br>    * 处理查询结果集（只有第四步执行的是select语句的时候，才会有第五步处理查询结果集。）<br>    * 释放资源（使用完资源之后一定要关闭资源。Java和数据库属于进程通信，开启之后一定要关闭。）</p><h2 id="二、JDBC快速入门"><a href="#二、JDBC快速入门" class="headerlink" title="二、JDBC快速入门"></a>二、JDBC快速入门</h2><ol><li><p>注册驱动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Way1</span></span><br><span class="line"> DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">com</span>.mysql.cj.jdbc.Driver());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Way2  这个更常用。</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>自动注册驱动：在 JDBC 4.0 及更高版本中，驱动程序 jar 包中的 META-INF&#x2F;services&#x2F;java.sql.Driver 文件会自动注册驱动程序。<br>所以在mysql 5之后的驱动包，可以省略Class.forName步骤。</p></blockquote></li><li><p>获取连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String url=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/testjdbc&quot;</span>;</span><br><span class="line">String username=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">String password=<span class="string">&quot;24211&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br></pre></td></tr></table></figure><blockquote><p>注意：使用配置文件绑定信息</p></blockquote></li><li><p>获取数据库操作对象Statement</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Statement statement=connection.createStatement();</span><br></pre></td></tr></table></figure></li><li><p>执行sql</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update user set money=2000 where id=1&quot;</span>;</span><br><span class="line"><span class="comment">/*专门执行DML语句的（insert、delete、update）</span></span><br><span class="line"><span class="comment"> *返回值是“影响数据库中的记录条数”  */</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line">System.out.println(count);</span><br><span class="line">System.out.println(count==<span class="number">1</span>?<span class="string">&quot;数据更新成功&quot;</span>:<span class="string">&quot;数据更新失败&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>JDBC中的sql语句不要写;</p></blockquote></li><li><p>释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//5.释放资源</span></span><br><span class="line"><span class="comment">//为了保证资源一定释放，在finally语句块中关闭资源。</span></span><br><span class="line"><span class="comment">//并且要遵循从小到大依次关闭,分别try catch</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(statement!=<span class="literal">null</span>)statement.close();</span><br><span class="line">&#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(connection!=<span class="literal">null</span>)connection.close();</span><br><span class="line">&#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，释放顺序不能打乱。</p></blockquote></li></ol><h3 id="2-1、快速开始完整代码"><a href="#2-1、快速开始完整代码" class="headerlink" title="2.1、快速开始完整代码"></a>2.1、快速开始完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdbc.quickstart;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JDBC快速开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     *  URL:统一资源定位符（网络中某个资源的绝对路径）&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *  URL包括： 协议 IP PORT 资源名&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *  http://182.61.200.7:80/index.html&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *  http:// 通信协议。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *  182.61.200.7 服务器IP地址。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *  80 服务器上的软件端口。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *  index.html 服务器上某个资源名。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *  什么是通信协议，有什么用2？&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *   通信协议是通信之前就提前定好的数据传输格式。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuickStart</span><span class="params">()</span> &#123;</span><br><span class="line">        Connection connection=<span class="literal">null</span>;</span><br><span class="line">        Statement statement=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1、注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">//DriverManager.registerDriver(new com.mysql.cj.jdbc.Driver());</span></span><br><span class="line">            <span class="comment">//2.获取连接</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/testjdbc?useSSL=false&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;24211&quot;</span>;</span><br><span class="line">            connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">            <span class="comment">//3.获取数据库操作对象Statement</span></span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            <span class="comment">//4.执行sql</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update user set money=2000 where id=1&quot;</span>;</span><br><span class="line">            <span class="comment">/*专门执行DML语句的（insert、delete、update）</span></span><br><span class="line"><span class="comment">             *返回值是“影响数据库中的记录条数”  */</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line">            System.out.println(count);</span><br><span class="line">            System.out.println(count==<span class="number">1</span>?<span class="string">&quot;数据更新成功&quot;</span>:<span class="string">&quot;数据更新失败&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//5.释放资源</span></span><br><span class="line">            <span class="comment">//为了保证资源一定释放，在finally语句块中关闭资源。</span></span><br><span class="line">            <span class="comment">//并且要遵循从小到大依次关闭,分别try catch</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(statement!=<span class="literal">null</span>)statement.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(connection!=<span class="literal">null</span>)connection.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2、使用资源绑定器绑定属性配置文件"><a href="#2-2、使用资源绑定器绑定属性配置文件" class="headerlink" title="2.2、使用资源绑定器绑定属性配置文件"></a>2.2、使用资源绑定器绑定属性配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdbc.quickstart;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用资源绑定器绑定属性配置文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testResourceBinding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//使用资源绑定器绑定属性配置文件</span></span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line">        String driver=bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        String url=bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        String username=bundle.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password=bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        Connection connection=<span class="literal">null</span>;</span><br><span class="line">        Statement statement=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1、注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">//2.获取连接</span></span><br><span class="line">            connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">            <span class="comment">//3.获取数据库操作对象Statement</span></span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            <span class="comment">//4.执行sql</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update user set money=2000 where id=1&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line">            System.out.println(count);</span><br><span class="line">            System.out.println(count==<span class="number">1</span>?<span class="string">&quot;数据更新成功&quot;</span>:<span class="string">&quot;数据更新失败&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//5.释放资源</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(statement!=<span class="literal">null</span>)statement.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(connection!=<span class="literal">null</span>)connection.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3处理查询结果集"><a href="#2-3处理查询结果集" class="headerlink" title="2.3处理查询结果集"></a>2.3处理查询结果集</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryResultSet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1、注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">//2、获取连接</span></span><br><span class="line">            connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">            <span class="comment">//3、获取数据库操作对象</span></span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            <span class="comment">//4、执行sql</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">            <span class="comment">//专门执行DQL语句的方法。</span></span><br><span class="line">            resultSet = statement.executeQuery(sql);</span><br><span class="line">            <span class="comment">//5、处理查询结果集</span></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123; <span class="comment">//光标指向行有数据</span></span><br><span class="line">                <span class="comment">//取数据</span></span><br><span class="line">                <span class="comment">//getString()方法特点：不管数据库中的数据是什么类型，都是以                       String形式取出。当然你也可以按数据类型取出。</span></span><br><span class="line">                <span class="comment">//JDBC中所有下标从1开始，不是从0开始。</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;id&quot;</span>);     </span><br><span class="line">                <span class="comment">//注意：这个填的是查询语句的列名称，如果起别名则要使用别名。</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">                <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> resultSet.getDouble(<span class="string">&quot;money&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;id: &quot;</span> + id + <span class="string">&quot;\tname: &quot;</span> + name + <span class="string">&quot;\tmoney: &quot;</span> + money);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//6、释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (resultSet != <span class="literal">null</span>) <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="literal">null</span>) <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：这个填的是查询语句的列名称，如果起别名则要使用别名。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JUnit单元测试</title>
      <link href="/2024/05/16/Tools/2.%20JUnit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/05/16/Tools/2.%20JUnit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="JUnit单元测试"><a href="#JUnit单元测试" class="headerlink" title="JUnit单元测试"></a>JUnit单元测试</h1><h3 id="1、单元测试类"><a href="#1、单元测试类" class="headerlink" title="1、单元测试类"></a>1、单元测试类</h3><p>单元测试类名：XxxTest</p><h3 id="2、单元测试方法"><a href="#2、单元测试方法" class="headerlink" title="2、单元测试方法"></a>2、单元测试方法</h3><ol><li>单元测试方法需要用<code>@Test</code>注解标注。</li><li>单元测试方法返回类型必须是<code>void</code>。</li><li>单元测试方法形参个数为0.</li><li>单元测试方法名约定规范为：testXxx。</li><li>在JUnit5中，方法名可以不用声明为public。</li></ol><h3 id="3、期望值、实际值"><a href="#3、期望值、实际值" class="headerlink" title="3、期望值、实际值"></a>3、期望值、实际值</h3><p><strong>期望值（Expected Value）：</strong><br>期望值是指在执行单元测试时，开发者预期被测试代码会产生的结果。<br>在编写单元测试时，通常会先确定要测试的功能或情况，并明确预期的输出、状态或行为。<br>期望值可以是一个具体的数值、对象、状态等，取决于正在测试的功能。在测试方法中，开发者会使用断言方法来验证实际结果是否与期望值一致。<br><strong>实际值（Actual Value）：</strong><br>实际值是指被测试代码在执行单元测试时产生的实际结果。<br>实际值是通过执行被测试的代码来获取的，它反映了代码在给定输入下的真实行为。<br>在单元测试方法中，开发者会调用被测试的方法或功能，并获取其输出、状态或行为，然后与期望值进行比较。    </p><h3 id="4、常见注解"><a href="#4、常见注解" class="headerlink" title="4、常见注解"></a>4、常见注解</h3><p><code>@BeforeAll</code>、<code>@AfterAll</code>、<code>@BeforeEach</code> 和 <code>@AfterEach</code> 是JUnit 5中用于执行测试前后操作的生命周期方法。它们提供了一种方便的方式来执行一些公共的初始化和清理工作，以确保测试的独立性和可重复性。</p><ol><li><p><strong>@BeforeAll</strong>：</p><ul><li><code>@BeforeAll</code> 注解用于指定在运行测试类中的<strong>所有测试方法之前</strong>执行的方法。</li><li>该注解标记的方法必须是<strong>静态的</strong>，且必须返回<code>void</code>。</li><li>通常用于执行一次性的全局初始化工作，例如创建数据库连接、启动服务器等。</li><li>在一个测试类中，<code>@BeforeAll</code> 注解标记的方法只会执行一次，并且在所有测试方法之前执行。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始执行单元测试了！&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>@AfterAll</strong>：</p><ul><li><code>@AfterAll</code> 注解用于指定在运行测试类中的<strong>所有测试方法之后</strong>执行的方法。</li><li>该注解标记的方法必须是<strong>静态的</strong>，且必须返回<code>void</code>。</li><li>通常用于执行一次性的全局清理工作，例如关闭数据库连接、停止服务器等。</li><li>在一个测试类中，<code>@AfterAll</code> 注解标记的方法只会执行一次，并且在所有测试方法之后执行。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterAll</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;单元测试执行完毕！&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>@BeforeEach</strong>：</p><ul><li><code>@BeforeEach</code> 注解用于指定在运行<strong>每个测试方法之前</strong>执行的方法。</li><li>该注解标记的方法<strong>不需</strong>要是静态的，但必须返回<code>void</code>。</li><li>通常用于执行每个测试方法之前的初始化工作，例如创建临时对象、设置测试数据等。</li><li>在一个测试类中，每个<code>@BeforeEach</code> 注解标记的方法都会在对应的测试方法之前执行。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BeforeEach</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeEach</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;单元测试方法开始执行&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>@AfterEach</strong>：</p><ul><li><code>@AfterEach</code> 注解用于指定在运行<strong>每个测试方法之后</strong>执行的方法。</li><li>该注解标记的方法<strong>不需</strong>要是静态的，但必须返回<code>void</code>。</li><li>通常用于执行每个测试方法之后的清理工作，例如释放资源、恢复状态等。</li><li>在一个测试类中，每个<code>@AfterEach</code> 注解标记的方法都会在对应的测试方法之后执行。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterEach</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;单元测试方法执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="5、单元测试断言"><a href="#5、单元测试断言" class="headerlink" title="5、单元测试断言"></a>5、单元测试断言</h3><p>在单元测试中，断言是一种用于验证代码行为的机制。<br>它允许开发者在测试代码中声明预期结果，并与实际结果进行比较，从而验证代码是否按预期工作。<br>如果预期结果与实际结果相符，则断言通过，否则测试失败。    </p><p>在JUnit中，常用的断言方法包括：</p><ol><li><p>**assertEquals(expected, actual)**：断言两个对象是否相等。如果预期值（expected）等于实际值（actual），则断言通过。</p></li><li><p>**assertTrue(condition)**：断言给定的条件是否为真。如果条件为真，则断言通过。</p></li><li><p>**assertFalse(condition)**：断言给定的条件是否为假。如果条件为假，则断言通过。</p></li><li><p>**assertNull(object)**：断言给定的对象是否为null。如果对象为null，则断言通过。</p></li><li><p>**assertNotNull(object)**：断言给定的对象是否不为null。如果对象不为null，则断言通过。</p></li><li><p>**assertArrayEquals(expectedArray, actualArray)**：断言两个数组是否相等。如果预期数组（expectedArray）与实际数组（actualArray）相等，则断言通过。</p></li><li><p>**assertSame(expected, actual)**：断言两个对象引用是否指向同一个对象。如果预期对象（expected）和实际对象（actual）是同一个对象，则断言通过。</p></li><li><p>**assertNotSame(expected, actual)**：断言两个对象引用是否指向不同的对象。如果预期对象（expected）和实际对象（actual）不是同一个对象，则断言通过。</p></li><li><p>**assertThrows(expectedException, executable)**：断言给定的代码块是否抛出了预期的异常。如果代码块抛出了预期的异常，则断言通过。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一维数组</title>
      <link href="/2024/05/09/Java%20SE/17.%20%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
      <url>/2024/05/09/Java%20SE/17.%20%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="一、数组介绍"><a href="#一、数组介绍" class="headerlink" title="一、数组介绍"></a>一、数组介绍</h2><h2 id="二、静态一维数组"><a href="#二、静态一维数组" class="headerlink" title="二、静态一维数组"></a>二、静态一维数组</h2><h3 id="2-1、初始化静态一维数组"><a href="#2-1、初始化静态一维数组" class="headerlink" title="2.1、初始化静态一维数组"></a>2.1、初始化静态一维数组</h3><p>静态初始化一维数组是在创建数组时直接指定数组元素的值，而不是在后续的代码中逐个赋值。Java中有两种方式可以静态初始化一维数组：   </p><ol><li><p><strong>使用<code>new</code>关键字：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 变量名 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>, 元素<span class="number">2</span>, 元素<span class="number">3</span>, ...&#125;;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">34</span>, <span class="number">45</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>省略<code>new</code>关键字：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 变量名 = &#123;元素<span class="number">1</span>, 元素<span class="number">2</span>, 元素<span class="number">3</span>, ...&#125;;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">34</span>, <span class="number">45</span>&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>这两种方式都会在内存中创建数组对象，并为数组的每个元素赋予特定的值。通常情况下，如果在创建数组对象时就已经知道了数组中应该具体存储哪些元素，就可以使用静态初始化。   </p><h2 id="三、for-each增强for循环"><a href="#三、for-each增强for循环" class="headerlink" title="三、for each增强for循环"></a>三、for each增强for循环</h2><p>增强for循环，也被称为for-each循环，是 JDK5 中引入的一个语法糖，用于简化数组和集合的遍历操作。其语法结构如下：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (数据中元素的数据类型 变量名 : 数组名或集合名) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在增强for循环中，变量名代表数组或集合中的每个元素，循环会依次将数组或集合中的每个元素赋给变量名，并执行循环体中的代码块。   </p><p>增强for循环的优点在于代码简洁，可读性强，能够避免因手动控制下标而引起的错误。但是其缺点是无法直接获取数组或集合的下标，如果需要使用到下标，就需要另外的方式来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 静态初始化一维数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>&#125;;</span><br><span class="line">        String[] names = &#123;<span class="string">&quot;jack&quot;</span>, <span class="string">&quot;lucy&quot;</span>, <span class="string">&quot;tom&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历arr数组(for-each)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : arr)&#123;</span><br><span class="line">            <span class="comment">// num代表数组中的每个元素</span></span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历names数组(for-each)</span></span><br><span class="line">        <span class="keyword">for</span>(String name : names)&#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、一维数组动态初始化"><a href="#四、一维数组动态初始化" class="headerlink" title="四、一维数组动态初始化"></a>四、一维数组动态初始化</h2><p>动态初始化一维数组是指在创建数组时只指定数组的长度，而不指定数组元素的具体值。Java 中动态初始化一维数组的语法如下：   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[数组长度];</span><br></pre></td></tr></table></figure><p>其中，<code>数据类型</code> 表示数组中元素的数据类型，<code>数组名</code> 是数组的标识符，<code>数组长度</code> 是数组中元素的个数。</p><p>例如，要创建一个长度为 5 的整型数组，可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>这样就创建了一个名为 <code>numbers</code> 的整型数组，它有 5 个元素，但这些元素的值在创建时并未指定，它们会被自动初始化为默认值（对于基本数据类型的数组，例如 <code>int</code>，默认值为 0）。</p><blockquote><p>动态初始化一维数组常用于在后续的代码中根据需要动态设置数组元素的值。</p></blockquote><h2 id="五、方法参数是一维数组时如何传参？"><a href="#五、方法参数是一维数组时如何传参？" class="headerlink" title="五、方法参数是一维数组时如何传参？"></a>五、方法参数是一维数组时如何传参？</h2><p>在 Java 中，当一个方法的参数是一个数组时，可以通过以下方式传递参数：</p><ol><li><p><strong>创建好数组对象，然后将数组对象作为参数传递：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">display(nums);</span><br></pre></td></tr></table></figure></li><li><p><strong>直接传递数组对象的初始化表达式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>动态初始化数组，并将数组对象作为参数传递：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display(<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>]);</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 第一种方式（静态初始化）：创建好数组对象，然后传进去</span></span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        display(nums);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二种方式（静态初始化）：直接传</span></span><br><span class="line">        <span class="comment">//display(&#123;1,2,3,4&#125;); // 这是错误的。</span></span><br><span class="line">        display(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;); <span class="comment">// 这是正确的。注意这个小细节。</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 动态初始化方式。</span></span><br><span class="line">        display(<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历一维数组。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : arr) &#123;</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、-引用类型一维数组（-多态）"><a href="#六、-引用类型一维数组（-多态）" class="headerlink" title="六、 *  引用类型一维数组（+多态）"></a>六、 *  引用类型一维数组（+多态）<img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405091705650.png"></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.array1.oop1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.array1.oop1;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bird类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鸟儿在飞翔！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.array1.oop1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cat类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫抓老鼠！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.array1.oop1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Bird</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个数组，让该数组既可以存储Cat，又可以存储Bird</span></span><br><span class="line">        <span class="comment">// 数组中存储的不是对象本身，实际上是对象在堆内存中的地址。存储的是引用。</span></span><br><span class="line">        Animal[] animals = &#123;b, c, <span class="keyword">new</span> <span class="title class_">Cat</span>(), <span class="keyword">new</span> <span class="title class_">Bird</span>()&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请遍历Animal数组，然后取出的Cat让它抓老鼠，取出的Bird让它飞。</span></span><br><span class="line">        <span class="keyword">for</span> (Animal animal : animals) &#123;</span><br><span class="line">            <span class="comment">// 向下转型。</span></span><br><span class="line">            <span class="keyword">if</span>(animal <span class="keyword">instanceof</span> Cat) &#123;</span><br><span class="line">                <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat) animal;</span><br><span class="line">                cat.catchMouse();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(animal <span class="keyword">instanceof</span> Bird) &#123;</span><br><span class="line">                <span class="type">Bird</span> <span class="variable">bird</span> <span class="operator">=</span> (Bird) animal;</span><br><span class="line">                bird.fly();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Bird bird = new Bird();</span></span><br><span class="line"><span class="comment">//        编译报错。类型不统一/不一致。</span></span><br><span class="line"><span class="comment">//        Cat[] cats = &#123;c, bird&#125;;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="七、关于main方法的命令行参数"><a href="#七、关于main方法的命令行参数" class="headerlink" title="七、关于main方法的命令行参数"></a>七、关于main方法的命令行参数</h2><p>在 Java 中，<code>public static void main(String[] args)</code> 方法是 Java 应用程序的入口点，它是程序执行的起点。在 <code>main</code> 方法中的 <code>String[] args</code> 参数用于接收命令行参数。</p><p>命令行参数是在运行 Java 程序时通过命令行输入的参数，它们可以是任意数量的字符串值，用空格分隔。这些参数被传递给 <code>main</code> 方法的 <code>args</code> 参数，<code>args</code> 是一个字符串数组，其中每个元素对应一个命令行参数。</p><p>例如，假设你有一个名为 <code>MyProgram</code> 的 Java 程序，并且在命令行中运行它时提供了一些参数，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java MyProgram arg1 arg2 arg3</span><br></pre></td></tr></table></figure><p>在这种情况下，<code>main</code> 方法的 <code>args</code> 参数将包含一个长度为 3 的字符串数组，其中 <code>args[0]</code> 是 <code>&quot;arg1&quot;</code>，<code>args[1]</code> 是 <code>&quot;arg2&quot;</code>，<code>args[2]</code> 是 <code>&quot;arg3&quot;</code>。</p><p>因此，<code>String[] args</code> 参数使得 Java 程序能够接收和处理来自命令行的参数，这样程序可以根据需要执行不同的操作或使用不同的设置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 需求：使用该系统的用户包括两种</span></span><br><span class="line">        <span class="comment">// 一个是普通用户</span></span><br><span class="line">        <span class="comment">// 一个是超级管理用户</span></span><br><span class="line">        <span class="comment">// 如果是超级管理员用户，在命令行参数的第一个参数上标注：admin，如果是普通用户第一个参数上标注：user</span></span><br><span class="line">        <span class="comment">// 假设超级管理员的用户名和密码是：zhangsan 123</span></span><br><span class="line">        <span class="comment">// 假设普通用户名和密码是：lisi 123</span></span><br><span class="line">        <span class="keyword">if</span> (args.length != <span class="number">3</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对不起，命令行参数不正确，要使用该系统，命令行参数格式必须是：java ArrayTest 角色 用户名 密码&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取出角色</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">role</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 取出用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> args[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 取出密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> args[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当两个字符串String进行equals的时候，并且其中有一个字符串是字面量。</span></span><br><span class="line">        <span class="comment">// 建议将字面量写到前面。可以避免空指针异常的发生。</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(role) &amp;&amp; username.equals(<span class="string">&quot;zhangsan&quot;</span>) &amp;&amp; password.equals(<span class="string">&quot;123&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;欢迎超级管理员&quot;</span> + username + <span class="string">&quot;，请使用本系统！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (role.equals(<span class="string">&quot;user&quot;</span>) &amp;&amp; username.equals(<span class="string">&quot;lisi&quot;</span>) &amp;&amp; password.equals(<span class="string">&quot;123&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;欢迎操作员&quot;</span> + username + <span class="string">&quot;，请使用本系统！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;角色不对，或者用户名不存在，可能密码也错了！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当两个字符串String进行equals的时候，并且其中有一个字符串是字面量,建议将字面量写到前面。可以避免空指针异常发生。</p></blockquote><h2 id="八、关于方法的可变长度参数"><a href="#八、关于方法的可变长度参数" class="headerlink" title="八、关于方法的可变长度参数"></a>八、关于方法的可变长度参数</h2><p>在 Java 中，可变长度参数的语法规则如下：</p><ol><li><p><strong>语法格式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">返回类型 方法名(数据类型... 参数名) &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>省略号（<code>...</code>）</strong>：</p><ul><li>在方法声明中，省略号（<code>...</code>）用于指示可变长度参数的位置。</li><li>省略号必须放在参数类型之后，并且只能出现在参数列表的最后一个位置。</li></ul></li><li><p><strong>参数类型</strong>：</p><ul><li>可变长度参数可以是任意数据类型，包括基本数据类型和引用数据类型。</li></ul></li><li><p><strong>传递参数</strong>：</p><ul><li>在调用方法时，你可以传递任意数量的参数给可变长度参数。</li><li>这些参数将被封装成一个数组传递给方法内部。</li></ul></li><li><p><strong>数组访问</strong>：</p><ul><li>在方法内部，可变长度参数被视为一个数组。</li><li>你可以像操作数组一样操作可变长度参数，例如使用循环遍历、获取长度等。</li></ul></li><li><p><strong>与其他参数共存</strong>：</p><ul><li>可变长度参数可以与其他类型的参数一起使用，但是可变长度参数必须是参数列表的最后一个参数。</li></ul></li><li><p><strong>只能有一个可变长度参数</strong>：</p><ul><li>每个方法最多只能有一个可变长度参数。</li></ul></li></ol><ul><li>下面是一个简单的示例，展示了如何在方法中使用可变长度参数：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarargsExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用可变长度参数来计算多个数的和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>... numbers)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : numbers) &#123;</span><br><span class="line">            total += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用方法时可以传递任意数量的参数</span></span><br><span class="line">        System.out.println(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));        <span class="comment">// 输出：6</span></span><br><span class="line">        System.out.println(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));  <span class="comment">// 输出：15</span></span><br><span class="line">        System.out.println(sum(<span class="number">10</span>));             <span class="comment">// 输出：10</span></span><br><span class="line">        System.out.println(sum());               <span class="comment">// 输出：0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，<code>sum</code> 方法接受可变长度参数 <code>numbers</code>，并计算这些参数的总和。在 <code>main</code> 方法中，我们展示了如何调用 <code>sum</code> 方法并传递不同数量的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        m5(<span class="keyword">new</span> <span class="title class_">Object</span>(), <span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m5</span><span class="params">(Object... objs)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Object obj : objs)&#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="九、一维数组扩容"><a href="#九、一维数组扩容" class="headerlink" title="九、一维数组扩容"></a>九、一维数组扩容</h2><h3 id="9-1、System-arraycopy"><a href="#9-1、System-arraycopy" class="headerlink" title="9.1、System.arraycopy()"></a>9.1、System.arraycopy()</h3><p><code>System.arraycopy()</code> 方法用于将数组中指定范围的元素复制到另一个数组中的指定位置。它的语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">arraycopy</span><span class="params">(Object src, <span class="type">int</span> srcPos, Object dest, <span class="type">int</span> destPos, <span class="type">int</span> length)</span></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>src</code>：源数组，即要复制的数组。</li><li><code>srcPos</code>：源数组中的起始位置。</li><li><code>dest</code>：目标数组，即要将元素复制到的数组。</li><li><code>destPos</code>：目标数组中的起始位置。</li><li><code>length</code>：要复制的元素数量。</li></ul><h3 id="9-2、实现一维数组扩容"><a href="#9-2、实现一维数组扩容" class="headerlink" title="9.2、实现一维数组扩容"></a>9.2、实现一维数组扩容</h3><p>一维数组扩容通常指的是在已有数组基础上增加额外的存储空间以容纳更多元素。在 Java 中，数组的长度一旦确定后就无法改变，但可以通过创建一个新的更大长度的数组，然后将原数组中的元素复制到新数组中来实现数组扩容的效果。</p><p>以下是一种常见的扩容方法：</p><ol><li><p><strong>创建新数组</strong>：创建一个新的数组，长度比原数组大一些，用于存储扩容后的元素。</p></li><li><p><strong>复制元素</strong>：将原数组中的所有元素复制到新数组中，通常使用 <code>System.arraycopy()</code> 方法或者循环遍历实现。</p></li><li><p><strong>更新引用</strong>：将原数组的引用指向新数组，这样原数组就被“扩容”了。</p></li></ol><p>Java 中的 <code>ArrayList</code> 就是通过这种方式来实现动态扩容的。当元素数量达到当前数组容量时，<code>ArrayList</code> 会创建一个新的更大的数组，并将原数组中的元素复制到新数组中，然后更新内部引用指向新数组。</p><p>以下是简单示例，演示了如何实现一维数组的扩容：</p><blockquote><p>怎么优化？建议减少扩容次数。建议预测数据量，创建一个容量差不多的数组。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayExpansion</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] oldArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">newSize</span> <span class="operator">=</span> oldArray.length * <span class="number">2</span>; <span class="comment">// 扩容为原数组长度的两倍</span></span><br><span class="line">        <span class="type">int</span>[] newArray = expandArray(oldArray, newSize);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;扩容后的数组：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : newArray) &#123;</span><br><span class="line">            System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] expandArray(<span class="type">int</span>[] oldArray, <span class="type">int</span> newSize) &#123;</span><br><span class="line">      <span class="type">int</span>[] newArray = <span class="keyword">new</span> <span class="title class_">int</span>[newSize];</span><br><span class="line">      <span class="comment">// 复制原数组元素到新数组中</span></span><br><span class="line">      System.arraycopy(oldArray, <span class="number">0</span>, newArray, <span class="number">0</span>, oldArray.length);</span><br><span class="line">      <span class="keyword">return</span> newArray;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内部类（Inner classes）</title>
      <link href="/2024/05/09/Java%20SE/16.%20%E5%86%85%E9%83%A8%E7%B1%BB%EF%BC%88Inner-classes%EF%BC%89/"/>
      <url>/2024/05/09/Java%20SE/16.%20%E5%86%85%E9%83%A8%E7%B1%BB%EF%BC%88Inner-classes%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h2 id="一、实例内部类-成员内部类（Member-Inner-Class）："><a href="#一、实例内部类-成员内部类（Member-Inner-Class）：" class="headerlink" title="一、实例内部类&#x2F;成员内部类（Member Inner Class）："></a>一、实例内部类&#x2F;成员内部类（Member Inner Class）：</h2><ul><li>成员内部类是定义在外部类的成员位置的类，可以直接访问外部类的所有成员变量和方法，包括私有成员。</li><li>成员内部类可以使用访问控制修饰符（如public、private、protected、default）。</li><li>外部类可以访问成员内部类的所有成员，但需要先创建内部类的对象</li></ul><h5 id="当一个成员内部类（非静态内部类）被定义在外部类中时，外部类可以访问内部类的所有成员，但是需要先创建内部类的对象。下面是一个示例："><a href="#当一个成员内部类（非静态内部类）被定义在外部类中时，外部类可以访问内部类的所有成员，但是需要先创建内部类的对象。下面是一个示例：" class="headerlink" title="当一个成员内部类（非静态内部类）被定义在外部类中时，外部类可以访问内部类的所有成员，但是需要先创建内部类的对象。下面是一个示例："></a>当一个成员内部类（非静态内部类）被定义在外部类中时，外部类可以访问内部类的所有成员，但是需要先创建内部类的对象。下面是一个示例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">outerMember</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outerMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Outer Method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">innerMember</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">innerMethod</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Inner Method&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OuterClass</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass</span>();</span><br><span class="line">        <span class="comment">// 创建内部类的对象</span></span><br><span class="line">        OuterClass.<span class="type">InnerClass</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">InnerClass</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 外部类可以访问内部类的所有成员</span></span><br><span class="line">        System.out.println(inner.innerMember); <span class="comment">// 输出：20</span></span><br><span class="line">        inner.innerMethod(); <span class="comment">// 输出：Inner Method</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>InnerClass</code>是一个成员内部类，它被定义在<code>OuterClass</code>中。在<code>main()</code>方法中，首先创建了外部类的实例<code>outer</code>，然后通过该实例创建了内部类的实例<code>inner</code>。接着，外部类可以通过内部类的实例<code>inner</code>访问内部类的所有成员，包括<code>innerMember</code>成员和<code>innerMethod()</code>方法。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">    <span class="comment">// 实例变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;外部类的实例方法m1执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;外部类的静态方法m2执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例内部类</span></span><br><span class="line">    <span class="comment">// 也可以使用访问权限修饰符修饰。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">x</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            System.out.println(j);</span><br><span class="line">            m1();</span><br><span class="line">            m2();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OuterClassTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OuterClass</span> <span class="variable">outerClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass</span>();</span><br><span class="line">        System.out.println(outerClass.i);</span><br><span class="line">        OuterClass.<span class="type">InnerClass</span> <span class="variable">innerClass</span> <span class="operator">=</span> outerClass.<span class="keyword">new</span> <span class="title class_">InnerClass</span>();</span><br><span class="line">        innerClass.x();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、静态内部类（Static-Inner-Class）"><a href="#二、静态内部类（Static-Inner-Class）" class="headerlink" title="二、静态内部类（Static Inner Class）"></a>二、静态内部类（Static Inner Class）</h2><ul><li>静态内部类使用 static 关键字修饰，与外部类的实例无关，可以直接访问外部类的静态成员。</li><li>静态内部类不能直接访问外部类的非静态成员，但可以通过<strong>创建外部类的实例</strong>来访问。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;外部类的m1静态方法执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;外部类的m2实例方法执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态内部类</span></span><br><span class="line">    <span class="comment">// 对于静态内部类来说：访问控制权限修饰符（public、default、protected、private）在这里都可以使用。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="comment">//System.out.println(j);</span></span><br><span class="line">            m1();</span><br><span class="line">            <span class="comment">//m2();</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m4</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="comment">//System.out.println(j);</span></span><br><span class="line">            m1();</span><br><span class="line">            <span class="comment">//m2();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//在类中调用。内部类修饰符可以使private。</span></span><br><span class="line">        <span class="type">InnerClass</span> <span class="variable">innerClass2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InnerClass</span>();</span><br><span class="line">        innerClass2.m3();</span><br><span class="line">        InnerClass.m4();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在其他类如何调用。（注意内部类修饰符，修饰不当会导致其他类无法访问。）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OuterClassTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建内部类对象,静态内部类new对象形式。</span></span><br><span class="line">        OuterClass.<span class="type">InnerClass</span> <span class="variable">innerClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass</span>.InnerClass();</span><br><span class="line">        <span class="comment">// 调用方法（实例方法，必须创建对象。）</span></span><br><span class="line">        innerClass.m3();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用m4方法（静态方法、用类名调用。）</span></span><br><span class="line">        OuterClass.InnerClass.m4();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="在Java中，静态内部类不能直接访问外部类的非静态成员，但可以通过创建外部类的实例来访问。下面是一个简单的示例："><a href="#在Java中，静态内部类不能直接访问外部类的非静态成员，但可以通过创建外部类的实例来访问。下面是一个简单的示例：" class="headerlink" title="在Java中，静态内部类不能直接访问外部类的非静态成员，但可以通过创建外部类的实例来访问。下面是一个简单的示例："></a>在Java中，静态内部类不能直接访问外部类的非静态成员，但可以通过创建外部类的实例来访问。下面是一个简单的示例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">outerMember</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outerMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Outer Method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StaticInnerClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">innerMethod</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// 静态内部类不能直接访问外部类的非静态成员</span></span><br><span class="line">            <span class="comment">// System.out.println(outerMember); // 这行代码会产生编译错误</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 通过创建外部类的实例来访问外部类的非静态成员</span></span><br><span class="line">        <span class="type">OuterClass</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass</span>();</span><br><span class="line">        System.out.println(outer.outerMember); <span class="comment">// 输出：10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>StaticInnerClass</code>是一个静态内部类，它不能直接访问外部类<code>OuterClass</code>的非静态成员<code>outerMember</code>，因此在<code>innerMethod()</code>方法中，如果尝试直接访问<code>outerMember</code>，会导致编译错误。但是，通过创建<code>OuterClass</code>的实例，我们可以访问外部类的非静态成员，比如在<code>main()</code>方法中，我们创建了一个<code>OuterClass</code>的实例<code>outer</code>，并且通过该实例访问了<code>outerMember</code>成员。    </p><h2 id="三、局部内部类（Local-Inner-Class）："><a href="#三、局部内部类（Local-Inner-Class）：" class="headerlink" title="三、局部内部类（Local Inner Class）："></a>三、局部内部类（Local Inner Class）：</h2><ul><li>局部内部类定义在方法或作用域内部，只能在所在的方法或作用域内使用。</li><li>结论：局部内部类能不能访问外部类的数据，取决于局部内部类所在的方法。<ul><li>如果这个方法是静态的：只能访问外部类中静态的。</li><li>如果这个方法是实例的：可以都访问。</li></ul></li><li>局部内部类可以访问外部类的成员变量和方法，但只能访问 final 或 effectively final 的局部变量（只不过从JDK8开始。这个final关键字不需要提供了。系统自动提供。）。</li><li>局部内部类不能使用访问权限修饰符修饰。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 实例变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 局部变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="comment">// 局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line">            <span class="comment">// 实例方法</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">x</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(k);</span><br><span class="line">                System.out.println(f);</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// new对象，因为其生命周期所以只能在方法体中new对象。</span></span><br><span class="line">        <span class="type">InnerClass</span> <span class="variable">innerClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InnerClass</span>();</span><br><span class="line">        innerClass.x();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="comment">// 局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">x</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(k);</span><br><span class="line">                <span class="comment">//System.out.println(f);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OuterClassTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OuterClass</span> <span class="variable">outerClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass</span>();</span><br><span class="line">        outerClass.m1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、-匿名内部类（Anonymous-Inner-Class）："><a href="#四、-匿名内部类（Anonymous-Inner-Class）：" class="headerlink" title="四、*匿名内部类（Anonymous Inner Class）："></a>四、*匿名内部类（Anonymous Inner Class）：</h2><ul><li>匿名内部类是没有显式名称的内部类，通常用于<strong>实现接口或继承父类</strong>，并在创建对象时进行定义。</li><li>匿名内部类不能定义构造方法，但可以初始化块和成员变量。</li><li>匿名内部类可以访问外部类的成员变量和方法，以及方法内的 final 局部变量。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//EG1:</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodWithInterface</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 使用匿名内部类实现接口</span></span><br><span class="line">        <span class="type">MyInterface</span> <span class="variable">myInterface</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInterface</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">interfaceMethod</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Implementation of interface method&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        myInterface.interfaceMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">interfaceMethod</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//EG2:</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建电脑对象</span></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        <span class="comment">//computer.conn(new Printer());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以下conn方法参数上的代码做了两件事：</span></span><br><span class="line">        <span class="comment">// 第一：完成了匿名内部类的定义。</span></span><br><span class="line">        <span class="comment">// 第二：同时实例化了一个匿名内部类的对象。</span></span><br><span class="line">        computer.conn(<span class="keyword">new</span> <span class="title class_">Usb</span>()&#123;</span><br><span class="line">            <span class="comment">// 接口的实现</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;read.....&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;write.....&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">conn</span><span class="params">(Usb usb)</span>&#123;</span><br><span class="line">        usb.read();</span><br><span class="line">        usb.write();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Usb</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写一个接口的实现类。若这个实现类可能只使用一次，这时可以使用匿名内部类避免类爆炸。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class Printer implements Usb &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    public void read() &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;打印机开始读取数据&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    public void write() &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;打印机开始打印&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>StartUML破解步骤</title>
      <link href="/2024/05/06/Tools/1.%20StartUML%E7%A0%B4%E8%A7%A3%E6%AD%A5%E9%AA%A4/"/>
      <url>/2024/05/06/Tools/1.%20StartUML%E7%A0%B4%E8%A7%A3%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>首先申明，只是用于个人学习使用。<br>!!! note 目录<br>    <!-- toc --></p></blockquote><ol><li><p>安装nodejs</p></li><li><p>查看nodejs是否安装成功，输入dos命令：node -v。如果输出node版本号表示nodejs安装成功。</p></li><li><p>npm更换阿里云镜像源</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> disturl http://npmmirror.com</span><br></pre></td></tr></table></figure><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npmmirror.com</span><br></pre></td></tr></table></figure></li><li><p>npm安装asar</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g asar</span><br></pre></td></tr></table></figure></li><li><p>查看asar版本：asar -V</p></li><li><p>在dos命令窗口中切换目录到starUML的resources目录：【注意：以管理员身份运行dos命令窗口】</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\Program Files\StarUML\resources</span><br></pre></td></tr></table></figure></li><li><p>反编译starUML：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asar extract app.asar app</span><br></pre></td></tr></table></figure></li><li><p>修改这个文件（如果没有权限修改文件，可以在其他位置新建新文件，把原文件内容拷贝到新文件中，修改。修改完成后，将新文件替换掉原文件。）：C:\Program Files\StarUML\resources\app\src\engine\license-manager.js</p><p>在该文件中搜索：setStatus(this</p><p>找到下面的：setStatus(this, false)，将false修改为true。</p><p>将UnregisteredDialog.showDialog();注释掉。</p></li><li><p>修改这个文件：C:\Program Files\StarUML\resources\app\src\app-context.js</p><p>在该文件中搜索：!this.config</p><p>将该if语句中嵌套的if语句注释掉。</p></li><li><p>重新打包</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asar pack app app.asar</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML&amp;类之间的关系</title>
      <link href="/2024/05/06/UML/1.%20UML-%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>/2024/05/06/UML/1.%20UML-%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><p>在Java中，类之间可以通过不同的关系进行连接和交互。以下是一些常见的类之间的关系：</p><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405062156234.png"></p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405062213851.png" height="350" whidth="600"/><ol><li><p><strong>继承关系（Inheritance）&#x2F;泛化关系（is a）</strong>：</p><ul><li>在Java中，一个类可以继承另一个类。被继承的类称为父类或超类，继承的类称为子类。</li><li>子类可以继承父类的属性和方法，并且可以重写父类的方法或添加新的方法。</li><li>通过继承，可以实现代码的重用和层次化的设计。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal is eating&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bark</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog is barking&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>实现关系（Implementation）</strong>：</p><ul><li>在Java中，一个类可以实现一个接口或者扩展一个抽象类。</li><li>通过实现接口或抽象类，子类必须提供接口或抽象类定义的所有方法的具体实现。</li><li>实现关系使得多个类可以共享相同的行为，同时具备自己的特定实现。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">calculateArea</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">calculatePerimeter</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="type">double</span> radius;</span><br><span class="line">    </span><br><span class="line">    Circle(<span class="type">double</span> radius) &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculatePerimeter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * Math.PI * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>关联关系（Association）</strong>：</p><ul><li>关联表示不同类之间的关联关系，通常是通过一个类中的成员变量引用另一个类的对象来实现的。</li><li>关联关系可以是单向的或双向的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    Engine engine;</span><br><span class="line"></span><br><span class="line">    Car(Engine engine) &#123;</span><br><span class="line">        <span class="built_in">this</span>.engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Engine</span> &#123;</span><br><span class="line">    <span class="comment">// Engine class definition</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>依赖关系（Dependency）</strong>：</p><ul><li>依赖关系表示一个类（或方法）依赖于另一个类（或方法）来完成其工作，但它们之间的关系比关联关系更弱。</li><li>通常表现为一个类作为另一个类的方法参数、局部变量或静态方法调用等。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">drive</span><span class="params">(Engine engine)</span> &#123;</span><br><span class="line">        <span class="comment">// Method implementation</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Engine</span> &#123;</span><br><span class="line">    <span class="comment">// Engine class definition</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>聚合关系（Aggregation）</strong>：</p><ul><li>聚合关系表示整体和部分之间的关系，整体对象和部分对象之间是“包含”的关系，但它们之间的生命周期可以不同。</li><li>聚合关系是一种弱的“拥有”关系，部分对象可以脱离整体而存在。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">University</span> &#123;</span><br><span class="line">    List&lt;Student&gt; students;</span><br><span class="line"></span><br><span class="line">    University(List&lt;Student&gt; students) &#123;</span><br><span class="line">        <span class="built_in">this</span>.students = students;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// Student class definition</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>组合关系（Composition）</strong>：</p><ul><li>组合关系也表示整体和部分之间的关系，但与聚合关系不同，组合关系中部分对象与整体对象具有相同的生命周期。</li><li>整体对象被销毁时，其部分对象也会被销毁。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">House</span> &#123;</span><br><span class="line">    Room kitchen;</span><br><span class="line">    Room bedroom;</span><br><span class="line"></span><br><span class="line">    House() &#123;</span><br><span class="line">        kitchen = <span class="keyword">new</span> <span class="title class_">Room</span>();</span><br><span class="line">        bedroom = <span class="keyword">new</span> <span class="title class_">Room</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Room</span> &#123;</span><br><span class="line">    <span class="comment">// Room class definition</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这些类之间的关系可以帮助我们在设计和组织Java程序时更好地理解和建模不同类之间的交互。</p>]]></content>
      
      
      <categories>
          
          <category> UML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object类</title>
      <link href="/2024/05/06/Java%20SE/15.%20Object%E7%B1%BB/"/>
      <url>/2024/05/06/Java%20SE/15.%20Object%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h1><h2 id="一、Object类"><a href="#一、Object类" class="headerlink" title="一、Object类"></a>一、Object类</h2><p>在Java中，<code>Object</code> 类是所有类的根类。也就是说，所有的类都是直接或间接地继承自 <code>Object</code> 类。<br><code>Object</code> 类定义了一些所有对象都共享的方法，这些方法可以在任何类的对象上调用。</p><p>下面是一些 <code>Object</code> 类中常用的方法：</p><ol><li><p><strong><code>equals(Object obj)</code></strong>: 用于比较两个对象是否相等。默认情况下，<code>equals()</code> 方法比较的是对象的引用是否相同，但是可以在子类中重写该方法来定义自定义的相等性比较逻辑。</p></li><li><p><strong><code>hashCode()</code></strong>: 返回对象的哈希码值。这个方法通常与 <code>equals()</code> 方法一起使用，确保相等的对象具有相同的哈希码。</p></li><li><p><strong><code>toString()</code></strong>: 返回对象的字符串表示。默认情况下，<code>toString()</code> 方法返回一个由类名和对象的哈希码组成的<strong>字符串</strong>。</p></li><li><p><strong><code>getClass()</code></strong>: 返回对象的运行时类的引用，即 <code>Class</code> 对象。 </p></li><li><p><strong><code>clone()</code></strong>: 用于创建并返回一个对象的副本。要实现对象的克隆，需要在子类中实现 <code>Cloneable</code> 接口，并重写 <code>clone()</code> 方法。</p></li><li><p><strong><code>finalize()</code></strong>: 在垃圾收集器删除对象之前调用。可以在子类中重写该方法以执行资源清理等操作。</p></li><li><p><strong><code>notify()</code>, <code>notifyAll()</code>, <code>wait()</code></strong>: 这些方法是用于多线程编程的，用于线程之间的通信和同步。</p></li><li><p><strong><code>getClassLoader()</code></strong>: 返回对象的类加载器。</p></li></ol><h2 id="二、toString方法"><a href="#二、toString方法" class="headerlink" title="二、toString方法"></a>二、toString方法</h2><h3 id="2-1、Object类中的toString-方法。"><a href="#2-1、Object类中的toString-方法。" class="headerlink" title="2.1、Object类中的toString()方法。"></a>2.1、Object类中的toString()方法。</h3><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405081635071.png" height="350" width="750"/><p>对Object类中的toString不满意可以重写。</p><blockquote><p>当println()输出的是一个引用的时候，会自动调用 “引用.toString()”</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//println底层源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(Object x)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(x);</span><br><span class="line">        <span class="keyword">if</span> (getClass() == PrintStream.class) &#123;</span><br><span class="line">            <span class="comment">// 自第一次调用以来，需要再次应用 String.valueOf</span></span><br><span class="line">            <span class="comment">// might return null</span></span><br><span class="line">            writeln(String.valueOf(s));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                print(s);</span><br><span class="line">                newLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//valueOf底层源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">valueOf</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (obj == <span class="literal">null</span>) ? <span class="string">&quot;null&quot;</span> : obj.toString();  <span class="comment">//这里对空引用进行了处理，不会报空异常。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">        car=<span class="literal">null</span>;</span><br><span class="line">        System.out.println(car);    <span class="comment">//输出null，源代码对null进行了处理。</span></span><br><span class="line">        System.out.println(car.toString());  <span class="comment">//输出空指针异常。</span></span><br><span class="line">        <span class="comment">//由源码可以看出。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、equals方法"><a href="#三、equals方法" class="headerlink" title="三、equals方法"></a>三、equals方法</h2><h3 id="3-1、Object类中的equals方法"><a href="#3-1、Object类中的equals方法" class="headerlink" title="3.1、Object类中的equals方法"></a>3.1、Object类中的equals方法</h3><p>Java中的equals()方法用于比较两个对象的内容是否相等。<br>在Object类中，equals()方法的默认实现是比较两个对象的引用是否相等（即是否指向同一块内存地址），这相当于使用&#x3D;&#x3D;运算符进行比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-运算符"><a href="#3-2-运算符" class="headerlink" title="3.2 &#x3D;&#x3D;运算符"></a>3.2 &#x3D;&#x3D;运算符</h3><blockquote><p>&#x3D;&#x3D;运算规则：比较两个变量中保存的值是否相等。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//==</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(a == b);    <span class="comment">//true</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        System.out.println(object1 == object2); <span class="comment">//false,两个引用保存的值不同，即地址不同。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为equal对于对象而言比较的是地址，即引用变量存储的值。但大多数我们想比较的是内容，所以要重写equals。<br>此外重写要彻底，因为你的一个对象比较可能涉及多个类。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//EG:</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比较两个日期对象的内容是否相等。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> obj 要比较的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果两个日期对象的年、月、日都相等，则返回true；否则返回false</span></span><br><span class="line"><span class="comment"> * 注意：重写equals方法传参必须是Object，若不是则不能构成重写而是重载。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果传入的对象为null，则返回false</span></span><br><span class="line">    <span class="keyword">if</span>(obj == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果传入的对象是当前对象的引用，直接返回true</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span> == obj) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果传入的对象是Date类型的实例，则进行内容比较</span></span><br><span class="line">    <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Date)&#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> (Date) obj; <span class="comment">//向下转型，涉及Date独特的方法。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.year == d.year &amp;&amp; <span class="built_in">this</span>.month == d.month &amp;&amp; <span class="built_in">this</span>.day == d.day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果传入的对象不是Date类型的实例，则返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、hashCode方法（入门）"><a href="#四、hashCode方法（入门）" class="headerlink" title="四、hashCode方法（入门）"></a>四、hashCode方法（入门）</h2><p>关于Object类的hashCode()方法：    </p><ul><li>hashCode：返回一个对象的哈希值，通常作为在哈希表中查找该对象的键值。</li><li>Object类的默认实现是根据对象的内存地址生成一个哈希码（即将对象的内存地址转换为整数作为哈希值）。</li><li>hashCode()方法是为了HashMap、Hashtable、HashSet等集合类进行优化而设置的，以便更快地查找和存储对象</li><li>hashCode()方法在Object类中的默认实现：</li><li>public native int hashCode();</li><li>这是一个本地方法，底层调用了C++写的动态链接库程序：xxx.dll</li></ul><h2 id="五、finalize方法（已过时，作为了解）"><a href="#五、finalize方法（已过时，作为了解）" class="headerlink" title="五、finalize方法（已过时，作为了解）"></a>五、finalize方法（已过时，作为了解）</h2><p>finalize：当java对象被回收时，<strong>由GC自动调用被回收对象的finalize方法</strong>，通常在该方法中完成<strong>销毁前</strong>的准备。从Java9开始，这个方法被标记已过时，不建议使用。作为了解。</p><ul><li>可以在finalize中进行关闭连接操作。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在Object类中是这样实现的：很显然，这个方法是需要子类重写的。</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123; &#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//EG</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span> + <span class="string">&quot;即将被回收&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">            p1 = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 建议启动垃圾回收器（这只是建议启动垃圾回收器）</span></span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">1000</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.gc();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、clone方法"><a href="#六、clone方法" class="headerlink" title="六、clone方法"></a>六、clone方法</h2><p>在 <code>Object</code> 类中，<code>clone()</code> 方法被声明为 <code>protected</code>。它的签名如下：    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException;</span><br></pre></td></tr></table></figure><p><code>clone()</code> 方法允许创建并返回一个对象的副本。但是，需要注意以下几点：    </p><ol><li><code>clone()</code> 方法在默认情况下是 <code>protected</code> 的，这意味着<strong>只有类本身或其子类可以调用这个方法</strong>。因此，如果你希望<strong>在类外部调用</strong> <code>clone()</code> 方法，必须在类中重新定义这个方法并将其设置为 <code>public</code>。</li><li>调用 <code>clone()</code> 方法时，被克隆的类<strong>必须</strong>实现 <code>Cloneable</code> 接口。否则，将会抛出 <code>CloneNotSupportedException</code> 异常。</li><li><code>clone()</code> 方法的实现通常由 <code>native</code> 关键字修饰，这表示它的实现是由底层的本地代码完成的。这使得 <code>clone()</code> 方法能够访问对象的内部状态，从而创建对象的精确副本。</li></ol><blockquote><p>使用 <code>clone()</code> 方法需要谨慎，因为它是浅拷贝，即它只复制了对象本身以及其引用的内部数据结构。如果对象包含其他对象的引用，那么这些引用仍然指向相同的内存地址。在这种情况下，你可能需要实现深拷贝来确保所有对象及其引用的对象都被正确复制。</p></blockquote><h3 id="6-1、浅克隆"><a href="#6-1、浅克隆" class="headerlink" title="6.1、浅克隆"></a>6.1、浅克隆</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.object2;</span><br><span class="line"><span class="comment">//标志接口就像是一张空白的身份证，没有任何个人信息，只有一张照片和一串特定的标签。</span></span><br><span class="line"><span class="comment">//当一个类实现了某个标志接口，就像给这个类的身份证上贴上了特定的标签，告诉别人这个类具备了某种特定的能力或性质。</span></span><br><span class="line"><span class="comment">//比如，如果一个类实现了 `Cloneable` 接口，就像给这个类的身份证上贴上了“可以被复制”的标签，这样其他人就知道这个类的对象可以使用 `clone()` 方法进行复制了。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;  <span class="comment">//凡事参加克隆的对象，必须实现一个标志接口：java.lang.Cloneable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//浅克隆</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="comment">// 创建User对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">20</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 克隆一个user对象</span></span><br><span class="line">        <span class="comment">// 报错原因：因为Object类中的clone()方法是protected修饰的。</span></span><br><span class="line">        <span class="comment">// protected修饰的只能在：本类，同包，子类中访问。</span></span><br><span class="line">        <span class="comment">// 但是以下这行代码不满足以上所说条件。</span></span><br><span class="line">        <span class="comment">// 这是一种浅克隆/浅拷贝。</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> user.clone();</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改克隆之后的对象的age属性</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">copyUser</span> <span class="operator">=</span> (User) obj;</span><br><span class="line">        copyUser.setAge(<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;克隆之后的新对象的年龄：&quot;</span> + copyUser.getAge());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;原始对象的年龄：&quot;</span> + user.getAge());</span><br><span class="line">        <span class="type">UserTest</span> <span class="variable">userTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserTest</span>();</span><br><span class="line">        userTest.clone();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2、深克隆"><a href="#6-2、深克隆" class="headerlink" title="6.2、深克隆"></a>6.2、深克隆</h3><p>深克隆解决的问题是在复制对象时，确保对象及其所有引用的对象都被完全复制，而不仅仅是复制了对象本身。<br>通常，当我们进行对象的复制时，如果对象包含了其他对象的引用，浅复制只是复制引用而不是复制引用的对象本身，<br>这样就会导致新对象和原对象共享相同的引用对象，一旦其中一个对象修改了共享的引用对象，另一个对象也会受到影响，这可能会导致意外的行为或错误的结果。</p><h4 id="6-2-1、浅克隆问题举例"><a href="#6-2-1、浅克隆问题举例" class="headerlink" title="6.2.1、浅克隆问题举例"></a>6.2.1、浅克隆问题举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//EG：浅克隆问题</span></span><br><span class="line"><span class="keyword">package</span> com.camellia.object2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String street;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;city=&#x27;&quot;</span> + city + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, street=&#x27;&quot;</span> + street + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Address</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Address</span><span class="params">(String city, String street)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.city = city;</span><br><span class="line">        <span class="built_in">this</span>.street = street;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCity</span><span class="params">(String city)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStreet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> street;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStreet</span><span class="params">(String street)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.street = street;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.javase.oop41;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address addr;  <span class="comment">//问题所在，包含其他对象的引用。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, Address addr)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.addr = addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Address <span class="title function_">getAddr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddr</span><span class="params">(Address addr)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.addr = addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, addr=&quot;</span> + addr +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.javase.oop41;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建住址对象</span></span><br><span class="line">        <span class="type">Address</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>(<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;海淀&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建User对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 克隆一个User对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> (User)user1.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(user1);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line"></span><br><span class="line">        user2.getAddr().setCity(<span class="string">&quot;天津&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;===================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user1);   <span class="comment">//原本的值受到影响。</span></span><br><span class="line">        System.out.println(user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-2、深克隆举例"><a href="#6-2-2、深克隆举例" class="headerlink" title="6.2.2、深克隆举例"></a>6.2.2、深克隆举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//改为深克隆，修改User clone方法。</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">    <span class="comment">// 重写方法，让其达到深克隆的效果。</span></span><br><span class="line">    <span class="comment">// User要克隆，User对象关联的Address对象也需要克隆一份。</span></span><br><span class="line">    <span class="type">Address</span> <span class="variable">copyAddr</span> <span class="operator">=</span> (Address)<span class="built_in">this</span>.getAddr().clone();</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">copyUser</span> <span class="operator">=</span> (User)<span class="built_in">super</span>.clone();</span><br><span class="line">    copyUser.setAddr(copyAddr);</span><br><span class="line">    <span class="keyword">return</span> copyUser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同时Address也要重写clone方法。</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java访问控制权限</title>
      <link href="/2024/05/06/Java%20SE/14.%20Java%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%9D%83%E9%99%90/"/>
      <url>/2024/05/06/Java%20SE/14.%20Java%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><p>#Java访问控制权限</p><h2 id="一、对Java中访问控制权限修饰符的对比表格"><a href="#一、对Java中访问控制权限修饰符的对比表格" class="headerlink" title="一、对Java中访问控制权限修饰符的对比表格"></a>一、对Java中访问控制权限修饰符的对比表格</h2><table><thead><tr><th align="center">访问权限</th><th>同一类</th><th>同一包</th><th>子类</th><th>不同包的非子类</th></tr></thead><tbody><tr><td align="center">public</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td align="center">protected</td><td>✓</td><td>✓</td><td>✓</td><td>✗</td></tr><tr><td align="center">default</td><td>✓</td><td>✓</td><td>✗</td><td>✗</td></tr><tr><td align="center">private</td><td>✓</td><td>✗</td><td>✗</td><td>✗</td></tr></tbody></table><h2 id="二、Java访问控制符"><a href="#二、Java访问控制符" class="headerlink" title="二、Java访问控制符"></a>二、Java访问控制符</h2><p>在Java中，访问控制权限是通过关键字 <code>public</code>, <code>protected</code>, <code>default</code> (也称为 package-private)，以及 <code>private</code> 来实现的。这些关键字用于控制类、变量、方法和构造函数的访问级别。</p><ol><li><p><strong>public</strong>: 公共访问级别，被声明为 <code>public</code> 的类、方法、变量可以被任何其他类访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> myVariable;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Some code</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>protected</strong>: 受保护的访问级别，被声明为 <code>protected</code> 的成员可以被同一包内的其他类访问，以及继承该类的子类访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> myVariable;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Some code</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>default (package-private)</strong>: 默认的访问级别，没有明确声明访问修饰符的类、方法、变量拥有默认的访问级别，它们只能被同一包内的其他类访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="type">int</span> myVariable;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Some code</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>private</strong>: 私有访问级别，被声明为 <code>private</code> 的成员只能在声明它们的类内部访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> myVariable;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Some code</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="三、修饰对象"><a href="#三、修饰对象" class="headerlink" title="三、修饰对象"></a>三、修饰对象</h2><ol><li><p><strong>类级别的修饰符</strong>：</p><ul><li><code>public</code>: 允许类被任何其他类访问。</li><li><code>default</code> (没有修饰符): 允许类在同一包内被访问，但在不同包内不能被访问。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123; &#125; <span class="comment">// 公共类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123; &#125; <span class="comment">// 默认访问级别的类，即包访问权限</span></span><br></pre></td></tr></table></figure></li><li><p><strong>局部变量</strong>：局部变量是在方法、构造函数或块中声明的变量。它们不能使用访问控制权限修饰符进行修饰，因为它们的作用范围限定在声明它们的块内部，超出这个范围就无法访问。</p></li><li><p><code>public</code>,<code> protected</code>, <code>default</code>,<code> private</code> 这四种访问控制权限修饰符可以用来修饰实例方法、静态方法、静态变量和实例变量。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java接口</title>
      <link href="/2024/05/05/Java%20SE/13.%20%E6%8E%A5%E5%8F%A3/"/>
      <url>/2024/05/05/Java%20SE/13.%20%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>在 Java 中，<strong>接口是一种引用数据类型</strong>。它定义了一组抽象方法。<br>其他类可以实现这些接口，并提供方法的具体实现。<br>使用接口可以实现多重继承，因为一个类可以实现多个接口。</p><h2 id="一、接口定义"><a href="#一、接口定义" class="headerlink" title="一、接口定义"></a>一、接口定义</h2><ol><li>接口使用 interface 关键字定义。接口中的方法默认<strong>是公共的抽象方法</strong>，可以包含常量、默认方法（Java 8 引入的特性）、静态方法（Java 8 引入的特性）等。   </li><li>接口没有构造方法，也无法实例化。</li><li>类和接口的关系我们叫做实现（这里的实现也可以等同看做继承）。使用implements关键字进行接口的实现。</li><li>一个非抽象的类实现接口必须将接口中所有的抽象方法全部实现（强制要求的，要不然编译器报错。）</li><li>所有接口隐式的继承Object，所以也可调用Object中的方法。</li></ol><h3 id="1-1、接口结合多态"><a href="#1-1、接口结合多态" class="headerlink" title="1.1、接口结合多态"></a>1.1、接口结合多态</h3><blockquote><p>*接口是一种引用数据类型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个形状接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">calculateArea</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆形类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 矩形类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(<span class="type">double</span> length, <span class="type">double</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> length * width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">shape1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">shape2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="number">4</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多态：调用不同对象的相同方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Circle area: &quot;</span> + shape1.calculateArea());</span><br><span class="line">        System.out.println(<span class="string">&quot;Rectangle area: &quot;</span> + shape2.calculateArea());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-2、接口JDK8和JDK9新特性"><a href="#1-2、接口JDK8和JDK9新特性" class="headerlink" title="1.2、接口JDK8和JDK9新特性"></a>1.2、接口JDK8和JDK9新特性</h3><h4 id="1-2-2、JDK8-新特性"><a href="#1-2-2、JDK8-新特性" class="headerlink" title="1.2.2、JDK8 新特性"></a>1.2.2、JDK8 新特性</h4><p><strong>默认方法 (Default Methods)：</strong><br>Java 8 允许在接口中定义默认方法，这些方法可以在接口中提供默认的实现。<br>这样的好处是，当接口被多个类实现时，可以避免因为在接口中添加新方法而导致所有实现类都需要实现新方法的问题。<br>默认方法使用<code>default</code>关键字进行声明。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="comment">// 默认方法</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Vehicle is stopping&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">        car.stop();  <span class="comment">// 通过实例变量调用默认方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过接口名称调用默认方法(多态)</span></span><br><span class="line">        <span class="type">Vehicle</span> <span class="variable">vehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">        vehicle.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>静态方法 (Static Methods)：</strong><br>Java 8 允许在接口中定义静态方法，这些方法只能通过接口名称调用，也就是接口可以当做工具来使用。<br>静态方法使用<code>static</code>关键字进行声明。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a vehicle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 调用接口的静态方法</span></span><br><span class="line">        Vehicle.info();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-3、JDK9-新特性"><a href="#1-2-3、JDK9-新特性" class="headerlink" title="1.2.3、JDK9 新特性"></a>1.2.3、JDK9 新特性</h4><p><strong>私有方法 (Private Methods)：为默认方法服务</strong><br>Java 9 允许在接口中定义私有方法，这些方法<strong>只能</strong>被接口中的其他默认方法调用，对于接口的实现类是不可见的。<br>私有方法使用 <code>private</code> 关键字进行声明。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="comment">// 默认方法</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Vehicle is stopping&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用私有方法</span></span><br><span class="line">        stopEngine();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 私有方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">stopEngine</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Engine is stopping&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>私有静态方法 (Private Static Methods)：为静态方法服务</strong><br>Java 9 进一步允许在接口中定义私有静态方法，这些方法可以在接口中被其他静态方法中被调用。<br>私有静态方法使用<code>private static</code>关键字进行声明。   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a vehicle&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用私有静态方法</span></span><br><span class="line">        showInfo();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 另一个私有静态方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Vehicle information&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>引入私有方法和私有静态方法目的是为了让默认方法和静态方法中的代码结构更清晰，默认方法和静态方法很有可能要实现大量的代码，全在里面写就很乱。</p></blockquote><h2 id="二、接口的作用"><a href="#二、接口的作用" class="headerlink" title="二、接口的作用"></a>二、接口的作用</h2><h3 id="2-1、没使用接口"><a href="#2-1、没使用接口" class="headerlink" title="2.1、没使用接口"></a>2.1、没使用接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.interface1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 硬盘类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HardDrive</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;硬盘开始读数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;硬盘开始写数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.interface1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印机类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Printer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打印机开始读取数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打印机开始打印文件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.interface1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电脑类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">conn</span><span class="params">(HardDrive hardDrive)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;连接设备成功&quot;</span>);</span><br><span class="line">        hardDrive.read();</span><br><span class="line">        hardDrive.write();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">conn</span><span class="params">(Printer printer)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;连接设备成功&quot;</span>);</span><br><span class="line">        printer.read();</span><br><span class="line">        printer.write();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.interface1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个程序没有使用接口。分析存在哪些缺点？</span></span><br><span class="line"><span class="comment"> *      违背OCP开闭原则。</span></span><br><span class="line"><span class="comment"> *      Computer类的扩展力差。</span></span><br><span class="line"><span class="comment"> *      为什么？</span></span><br><span class="line"><span class="comment"> *          Computer类中使用了HardDriver类，以及Printer类。</span></span><br><span class="line"><span class="comment"> *          导致Computer类和HardDrive，Printer耦合度太高。</span></span><br><span class="line"><span class="comment"> *          Computer类扩展力太差。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建硬盘对象</span></span><br><span class="line">        <span class="type">HardDrive</span> <span class="variable">hardDrive</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HardDrive</span>();</span><br><span class="line">        <span class="comment">// 创建电脑对象</span></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        <span class="comment">// 电脑连接硬盘</span></span><br><span class="line">        computer.conn(hardDrive);</span><br><span class="line">        <span class="comment">// 创建打印机对象</span></span><br><span class="line">        <span class="type">Printer</span> <span class="variable">printer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Printer</span>();</span><br><span class="line">        <span class="comment">// 电脑连接打印机</span></span><br><span class="line">        computer.conn(printer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2使用接口"><a href="#2-2使用接口" class="headerlink" title="2.2使用接口"></a>2.2使用接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.interface1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是一个抽象的Usb接口。</span></span><br><span class="line"><span class="comment"> * 调用者是Computer</span></span><br><span class="line"><span class="comment"> * 实现者是HardDrive和Printer</span></span><br><span class="line"><span class="comment"> * 调用者和实现者都是面向Usb接口写代码的。</span></span><br><span class="line"><span class="comment"> * 接口将Computer和具体的设备解耦合了。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Usb</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.interface1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 硬盘是实现者。面向Usb接口写实现类。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HardDrive</span> <span class="keyword">implements</span> <span class="title class_">Usb</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;硬盘开始读数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;硬盘开始写数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.interface1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印机是实现者。面向Usb接口写实现类。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Printer</span> <span class="keyword">implements</span> <span class="title class_">Usb</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打印机开始读数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打印机开始打印文件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.interface1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电脑类</span></span><br><span class="line"><span class="comment"> * 面向Usb接口调用方法即可。</span></span><br><span class="line"><span class="comment"> * 这是调用者。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">conn</span><span class="params">(Usb usb)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;连接设备成功&quot;</span>);</span><br><span class="line">        usb.read();</span><br><span class="line">        usb.write();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.javase.oop31;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用了接口，分析有什么好处？</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建硬盘对象</span></span><br><span class="line">        <span class="type">HardDrive</span> <span class="variable">hardDrive</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HardDrive</span>();</span><br><span class="line">        <span class="comment">// 创建电脑对象</span></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        <span class="comment">// 连接设备</span></span><br><span class="line">        computer.conn(hardDrive);</span><br><span class="line">        <span class="comment">// 创建打印机对象</span></span><br><span class="line">        <span class="type">Printer</span> <span class="variable">printer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Printer</span>();</span><br><span class="line">        <span class="comment">// 连接设备</span></span><br><span class="line">        computer.conn(printer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其实就是接口+多态才能发挥其作用，原理和使用继承+多态一样。<br>最重要的还是理解多态。</p></blockquote><h2 id="三、接口和抽象类如何选择？"><a href="#三、接口和抽象类如何选择？" class="headerlink" title="三、接口和抽象类如何选择？"></a>三、接口和抽象类如何选择？</h2><ol><li>抽象类主要适用于公共代码的提取。当多个类有共同的属性和方法时，为了达到代码复用，建议为这几个类提取出一个父类，在该父类中编写公共代码。<br>如果有一些方法无法在该类中实现，可以延迟到子类中实现，这样的类就应该用抽象类。</li><li>接口主要用于实现功能的扩展。例如有很多类，一些类需要这个方法，另一些类不需要这个方法时，就可以将该方法定义到接口中。<br>需要这个方法的类就去实现这个接口，不需要这个方法的就可以不实现这个接口。</li></ol><p>​               <a href="https://github.com/camelliaxiaohua/JavaWorkplace/tree/master/Java_SE_Part_1/src/com/camellia/interface2">接口和抽象类如何选取代码理解</a></p><h2 id="四、接口和类之间的上下转换"><a href="#四、接口和类之间的上下转换" class="headerlink" title="四、接口和类之间的上下转换"></a>四、接口和类之间的上下转换</h2><p>###4.1、接口和类之间上下转换的几种方式实现<br>在Java中，接口和类之间的上下转换可以通过以下几种方式实现：</p><ol><li><p><strong>接口引用指向实现类对象</strong>：可以使用接口类型的引用变量来引用实现了该接口的类的对象。这是一种向上转型的操作，因为接口是父类，而实现类是子类。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Woof&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Animal</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">dog.makeSound(); <span class="comment">// 输出: Woof</span></span><br></pre></td></tr></table></figure></li><li><p><strong>强制类型转换</strong>：如果有必要，可以将接口类型的引用强制转换为实现类类型，但在转换之前必须进行类型检查以避免<code>ClassCastException</code>。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">    <span class="type">Dog</span> <span class="variable">realDog</span> <span class="operator">=</span> (Dog) animal;  <span class="comment">//做出这种转换一般是需要用到Dog中独有的方法</span></span><br><span class="line">    realDog.makeSound(); <span class="comment">// 输出: Woof</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>将类对象向下转换为接口对象</strong>：如果一个类实现了某个接口，那么该类的对象也可以被视为实现了该接口的对象。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Woof&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> dog; <span class="comment">// 向上转型</span></span><br><span class="line">animal.makeSound(); <span class="comment">// 输出: Woof</span></span><br></pre></td></tr></table></figure></li></ol><p>总的来说，接口和类之间的上下转换可以帮助实现代码的灵活性和可维护性，使得代码更容易扩展和修改。</p><h3 id="4-2、接口和类之间的上下转换-父类与子类的上下转换的细微区分"><a href="#4-2、接口和类之间的上下转换-父类与子类的上下转换的细微区分" class="headerlink" title="4.2、接口和类之间的上下转换&amp;父类与子类的上下转换的细微区分"></a>4.2、接口和类之间的上下转换&amp;父类与子类的上下转换的细微区分</h3><p>在Java中，接口和类之间的上下转换与父类与子类之间的上下转换有相似之处，但也有一些重要的区别：</p><ol><li><p><strong>父类与子类之间的上下转换</strong>：</p><ul><li>父类对象可以显式转换为子类对象，但需要进行类型检查以避免<code>ClassCastException</code>。</li><li>这种转换是显式的，需要使用强制类型转换。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line"><span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) animal; <span class="comment">// 需要强制类型转换</span></span><br></pre></td></tr></table></figure></li><li><p><strong>接口与实现类之间的上下转换</strong>：</p><ul><li>接口对象不能直接转换为实现类对象，因为接口不能实例化。</li><li>必须先创建实现类的对象，然后将其转换为接口类型的引用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) animal; <span class="comment">// 需要强制类型转换</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>在Java中，接口与实现类之间的上下转换不会引发 <code>ClassCastException</code>，因为接口对象引用&gt;的是实现类的实例。</p></blockquote><p>例如，假设有以下的接口 <code>Animal</code> 和实现类 <code>Dog</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>然后执行以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(); <span class="comment">// 上转换</span></span><br><span class="line"><span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) animal; <span class="comment">// 下转换</span></span><br></pre></td></tr></table></figure><p>这种情况下，上述的下转换是安全的，不会引发 <code>ClassCastException</code>，因为在执行上转换时，<code>animal</code>引用指向的是 <code>Dog</code> 类的实例，因此它可以被成功地下转换为 <code>Dog</code> 类型。</p><p><code>ClassCastException</code> 主要发生在向下转换时，如果在转换之前没有进行适当的类型检查，且转换的目标对象不是期望的类型，则会抛出 <code>ClassCastException</code> 异常。但是在接口与实现类之间的转换中，由于实现类确实是接口的实例，所以这种情况下是安全的。</p>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>抽象方法&amp;抽象类</title>
      <link href="/2024/05/05/Java%20SE/12.%20%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95-%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
      <url>/2024/05/05/Java%20SE/12.%20%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95-%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="抽象类-抽象方法"><a href="#抽象类-抽象方法" class="headerlink" title="抽象类&amp;抽象方法"></a>抽象类&amp;抽象方法</h1><h2 id="一、抽象方法"><a href="#一、抽象方法" class="headerlink" title="一、抽象方法"></a>一、抽象方法</h2><p>父类中无法确定实现的方法，每个子类业务需求不一样，建议定义为抽象方法。    </p><h3 id="1-1、抽象方法定义"><a href="#1-1、抽象方法定义" class="headerlink" title="1.1、抽象方法定义"></a>1.1、抽象方法定义</h3><ul><li>在Java中，抽象方法是指没有具体实现代码的方法，而只有方法声明。</li><li>public和abstract关键字的顺序没有要求。</li><li>当一个类<strong>有</strong>抽象方法，Java要求该类必须<strong>是</strong>抽象的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="comment">// 声明一个抽象方法</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、抽象类"><a href="#二、抽象类" class="headerlink" title="二、抽象类"></a>二、抽象类</h2><p>当一个类具有一些通用的特性或行为，但又不能完全实现它们，或者希望强制子类来实现一些方法时，就可以考虑将这个类定义为抽象类，在抽象类中只提供公共代码。    </p><h3 id="2-1-抽象类定义"><a href="#2-1-抽象类定义" class="headerlink" title="2.1 抽象类定义"></a>2.1 抽象类定义</h3><ul><li><code>abstract class 类名&#123;&#125;</code>    </li><li>抽象类有构造方法，但无法实例化（即无法创建对象，但是其目的是给子类用的，子类可以通过super调用）。   </li><li>抽象类中不一定有抽象方法，但是有抽象方法必须是抽象类。    </li><li>一个非抽象类继承抽象类，必须将所有抽象方法进行实现&#x2F;重写。</li><li>abstract关键字不能和private、final、static关键字共存。</li></ul><h2 id="三、一个抽象类的练习。"><a href="#三、一个抽象类的练习。" class="headerlink" title="三、一个抽象类的练习。"></a>三、一个抽象类的练习。</h2><p>一个抽象类的练习，涉及super、final、抽象类、静态变量调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop10;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象形状类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;未知&quot;</span>; <span class="comment">// 形状名称，默认为&quot;未知&quot;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">color</span> <span class="operator">=</span> <span class="string">&quot;未知&quot;</span>; <span class="comment">// 形状颜色，默认为&quot;未知&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法：计算形状的面积</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">area</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示形状的名称和颜色</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot; &quot;</span> + <span class="built_in">this</span>.color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Shape</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Shape</span><span class="params">(String name, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取形状名称</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置形状名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取形状颜色</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置形状颜色</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop10;</span><br><span class="line"><span class="comment">//一个项目中通常会有个常量类，专门用来存储产量。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Constant</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> IP=<span class="number">3.14159265358979323846</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop10;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆形类，继承自形状类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius; <span class="comment">// 圆的半径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(String name, String color, <span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, color); <span class="comment">// 调用父类的构造方法初始化名称和颜色</span></span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写父类的抽象方法，计算圆的面积</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Area of circle: &quot;</span> + Constant.PI * <span class="built_in">this</span>.radius * <span class="built_in">this</span>.radius);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取圆的半径</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRadius</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置圆的半径</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.camellia.oop10;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 矩形类，继承自形状类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width; <span class="comment">// 矩形的宽度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> height; <span class="comment">// 矩形的高度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(String name, String color, <span class="type">double</span> width, <span class="type">double</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, color); <span class="comment">// 调用父类的构造方法初始化名称和颜色</span></span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写父类的抽象方法，计算矩形的面积</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Area of Rectangle: &quot;</span> + <span class="built_in">this</span>.height * <span class="built_in">this</span>.width);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShapeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Circle</span> <span class="variable">circle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="string">&quot;圆形&quot;</span>,<span class="string">&quot;绿色&quot;</span>,<span class="number">3</span>);</span><br><span class="line">        circle.display();</span><br><span class="line">        circle.area();</span><br><span class="line">        <span class="type">Rectangle</span> <span class="variable">rectangle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="string">&quot;矩形&quot;</span>, <span class="string">&quot;粉色&quot;</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">        rectangle.display();</span><br><span class="line">        rectangle.area();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>final关键字</title>
      <link href="/2024/05/04/Java%20SE/11.%20final%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2024/05/04/Java%20SE/11.%20final%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h1><ul><li><p><strong>不可继承类：</strong>  使用 “final” 关键字修饰的类表示该类不能被继承。</p></li><li><p><strong>不可覆盖方法：</strong> 在父类中使用 “final” 关键字修饰的方法表示该方法不能被子类覆盖（即不能被重写）。</p></li><li><p><strong>不可变变量：</strong> 使用 “final” 关键字声明的变量是不可变的，一旦赋值后就不能再修改其值。这在创建常量时很有用。</p><ul><li>final修饰的实例变量，必须在构造方法执行完之前手动上赋值，不能采用系统默认值。</li><li><strong>常量定义规范：</strong>   <code>public static final 数据类型 常量名 = 常量值;</code></li></ul></li><li><p><strong>不可变对象：</strong>在Java中，final修饰的引用变量意味着该变量不能再指向其他对象，但并不意味着其所指向的对象是不可变的。即使引用变量是final的，对象本身的状态仍然可以改变。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不可继承类</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FinalClass</span> &#123;</span><br><span class="line">    <span class="comment">// 该类的内容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 试图继承不可继承类会导致编译错误</span></span><br><span class="line"><span class="comment">// class SubClass extends FinalClass &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="comment">// 不可覆盖的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">finalMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 方法的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="comment">// 尝试覆盖父类的final方法会导致编译错误</span></span><br><span class="line">    <span class="comment">// public void finalMethod() &#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="comment">// 不可变变量 - 常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CONSTANT</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// final修饰的实例变量，在构造方法中手动赋值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> instanceVariable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Main</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        instanceVariable = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不可变对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        <span class="comment">// 尝试改变引用的指向会导致编译错误</span></span><br><span class="line">        <span class="comment">// sb = new StringBuilder(&quot;World&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尽管引用是final的，但对象本身的状态可以改变</span></span><br><span class="line">        sb.append(<span class="string">&quot; World&quot;</span>);</span><br><span class="line">        System.out.println(sb.toString()); <span class="comment">// 输出：Hello World</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Super关键字</title>
      <link href="/2024/05/04/Java%20SE/10.%20Super%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2024/05/04/Java%20SE/10.%20Super%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h1><ul><li>在Java中，this代表的是当前对象，super代表的是当前对象中的父亲特征。    </li><li>super不能使用在静态上下文中。    </li><li>在构造方法中调用父类构造方法或者父类和子类中存在同名实例变量、实例方法时super关键字不可省略。</li></ul><h2 id="一、super内存图"><a href="#一、super内存图" class="headerlink" title="一、super内存图"></a>一、super内存图</h2><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405040551175.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop24;</span><br><span class="line"></span><br><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String email;</span><br><span class="line">    String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">       Getter();</span><br><span class="line">       Setter(); <span class="comment">//省略</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">//     实例方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人类正在做一些事情！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop24;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  子类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//特有的属性：工资</span></span><br><span class="line">    <span class="type">double</span> sal;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name, <span class="type">int</span> age, String email, String address, <span class="type">double</span> sal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">        <span class="built_in">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Setter();</span><br><span class="line">    Getter();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span> + <span class="built_in">this</span>.age);</span><br><span class="line">        System.out.println(<span class="string">&quot;邮箱：&quot;</span> + <span class="built_in">this</span>.email);</span><br><span class="line">        System.out.println(<span class="string">&quot;住址：&quot;</span> + <span class="built_in">this</span>.address);</span><br><span class="line">        System.out.println(<span class="string">&quot;工资：&quot;</span> + <span class="built_in">this</span>.sal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、super不能缺省的几种情况"><a href="#二、super不能缺省的几种情况" class="headerlink" title="二、super不能缺省的几种情况"></a>二、super不能缺省的几种情况</h2><ul><li>如果父类和子类中存在同名的实例变量，为了明确指定使用父类的实例变量，必须使用 super 关键字来引用父类的实例变量。</li><li>子类重写了父类方法，当想调用的时候必须使用 super 关键字来引用父类的实例方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop24;</span><br><span class="line"><span class="comment">//父类同上。</span></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//特有的属性：工资</span></span><br><span class="line">    <span class="type">double</span> sal;</span><br><span class="line">    <span class="comment">//name属性和父类属性同名。</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name, <span class="type">int</span> age, String email, String address, <span class="type">double</span> sal)</span> &#123;</span><br><span class="line">        <span class="comment">//子类构造方法不写super也会调用父类无参构造，因为隐式调用了super();</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">        <span class="built_in">this</span>.sal = sal;</span><br><span class="line">        <span class="comment">//父类name为null。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSal</span><span class="params">(<span class="type">double</span> sal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">       </span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + <span class="built_in">super</span>.name);</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span> + <span class="built_in">super</span>.age);</span><br><span class="line">        System.out.println(<span class="string">&quot;邮箱：&quot;</span> + <span class="built_in">super</span>.email);</span><br><span class="line">        System.out.println(<span class="string">&quot;住址：&quot;</span> + <span class="built_in">super</span>.address);</span><br><span class="line">        System.out.println(<span class="string">&quot;工资：&quot;</span> + <span class="built_in">this</span>.sal);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span> + <span class="built_in">this</span>.age);</span><br><span class="line">        System.out.println(<span class="string">&quot;邮箱：&quot;</span> + <span class="built_in">this</span>.email);</span><br><span class="line">        System.out.println(<span class="string">&quot;住址：&quot;</span> + <span class="built_in">this</span>.address);</span><br><span class="line">        System.out.println(<span class="string">&quot;工资：&quot;</span> + <span class="built_in">this</span>.sal);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 重写的要求：要求在父类方法的执行基础之上额外再添加一些代码。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;do some开始执行了&quot;</span>);</span><br><span class="line">        <span class="comment">// super. 什么时候不能省略？父中有，子中有相同的，但是想在子类中访问父的，必须添加 super.</span></span><br><span class="line">        <span class="built_in">super</span>.doSome();</span><br><span class="line">        System.out.println(<span class="string">&quot;do some方法执行结束了&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// this本身是一个引用。所以可以直接输出。</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">// super本身不是一个引用。super只是代表了当前对象的父类型特征那部分，况且super能输出，是输出它父类，还是父类的父类？</span></span><br><span class="line">        <span class="comment">// super 不能够单独的输出。</span></span><br><span class="line">        <span class="comment">//System.out.println(super); // 编译报错。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在子类构造方法中调用父类构造方法要使用super    <ul><li>在子类构造方法中调用父类构造方法时，必须放在子类构造方法的第一行，否则编译器会报错。这是因为在创建子类对象时，首先需要初始化父类的部分。</li><li>如果子类的构造方法没有显式地调用super(参数)，也没有显示的调用this(参数)，Java 编译器会默认插入对父类无参构造方法的调用，若父类没有无参则报错。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 父类构造方法</span></span><br><span class="line">    Parent(<span class="type">int</span> x) &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        System.out.println(<span class="string">&quot;Parent class constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子类构造方法</span></span><br><span class="line">    Child(<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        <span class="built_in">super</span>(x);</span><br><span class="line">        <span class="comment">// 调用父类构造方法，必须放在子类构造方法的第一行,好处是增加代码复用。</span></span><br><span class="line">        <span class="comment">// 通过子类构造方法调用父类构造方法是为了给继承过来的父类型特征初始化。</span></span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">        System.out.println(<span class="string">&quot;Child class constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Child</span> <span class="variable">child</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p><strong>注意：</strong><br>在我们定义了有参构造方法后，尽量再定义无参构造方法以避免以上错误。 </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>多态</title>
      <link href="/2024/05/03/Java%20SE/9.%20%E5%A4%9A%E6%80%81/"/>
      <url>/2024/05/03/Java%20SE/9.%20%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="一、类型转换"><a href="#一、类型转换" class="headerlink" title="一、类型转换"></a>一、类型转换</h2><h3 id="1-1、基本数据类型转换"><a href="#1-1、基本数据类型转换" class="headerlink" title="1.1、基本数据类型转换"></a>1.1、基本数据类型转换</h3><p>在Java中，基本数据类型之间可以进行自动类型转换和强制类型转换。</p><ol><li><p><strong>自动类型转换（隐式类型转换）</strong>：当一个表达式中包含不同类型的数据时，系统会自动将其中的低精度数据类型转换为高精度数据类型，以保证精度不丢失。</p><p>自动类型转换的规则如下：</p><ul><li>byte、short、char类型会自动提升为int类型。</li><li>如果表达式中包含了不同类型的数据，系统会自动将低精度的类型转换为高精度的类型。</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">y</span> <span class="operator">=</span> x; <span class="comment">// 自动将int类型转换为double类型</span></span><br></pre></td></tr></table></figure></li><li><p><strong>强制类型转换（显式类型转换）</strong>：在某些情况下，需要将一个数据类型转换为另一个数据类型，这时就需要使用强制类型转换。强制类型转换可以通过将目标类型的数据类型放在被转换的数据类型前面的括号中实现。</p><p>强制类型转换的规则如下：</p><ul><li>数据类型范围大的可以强制转换为数据类型范围小的，但可能会导致精度丢失或溢出。</li><li>强制类型转换可能会造成数据丢失或溢出，因此需要谨慎使用。</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10.5</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">int</span>) a; <span class="comment">// 强制将double类型转换为int类型</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="1-2、Java中的向上转型和向下转型"><a href="#1-2、Java中的向上转型和向下转型" class="headerlink" title="1.2、Java中的向上转型和向下转型"></a>1.2、Java中的向上转型和向下转型</h3><p>在Java中，向上转型（Upcasting）和向下转型（Downcasting）是面向对象编程中常用的概念，<strong>用于处理类之间的继承关系</strong>。   </p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405011256547.png"  width="400px" height="400px"><ol><li><p><strong>向上转型（Upcasting）</strong>：向上转型是指将子类对象赋值给父类引用变量的过程。这样做是安全的，因为子类对象拥有父类的所有属性和方法。向上转型可以实现多态性，使得代码更加灵活。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(); <span class="comment">// 向上转型</span></span><br></pre></td></tr></table></figure></li><li><p><strong>向下转型（Downcasting）</strong>：向下转型是指将父类引用变量转换为子类对象的过程。这种转型可能会导致异常，因为编译器只知道变量的编译时类型，而不知道实际的运行时类型。因此，在进行向下转型时，需要使用强制类型转换，并且需要确保转换是安全的，即实际对象是子类的实例。否则，会抛出 <code>ClassCastException</code> 异常。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(); <span class="comment">// 向上转型</span></span><br><span class="line"><span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) animal; <span class="comment">// 向下转型</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>需要注意的是，向上转型是自动的，不需要显式地指定类型转换，而向下转型需要显式地使用强制类型转换，并且可能会导致异常，因此需要谨慎使用。</p></blockquote><h2 id="二、多态"><a href="#二、多态" class="headerlink" title="二、多态"></a>二、多态</h2><ol><li>父类型引用指向子类型对象。 <code>Animal a=new Cat(); a.move();</code>     </li><li>程序分为编译阶段和运行阶段<ul><li>编译阶段：编译器只知道a是Animal类型，因此去Animal类找move()方法，找到后，绑定成功，编译通过。这个过程通常被称为静态绑定。</li><li>运行阶段：运行时和JVM堆内存中真实的Java对象有关，所以运行时会自动调用真实对象move()方法。这个过程通常被称为动态绑定。</li></ul></li><li>多态是指：多种形态，编译阶段一种形态，运行阶段另一种形态。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">package</span> com.camellia.oop19;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;动物在移动&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;正在吃东西&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Bird 子类</span></span><br><span class="line"><span class="keyword">package</span> com.camellia.oop19;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鸟儿在飞翔&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个方法也是子类特有的。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鸟儿在歌唱！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Cat 子类</span></span><br><span class="line"><span class="keyword">package</span> com.camellia.oop19;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫在走猫步&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个方法/行为是子类特有的。父类没有。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫在抓老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1、发生在向上转型时的多态"><a href="#2-1、发生在向上转型时的多态" class="headerlink" title="2.1、发生在向上转型时的多态"></a>2.1、发生在向上转型时的多态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop19;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        java程序包括两个重要的阶段：</span></span><br><span class="line"><span class="comment">//            第一阶段：编译阶段</span></span><br><span class="line"><span class="comment">//                在编译的时候，编译器只知道a2的类型是Animal类型。</span></span><br><span class="line"><span class="comment">//                因此在编译的时候就会去Animal类中找move()方法。</span></span><br><span class="line"><span class="comment">//                找到之后，绑定上去，此时发生静态绑定。能够绑定</span></span><br><span class="line"><span class="comment">//                成功，表示编译通过。</span></span><br><span class="line"><span class="comment">//            第二阶段：运行阶段</span></span><br><span class="line"><span class="comment">//                在运行的时候，堆内存中真实的java对象是Cat类型。</span></span><br><span class="line"><span class="comment">//                所以move()的行为一定是Cat对象发生的。</span></span><br><span class="line"><span class="comment">//                因此运行的时候就会自动调用Cat对象的move()方法。</span></span><br><span class="line"><span class="comment">//                这种绑定称为运行期绑定/动态绑定。</span></span><br><span class="line"><span class="comment">//                </span></span><br><span class="line"><span class="comment">//            因为编译阶段是一种形态，运行的时候是另一种形态。因此得名：多态。</span></span><br><span class="line"></span><br><span class="line">        a2.move();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        以下代码是编译错误，因为编译器只知道a2是Animal类型，去Animal类中找</span></span><br><span class="line"><span class="comment">//        catchMouse()方法了，结果没有找到，无法完成静态绑定，编译报错。</span></span><br><span class="line"></span><br><span class="line">        a2.catchMouse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2、发生在向下转型时的多态"><a href="#2-2、发生在向下转型时的多态" class="headerlink" title="2.2、发生在向下转型时的多态"></a>2.2、发生在向下转型时的多态</h3><blockquote><p><strong>注意：</strong> 向下转型使用不当容易发生类型转换异常：ClassCastExcetion。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop19;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        假如现在就是要让a2去抓老鼠，怎么办？</span></span><br><span class="line"><span class="comment">//            向下转型：downcasting（父---&gt;子）</span></span><br><span class="line"><span class="comment">//        什么时候我们会考虑使用向下转型？</span></span><br><span class="line"><span class="comment">//            当调用的方法是子类中特有的方法。</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c2</span> <span class="operator">=</span> (Cat) a2;</span><br><span class="line">        c2.catchMouse();</span><br><span class="line">        </span><br><span class="line"><span class="comment">//         多态</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="comment">//         向下转型</span></span><br><span class="line">        <span class="type">Bird</span> <span class="variable">y</span> <span class="operator">=</span> (Bird) x;</span><br><span class="line"></span><br><span class="line"><span class="comment">//         为什么编译的时候可以通过？</span></span><br><span class="line"><span class="comment">//             因为x是Animal类型，Animal和Bird之间存在继承关系，语法没问题，所以编译通过了。</span></span><br><span class="line"><span class="comment">//         为什么运行的时候出现ClassCastException（类型转换异常）？</span></span><br><span class="line"><span class="comment">//             因为运行时堆中真实对象是Cat对象，Cat无法转换成Bird，则出现类型转换异常。</span></span><br><span class="line"><span class="comment">//         为什么向下转型容易出问题？</span></span><br><span class="line"><span class="comment">//             因为向下转型将父类x转换成子类y，原则上没问题，子类的都继承了父类的方法，但是x真实指向的堆中不一定是父类。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3、用instanceof运算符避免向下转型时的风险"><a href="#2-3、用instanceof运算符避免向下转型时的风险" class="headerlink" title="2.3、用instanceof运算符避免向下转型时的风险"></a>2.3、用instanceof运算符避免向下转型时的风险</h3><p><code>instanceof</code> 运算符用于检查对象是否是特定类的实例，或者是否是特定类的子类的实例。它的语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object <span class="keyword">instanceof</span> ClassName</span><br></pre></td></tr></table></figure><p>其中 <code>object</code> 是要检查的对象，<code>ClassName</code> 是要检查的类名。</p><p><code>instanceof</code> 运算符的返回结果是一个布尔值，如果 <code>object</code> 是 <code>ClassName</code> 的一个实例或子类的实例，则返回 <code>true</code>；否则返回 <code>false</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop19;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//         多态</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="comment">//         向下转型</span></span><br><span class="line">        <span class="type">Bird</span> <span class="variable">y</span> <span class="operator">=</span> (Bird) x;</span><br><span class="line"></span><br><span class="line"><span class="comment">//         instanceof运算符的出现，可以解决ClassCastException异常。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        instanceof 运算符的语法规则：</span></span><br><span class="line"><span class="comment">//            1. instanceof运算符的结果一定是：true/false</span></span><br><span class="line"><span class="comment">//            2. 语法格式：</span></span><br><span class="line"><span class="comment">//                (引用 instanceof 类型)</span></span><br><span class="line"><span class="comment">//            3. 例如：</span></span><br><span class="line"><span class="comment">//                (a instanceof Cat)</span></span><br><span class="line"><span class="comment">//                    true表示什么？</span></span><br><span class="line"><span class="comment">//                        a引用指向的对象是Cat类型。</span></span><br><span class="line"><span class="comment">//                    false表示什么？</span></span><br><span class="line"><span class="comment">//                        a引用指向的对象不是Cat类型。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//   做向下转型之前，为了避免ClassCastException的发生，一般建议使用instanceof进行判断</span></span><br><span class="line">        System.out.println(x <span class="keyword">instanceof</span> Bird);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> Bird) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=========================&quot;</span>);</span><br><span class="line">            <span class="type">Bird</span> <span class="variable">y</span> <span class="operator">=</span> (Bird) x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3、多态有什么作用？"><a href="#2-3、多态有什么作用？" class="headerlink" title="2.3、多态有什么作用？"></a>2.3、多态有什么作用？</h3><p>通过 instanceof 运算符可以在程序运行时动态确定对象的类型，根据不同的情况做出相应的处理。<br>这使得程序具有更强的适应性和灵活性，可以根据实际情况采取不同的行动，而不需要在编码时就确定对象的具体类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop19;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 多态</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">        a.eat();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需求：程序运行阶段动态确定对象</span></span><br><span class="line">        <span class="comment">// 如果对象是Cat，请抓老鼠。</span></span><br><span class="line">        <span class="comment">// 如果对象是Bird，请唱歌。</span></span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat) &#123;</span><br><span class="line">            <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat) a;</span><br><span class="line">            cat.catchMouse();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Bird) &#123;</span><br><span class="line">            <span class="type">Bird</span> <span class="variable">bird</span> <span class="operator">=</span> (Bird) a;</span><br><span class="line">            bird.sing();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、开闭原则（OCP）————使用多态实现OCP原则"><a href="#三、开闭原则（OCP）————使用多态实现OCP原则" class="headerlink" title="三、开闭原则（OCP）————使用多态实现OCP原则"></a>三、开闭原则（OCP）————使用多态实现OCP原则</h2><p><strong>开放-封闭原则（Open-Closed Principle，OCP）：</strong><br>软件实体（类、模块、函数等）应该<strong>对扩展开放</strong>，<strong>对修改关闭</strong>。这意味着当需要改变系统的行为时，应该尽量通过扩展而不是修改现有的代码来实现。   </p><h3 id="3-1、-未使用多态"><a href="#3-1、-未使用多态" class="headerlink" title="3.1、 未使用多态"></a>3.1、 未使用多态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop20;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 宠物猫</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop20;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗狗啃骨头！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop20;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主人类</span></span><br><span class="line"><span class="comment"> * 开始业务是喂猫，但是后面业务改变要喂狗了，在没有使用多态的情况下就必须要改变Master，不符合OCP。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Master</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Cat c)</span> &#123;</span><br><span class="line">        c.eat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Dog d)</span>&#123;</span><br><span class="line">        d.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">package</span> com.camellia.oop20;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个案例没有使用多态机制，看看设计上有什么缺陷？</span></span><br><span class="line"><span class="comment"> *      不符合OCP。不符合开闭原则。（因为这个功能的扩展是建立在修改Master类的基础之上的。）</span></span><br><span class="line"><span class="comment"> *      OCP倡导的是什么？进行功能扩展的时候，最好不要修改原有代码，最好是以新增代码来完成扩展。</span></span><br><span class="line"><span class="comment"> *      对修改关闭。对扩展开放。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建宠物猫对象</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="comment">// 创建主人对象</span></span><br><span class="line">        <span class="type">Master</span> <span class="variable">master</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Master</span>();</span><br><span class="line">        <span class="comment">// 主人喂猫</span></span><br><span class="line">        master.feed(c);</span><br><span class="line">        master.feed(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2、使用多态"><a href="#3-2、使用多态" class="headerlink" title="3.2、使用多态"></a>3.2、使用多态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop21;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 宠物类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop21;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Pet</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop21;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Pet</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗狗在啃骨头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop21;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Master</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Pet p)</span>&#123;   <span class="comment">//这里就是用多态，父类引用指向子类，提高扩展性。</span></span><br><span class="line">        p.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop21;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 还是主人喂养宠物的案例，使用多态机制，达到OCP原则。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 能用多态尽量使用多态。尽量面向抽象编程。不要面向具体编程。</span></span><br><span class="line"><span class="comment"> * 面向抽象编程的好处？降低耦合度，提高扩展力。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建宠物</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建主人</span></span><br><span class="line">        <span class="type">Master</span> <span class="variable">master</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Master</span>();</span><br><span class="line">        master.feed(c);</span><br><span class="line">        master.feed(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3、静态方法不存在方法覆盖"><a href="#3-3、静态方法不存在方法覆盖" class="headerlink" title="3.3、静态方法不存在方法覆盖"></a>3.3、静态方法不存在方法覆盖</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop22;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal&#x27;s test method invoke&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop22;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尝试去重写父类的静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat&#x27;s test method invoke&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop22;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  方法覆盖针对的是实例方法。和静态方法无关。【方法的覆盖和多态机制联合起来才有意义。】</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Animal.test();</span><br><span class="line">        <span class="comment">//test是静态方法、可以通过类名调用和实例无关。</span></span><br><span class="line">        Cat.test();</span><br><span class="line">        </span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        a.test();</span><br><span class="line">        <span class="comment">//虽然a指向的是Cat()对象，但是a是Animal类型的实例变量，所以此test是Animal的静态方法。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4、实例变量没有多态"><a href="#3-4、实例变量没有多态" class="headerlink" title="3.4、实例变量没有多态"></a>3.4、实例变量没有多态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop22;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法覆盖针对的是实例方法。和实例变量没有关系。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 多态</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        <span class="comment">// 实例变量不存在覆盖这一说。</span></span><br><span class="line">        <span class="comment">// a.name编译阶段绑定的是A类的name属性，运行的时候也会输出A类的name属性值。</span></span><br><span class="line">        System.out.println(a.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没有用多态</span></span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(b.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="comment">// 实例变量</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="comment">// 实例变量</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>继承</title>
      <link href="/2024/05/02/Java%20SE/8.%20%E7%BB%A7%E6%89%BF/"/>
      <url>/2024/05/02/Java%20SE/8.%20%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="一、继承的基本语法"><a href="#一、继承的基本语法" class="headerlink" title="一、继承的基本语法"></a>一、继承的基本语法</h2><p>1、<strong>继承概念：</strong> 在Java中，继承是面向对象编程中的一个重要概念，它允许一个类（称为子类或派生类）继承另一个类（称为父类或基类）的属性和方法。<br>Java中的继承通过关键字extends来实现。    </p><blockquote><ul><li>Java只支持单继承，一个类只能直接继承一个类。    </li><li>Java不支持多继承，但是支持多重继承。    </li><li>子类继承父类，除了<strong>私有的不支持继承</strong>、<strong>构造方法不支持继承</strong>，其他的全部都能继承。    </li><li>一个类没有显示的继承任何类，默认继承java.lang.Object类。</li><li>Object是老祖宗，是JDK类库中的根类。</li></ul></blockquote><p>2、<strong>继承在Java中的实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Subclass</span> <span class="keyword">extends</span> <span class="title class_">Superclass</span> &#123;</span><br><span class="line">    <span class="comment">// 子类的成员变量和方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、<strong>继承的相关术语</strong>    </p><ul><li>父类也可以叫做超类、基类、superclass。   </li><li>子类也可叫做派生类、subclass。</li></ul><h2 id="二、方法覆盖-Override-方法重写-Overwrite"><a href="#二、方法覆盖-Override-方法重写-Overwrite" class="headerlink" title="二、方法覆盖&#x2F;Override&#x2F;方法重写&#x2F;Overwrite"></a>二、方法覆盖&#x2F;Override&#x2F;方法重写&#x2F;Overwrite</h2><ol><li>什么时候使用方法重写？<br>当从父类继承来的方法，无法满足子类业务需求时。</li><li>当满足什么条件的时候，构成方法重写？<ul><li>方法覆盖发生在具有继承关系的父子类之间。</li><li>具有相同的方法名（必须严格一样）</li><li>具有相同的形参列表（必须严格一样）</li><li>具有相同的返回值类型（可以是子类型）</li></ul></li><li>关于方法重写的细节<ul><li>当子类将父类方法覆盖之后，将来子类对象调用方法的时候，一定会执行重写之后的方法。</li><li>在java语言中，有一个注解，这个注解可以在编译阶段检查这个方法是否是重写了父类的方法。@Override注解是JDK5引入，用来标注方法，被标注的方法必须是重写父类的方法，如果不是重写的方法，编译器会报错。@Override注解只在编译阶段有用，和运行期无关。</li><li>如果返回值类型是引用数据类型，那么这个返回值类型可以是原类型的子类型<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObj</span><span class="params">(<span class="type">int</span> a,String b)</span>&#123;</span><br><span class="line">        retrun;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bird</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getObj</span><span class="params">(<span class="type">int</span> a,String b)</span>&#123;   <span class="comment">//返回值String是Object的子类。            return ;</span></span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>当在子类中重写父类方法时，访问权限可以变得更高，但不能变得更低。这是因为子类中的方法必须能够访问父类中的方法，否则就会破坏继承关系。  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">// 父类中的方法使用protected访问修饰符</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal makes a sound&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">     <span class="comment">// 子类中的方法将访问权限从protected提升为public</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog barks&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>抛出异常不能变多，可以变少。（后面学习异常的时候再说。）</li><li>私有的方法，以及构造方法不能继承，因此他们不存在方法覆盖。</li><li>方法覆盖针对的是实例方法。和静态方法无关。（讲完多态再说。）</li><li>方法覆盖针对的是实例方法。和实例变量没有关系。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单例模式（基础介绍）</title>
      <link href="/2024/05/01/Java%20SE/7.%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D%EF%BC%89/"/>
      <url>/2024/05/01/Java%20SE/7.%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>&#x3D;&#x3D;<strong>实现单例模式的步骤</strong>&#x3D;&#x3D;   </p><ol><li>私有化构造方法<br>确保外部不能直接通过构造方法来实例化对象，从而限制对象的创建。</li><li>提供静态方法获取实例<br>通过一个静态方法来获取单例对象的实例，通常命名为 getInstance()。</li><li>提供一个静态变量（对于饿汉和懒汉不同）</li></ol><h2 id="一、饿汉式单例模式"><a href="#一、饿汉式单例模式" class="headerlink" title="一、饿汉式单例模式"></a>一、饿汉式单例模式</h2><ol><li>私有化构造方法<br>确保外部不能直接通过构造方法来实例化对象，从而限制对象的创建。</li><li>提供静态方法获取实例<br>通过一个静态方法来获取单例对象的实例，通常命名为 getInstance()。</li><li>定义一个静态变量<br>在类加载的时候，初始化静态变量。（只初始化一次）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.singleton1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">//饿汉式单例模式：类加载时对象就创建好了。不管这个对象用还是不用。提前先把对象创建好。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.singleton1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletionTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance1</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        System.out.println(instance1 == instance2);   <span class="comment">//比较引用存储的对象地址。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、懒汉式单例模式"><a href="#二、懒汉式单例模式" class="headerlink" title="二、懒汉式单例模式"></a>二、懒汉式单例模式</h2><ol><li>私有化构造方法<br>确保外部不能直接通过构造方法来实例化对象，从而限制对象的创建。</li><li>提供静态方法获取实例<br>通过一个静态方法来获取单例对象的实例，通常命名为 getInstance()。</li><li>定义一个静态变量<br>但是这个变量值为null。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.singleton2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.singleton2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance1</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        System.out.println(instance1 == instance2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>类</title>
      <link href="/2024/04/30/Java%20SE/6.%20%E7%B1%BB/"/>
      <url>/2024/04/30/Java%20SE/6.%20%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="一、类的定义"><a href="#一、类的定义" class="headerlink" title="一、类的定义"></a>一、类的定义</h2><p>在计算机编程中，类（Class）是一种抽象数据类型（ADT），它是面向对象编程（OOP）的基本概念之一。类是对现实世界中对象的抽象，它定义了对象的属性（成员变量）和行为（成员方法）。</p><p><strong>类的定义通常包括以下几个要素：</strong></p><ol><li><p><strong>类名（Class Name）</strong>：类的名称用于标识该类，在代码中可以通过类名来引用该类。类名通常使用大驼峰命名法（Pascal Case）。</p></li><li><p><strong>成员变量（Member Variables）</strong>：也称为属性或字段（Fields），用于描述类的状态或特征。成员变量可以是各种数据类型（如整数、浮点数、字符串等），它们代表了对象的各种属性。在类的定义中，成员变量通常以变量名和数据类型的形式列出。</p></li><li><p><strong>成员方法（Member Methods）</strong>：也称为函数或操作（Methods），用于描述类的行为或功能。成员方法定义了对象可以执行的操作，它们可以操作对象的状态，并且可以被外部代码调用以执行特定的任务。在类的定义中，成员方法通常以方法名、参数列表和返回类型的形式列出。</p></li><li><p><strong>构造方法（Constructor）</strong>：是一种特殊类型的成员方法，用于在创建对象时初始化对象的状态。构造方法的名称与类名相同，并且通常没有返回类型。在Java等编程语言中，通过调用构造方法可以创建类的实例。</p></li><li><p><strong>访问修饰符（Access Modifiers）</strong>：用于控制类的成员对外部代码的可见性和访问权限。常见的访问修饰符包括public、protected、private等。</p></li></ol><p>一个简单的类定义示例（使用Java语言）如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> myNumber;</span><br><span class="line">    <span class="keyword">private</span> String myString;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">(<span class="type">int</span> number, String str)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myNumber = number;</span><br><span class="line">        <span class="built_in">this</span>.myString = str;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printDetails</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Number: &quot;</span> + myNumber);</span><br><span class="line">        System.out.println(<span class="string">&quot;String: &quot;</span> + myString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 在这个示例中，类名为MyClass，包含了两个成员变量（myNumber和myString）、一个构造方法（MyClass）和一个成员方法（printDetails）。</span></span><br><span class="line"><span class="comment"> 这个类定义了一个简单的数据结构，表示了一个具有整数和字符串属性的对象，并且提供了一个方法用于打印对象的属性。       </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="二、类对象的创建和使用"><a href="#二、类对象的创建和使用" class="headerlink" title="二、类对象的创建和使用"></a>二、类对象的创建和使用</h2><p>创建和使用类对象是面向对象编程中的基本操作，它们使我们能够使用类定义的属性和方法来操作对象。</p><p><strong>以下是创建和使用类对象的一般步骤：</strong></p><ol><li><strong>类定义</strong>：首先，我们需要定义一个类，其中包括类的属性（成员变量）和方法（成员方法）。</li><li><strong>对象实例化</strong>：在程序中，通过使用类的构造方法来创建类的实例（对象）。构造方法会初始化对象的状态，并返回一个指向该对象的引用。</li><li><strong>访问成员变量</strong>：一旦对象被创建，我们可以使用点操作符（<code>.</code>）来访问对象的成员变量，并为其赋值或获取值。</li><li><strong>调用成员方法</strong>：同样，我们也可以使用<strong>点操作符</strong>来调用对象的成员方法，并向方法传递参数（如果需要）。</li></ol><p>以下是一个简单的示例，演示了如何创建类对象并使用它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> myNumber;</span><br><span class="line">    <span class="keyword">private</span> String myString;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">(<span class="type">int</span> number, String str)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myNumber = number;</span><br><span class="line">        <span class="built_in">this</span>.myString = str;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printDetails</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Number: &quot;</span> + myNumber);</span><br><span class="line">        System.out.println(<span class="string">&quot;String: &quot;</span> + myString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建类对象</span></span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>(<span class="number">10</span>, <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 访问成员变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> obj.myNumber;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> obj.myString;</span><br><span class="line">        System.out.println(<span class="string">&quot;Number: &quot;</span> + number);</span><br><span class="line">        System.out.println(<span class="string">&quot;String: &quot;</span> + str);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用成员方法</span></span><br><span class="line">        obj.printDetails();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 在这个示例中，我们首先定义了一个名为MyClass的类，其中包含了一个构造方法（用于初始化对象的状态）和一个成员方法（用于打印对象的属性）。</span></span><br><span class="line"><span class="comment"> 然后，在Main类中，我们通过调用MyClass的构造方法创建了一个名为obj的对象。</span></span><br><span class="line"><span class="comment"> 接着，我们通过点操作符访问对象的成员变量，并调用对象的成员方法来操作对象。 </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="三、JVM内存分析"><a href="#三、JVM内存分析" class="headerlink" title="三、JVM内存分析"></a>三、JVM内存分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop01;</span><br><span class="line"><span class="comment">/*实例变量属于成员变量，成员变量如果没有手动赋值，系统会赋默认值</span></span><br><span class="line"><span class="comment">    数据类型        默认值</span></span><br><span class="line"><span class="comment">    ----------------------</span></span><br><span class="line"><span class="comment">    byte            0</span></span><br><span class="line"><span class="comment">    short           0</span></span><br><span class="line"><span class="comment">    int             0</span></span><br><span class="line"><span class="comment">    long            0L</span></span><br><span class="line"><span class="comment">    float           0.0F</span></span><br><span class="line"><span class="comment">    double          0.0</span></span><br><span class="line"><span class="comment">    boolean         false</span></span><br><span class="line"><span class="comment">    char            \u0000</span></span><br><span class="line"><span class="comment">    引用数据类型      null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 属性：姓名，年龄，性别，他们都是实例变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 姓名</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 年龄</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 性别</span></span><br><span class="line">    <span class="type">boolean</span> gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 局部变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过学生类Student实例化学生对象</span></span><br><span class="line"></span><br><span class="line">（通过类创造对象）</span><br><span class="line">        <span class="comment">// Student s1; 是什么？s1是变量名。Student是一种数据类型名。属于引用数据类型。</span></span><br><span class="line">        <span class="comment">// s1也是局部变量。和i一样。</span></span><br><span class="line">        <span class="comment">// s1变量中保存的是：堆内存中Student对象的内存地址。</span></span><br><span class="line">        <span class="comment">// s1有一个特殊的称呼：引用</span></span><br><span class="line">        <span class="comment">// 什么是引用？引用的本质上是一个变量，这个变量中保存了java对象的内存地址。</span></span><br><span class="line">        <span class="comment">// 引用和对象要区分开。对象在JVM堆当中。引用是保存对象地址的变量。</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 访问对象的属性（读变量的值）</span></span><br><span class="line">        <span class="comment">// 访问实例变量的语法：引用.变量名</span></span><br><span class="line">        <span class="comment">// 两种访问方式：第一种读取，第二种修改。</span></span><br><span class="line">        <span class="comment">// 读取：引用.变量名 s1.name; s1.age; s1.gender;</span></span><br><span class="line">        <span class="comment">// 修改：引用.变量名 = 值; s1.name = &quot;jack&quot;; s1.age = 20; s1.gender = true;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + s1.name); <span class="comment">// null</span></span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span> + s1.age); <span class="comment">// 0</span></span><br><span class="line">        System.out.println(<span class="string">&quot;性别：&quot;</span> + (s1.gender ? <span class="string">&quot;男&quot;</span> : <span class="string">&quot;女&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改对象的属性（修改变量的值，给变量重新赋值）</span></span><br><span class="line">        s1.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        s1.age = <span class="number">20</span>;</span><br><span class="line">        s1.gender = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + s1.name); <span class="comment">// 张三</span></span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span> + s1.age); <span class="comment">// 20</span></span><br><span class="line">        System.out.println(<span class="string">&quot;性别：&quot;</span> + (s1.gender ? <span class="string">&quot;男&quot;</span> : <span class="string">&quot;女&quot;</span>)); <span class="comment">// 男</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再创建一个新对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 访问对象的属性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;姓名=&quot;</span> + s2.name); <span class="comment">// null</span></span><br><span class="line">        System.out.println(<span class="string">&quot;年龄=&quot;</span> + s2.age); <span class="comment">// 0</span></span><br><span class="line">        System.out.println(<span class="string">&quot;性别=&quot;</span> + (s2.gender ? <span class="string">&quot;男&quot;</span> : <span class="string">&quot;女&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改对象的属性</span></span><br><span class="line">        s2.name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">        s2.age = <span class="number">20</span>;</span><br><span class="line">        s2.gender = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;姓名=&quot;</span> + s2.name); <span class="comment">// 李四</span></span><br><span class="line">        System.out.println(<span class="string">&quot;年龄=&quot;</span> + s2.age); <span class="comment">// 20</span></span><br><span class="line">        System.out.println(<span class="string">&quot;性别=&quot;</span> + (s2.gender ? <span class="string">&quot;男&quot;</span> : <span class="string">&quot;女&quot;</span>)); <span class="comment">// 女</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405011253305.png" alt="JVM内存分析图"></p><p>从此图可以看出，开始将所有类的字节码存储到元空间当中，当对象被创建时就在堆内存中开辟一个空间，用于存储对象和实例变量等。然后通过引用实现对对象的一系列操作。<br>其中对象属性等的改变都发生在堆内存中，引用只不过保存了它的地址（这和C++中的指针很像）。</p><h2 id="四、实例变量和实例方法的访问"><a href="#四、实例变量和实例方法的访问" class="headerlink" title="四、实例变量和实例方法的访问"></a>四、实例变量和实例方法的访问</h2><ol><li>实例变量要想访问，必须先new对象。通过引用来访问实例变量。    </li><li>实例变量是不能通过类名直接访问的。</li><li>我们通常描述一个对象的行为动作时，不加static。 没有添加static的方法，被叫做：实例方法。（对象方法）</li><li>空指针异常：一个空引用访问实例相关的，都会出现空指针异常。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">    </span><br><span class="line">    String name; <span class="comment">// 实例变量</span></span><br><span class="line">    <span class="comment">// 出生日期</span></span><br><span class="line">    String birth;</span><br><span class="line">    <span class="comment">// 性别</span></span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法：行为动作</span></span><br><span class="line">    <span class="comment">// 吃</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123; <span class="comment">// 实例方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;宠物在吃东西&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 跑</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;宠物在跑步&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PetTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建宠物对象</span></span><br><span class="line">        <span class="type">Pet</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pet</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给属性赋值</span></span><br><span class="line">        dog.name = <span class="string">&quot;小黑&quot;</span>;</span><br><span class="line">        dog.birth = <span class="string">&quot;2012-10-11&quot;</span>;</span><br><span class="line">        dog.sex = <span class="string">&#x27;雄&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取属性的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;狗狗的名字：&quot;</span> + dog.name);</span><br><span class="line">        System.out.println(<span class="string">&quot;狗狗的生日：&quot;</span> + dog.birth);</span><br><span class="line">        System.out.println(<span class="string">&quot;狗狗的性别：&quot;</span> + dog.sex);</span><br><span class="line"></span><br><span class="line">        dog = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意：引用一旦为null，表示引用不再指向对象了。但是通过引用访问name属性，编译可以通过。</span></span><br><span class="line">        <span class="comment">// 运行时会出现异常：空指针异常。NullPointerException。这是一个非常著名的异常。</span></span><br><span class="line">        <span class="comment">// 为什么会出现空指针异常？因为运行的时候会找真正的对象，如果对象不存在了，就会出现这个异常。</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;狗狗的名字：&quot; + dog.name);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 会出现空指针异常。</span></span><br><span class="line">        dog.eat();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 会出现空指针异常。</span></span><br><span class="line">        <span class="comment">//dog.run();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//java.lang.NullPointerException</span></span><br></pre></td></tr></table></figure><blockquote><p>如果没有任何引用指向对象，该对象最终会被当做垃圾被GC回收。</p></blockquote></li></ol><h2 id="五、方法调用时传递参数"><a href="#五、方法调用时传递参数" class="headerlink" title="五、方法调用时传递参数"></a>五、方法调用时传递参数</h2><h3 id="5-1、方法调用时传递基本数据类型"><a href="#5-1、方法调用时传递基本数据类型" class="headerlink" title="5.1、方法调用时传递基本数据类型"></a>5.1、方法调用时传递基本数据类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 面试题：判断该程序的输出结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArgsTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 调用add方法的时候，将i传进去，实际上是怎么传的？将i变量中保存值10复制了一份，传给了add方法。</span></span><br><span class="line">        add(i);</span><br><span class="line">        System.out.println(<span class="string">&quot;main---&gt;&quot;</span> + i); <span class="comment">// 10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i)</span>&#123; <span class="comment">// 方法的形参是局部变量。</span></span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(<span class="string">&quot;add---&gt;&quot;</span> + i); <span class="comment">// 11</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405011253714.png" alt="在这里插入图片描述"></p><h3 id="5-2、方法调用时传递引用数据类型"><a href="#5-2、方法调用时传递引用数据类型" class="headerlink" title="5.2、方法调用时传递引用数据类型"></a>5.2、方法调用时传递引用数据类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop04;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 面试题：分析以下程序输出结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArgsTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        u.age = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// u是怎么传递过去的。实际上和i原理相同：都是将变量中保存的值传递过去。</span></span><br><span class="line">        <span class="comment">// 只不过这里的u变量中保存的值比较特殊，是一个对象的内存地址。</span></span><br><span class="line">        add(u);</span><br><span class="line">        System.out.println(<span class="string">&quot;main--&gt;&quot;</span> + u.age); <span class="comment">// 11</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User u)</span> &#123; <span class="comment">// u是一个引用。</span></span><br><span class="line">        u.age++;</span><br><span class="line">        System.out.println(<span class="string">&quot;add--&gt;&quot;</span> + u.age); <span class="comment">// 11</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个和基本数据类型原理相同。首先明确引用数据类型中应用存储的是User的地址，所以add(User u);实质上是将main中的引用u里存储的值（就是new User();的地址）复制一份给add方法。</p></blockquote><h2 id="六、封装"><a href="#六、封装" class="headerlink" title="* 六、封装"></a>* 六、封装</h2><p><strong>概念：</strong> 封装是面向对象编程中的一个重要概念，它指的是将数据和操作数据的方法捆绑在一起，并限制对数据的访问。<br>         封装的目的是隐藏对象的内部细节，只向外界暴露必要的接口，以防止外部代码直接访问对象的内部状态，从而提高代码的安全性和可维护性。<br><strong>如何实现封装：</strong><br><strong>数据隐藏（Data Hiding）：</strong> 封装通过将对象的数据隐藏起来即属性私有化，只允许通过对象的方法来访问和修改数据，从而防止外部直接访问对象的内部状态。<br><strong>访问控制（Access Control）：</strong> 通常，封装会将对象的属性设置为私有（private），只允许通过公共（public）方法来访问和修改这些属性。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop07;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为了保证User类型对象的age属性的安全，我们需要使用封装机制。实现封装的步骤是什么？</span></span><br><span class="line"><span class="comment"> *      第一步：属性私有化。(什么是私有化？使用 private 进行修饰。)</span></span><br><span class="line"><span class="comment"> *      属性私有化的作用是：禁止外部程序对该属性进行随意的访问。</span></span><br><span class="line"><span class="comment"> *      所有被private修饰的，都是私有的，私有的只能在本类中访问。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      第二步：对外提供setter和getter方法。</span></span><br><span class="line"><span class="comment"> *      为了保证外部的程序仍然可以访问age属性，因此要对外提供公开的访问入口。</span></span><br><span class="line"><span class="comment"> *      访问一般包括两种：</span></span><br><span class="line"><span class="comment"> *          读：读取属性的值</span></span><br><span class="line"><span class="comment"> *          改：修改属性的值</span></span><br><span class="line"><span class="comment"> *      那么应该对外提供两个方法，一个负责读，一个负责修改。</span></span><br><span class="line"><span class="comment"> *      读方法的格式：getter</span></span><br><span class="line"><span class="comment"> *          public int getAge()&#123;&#125;</span></span><br><span class="line"><span class="comment"> *      改方法的格式：setter</span></span><br><span class="line"><span class="comment"> *          public void setAge(int age)&#123;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取age属性的值</span></span><br><span class="line">    <span class="comment">// getter方法是绝对安全的。因为这个方法是读取属性的值，不会涉及修改操作。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//return this.age;</span></span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改age属性的值</span></span><br><span class="line">    <span class="comment">// setter方法当中就需要编写拦截过滤代码，来保证属性的安全。</span></span><br><span class="line">    <span class="comment">// java有就近原则，若不加this关键字都默认是形参age。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(age &lt; <span class="number">0</span> || age &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对不起，您的年龄值不合法！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// this. 大部分情况下可以省略。</span></span><br><span class="line">        <span class="comment">// this. 什么时候不能省略？用来区分局部变量和实例变量的时候。</span></span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="comment">// 读</span></span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span> + u.getAge());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 改</span></span><br><span class="line">        u.setAge(-<span class="number">100</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 读</span></span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span> + u.getAge());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//改</span></span><br><span class="line">        u.setAge(<span class="number">50</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//读</span></span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span> + u.getAge()); <span class="comment">// 50</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、构造方法"><a href="#七、构造方法" class="headerlink" title="* 七、构造方法"></a>* 七、构造方法</h2><h3 id="7-1、构造方法的基本知识点"><a href="#7-1、构造方法的基本知识点" class="headerlink" title="7.1、构造方法的基本知识点"></a>7.1、构造方法的基本知识点</h3><h4 id="1、构造方法的作用"><a href="#1、构造方法的作用" class="headerlink" title="1、构造方法的作用"></a>1、构造方法的作用</h4><p><strong>对象的创建：</strong> 构造方法通过调用完成对象的创建。当使用 new 关键字实例化一个对象时，构造方法被调用，对象在内存中被创建并分配空间。<br><strong>对象的初始化：</strong> 构造方法用于给对象的所有属性赋值，即对象的初始化。它确保对象在创建后处于一个合适的状态，属性被赋予初始值，以便对象可以正常运行。   </p><h4 id="2、定义构造方法的方式"><a href="#2、定义构造方法的方式" class="headerlink" title="2、定义构造方法的方式"></a>2、定义构造方法的方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符列表] 构造方法名(形参列表) &#123;</span><br><span class="line">构造方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong>    </p><ul><li>构造方法名必须和类名一致，以便编译器能够识别并与类关联。    </li><li>构造方法不需要提供返回值类型，因为它的主要目的是创建对象，而不是返回值。    </li><li>如果提供了返回值类型，则该方法不再是构造方法，而是普通方法，不能用于对象的创建。</li></ul><h4 id="3、构造方法怎么调用呢？"><a href="#3、构造方法怎么调用呢？" class="headerlink" title="3、构造方法怎么调用呢？"></a>3、构造方法怎么调用呢？</h4><ul><li>使用new运算符来调用。</li><li>语法：new 构造方法名(实参);</li><li>注意：构造方法最终执行结束之后，会自动将创建的对象的内存地址返回。但构造方法体中不需要提供“return 值;”这样的语句。</li></ul><h4 id="4、构造方法相关注意事项"><a href="#4、构造方法相关注意事项" class="headerlink" title="4、构造方法相关注意事项"></a>4、构造方法相关注意事项</h4><ul><li>在Java语言中，如果一个类没有显式定义构造方法，系统会默认提供一个无参数的构造方法。这个构造方法通常称为缺省构造器。</li><li>如果一个类显式定义了构造方法，系统则不再提供缺省构造器。因此，为了对象创建更加方便，建议手动编写一个无参数的构造方法。</li><li>在Java中，一个类可以定义多个构造方法，并且这些构造方法自动构成了方法的重载。这意味着可以根据不同的参数列表调用不同的构造方法来创建对象。</li><li>构造方法中给属性赋值是对象第一次创建时属性的初始值。然而，单独定义set方法给属性赋值的好处在于后期可以灵活地修改属性的值。这种方式允许在对象创建后，根据需要修改对象的属性，从而增加了对象的灵活性和可维护性。</li></ul><h4 id="5、构造方法的执行原理"><a href="#5、构造方法的执行原理" class="headerlink" title="5、构造方法的执行原理"></a>5、构造方法的执行原理</h4><ul><li><p>构造方法的执行包括两个重要的阶段：</p><ul><li>第一阶段：对象的创建</li><li>第二阶段：对象的初始化</li></ul></li><li><p>对象在什么时候创建的？</p><ul><li>当使用<code>new</code>关键字实例化一个对象时，在堆内存中直接开辟空间。这个过程中，会给对象的所有属性<strong>赋默认值</strong>，完成对象的创建。这一过程发生在构造方法体执行之前。</li></ul></li><li><p>对象初始化在什么时候完成的？</p><ul><li>构造方法体开始执行时，标志着对象的初始化过程开始。在构造方法体中，可以对对象的属性进行赋值等初始化操作。构造方法体执行完毕，表示对象初始化完毕。此时，对象处于可用状态，可以被程序进一步操作和调用。</li></ul></li></ul><h4 id="6、构造代码块"><a href="#6、构造代码块" class="headerlink" title="6、构造代码块"></a>6、构造代码块</h4><ul><li><p><strong>语法格式：</strong></p><ul><li>构造代码块的语法格式为一对大括号<code>&#123;&#125;</code>，没有参数列表。</li></ul></li><li><p><strong>执行时机及次数：</strong></p><ul><li>每次在使用<code>new</code>关键字创建对象时，构造代码块都会被执行。</li><li>构造代码块是在构造方法执行之前执行的，因此在对象的初始化过程中，构造代码块是首先被执行的。    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造代码块被执行&quot;</span>);</span><br><span class="line">        x = <span class="number">5</span>;</span><br><span class="line">        y = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Example</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取x的值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取y的值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getY</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        <span class="type">Example</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Example</span>();</span><br><span class="line">        <span class="comment">// 输出属性值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;x 的值为：&quot;</span> + obj.getX());</span><br><span class="line">        System.out.println(<span class="string">&quot;y 的值为：&quot;</span> + obj.getY());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="7、构造代码块的作用"><a href="#7、构造代码块的作用" class="headerlink" title="7、构造代码块的作用"></a>7、构造代码块的作用</h4><p>构造代码块可以用于将对象初始化时共享的代码抽取出来，实现代码的复用。具体而言：</p><ul><li>如果所有的构造方法在最开始的时候有相同的一部分代码，可以将这部分代码放入构造代码块中。</li><li>构造代码块会在每次对象创建时都执行，确保共享的代码被执行，并且避免了代码重复。<br>这样，通过构造代码块，可以提高代码的可维护性和可读性，减少代码冗余，提高代码复用性。</li></ul><h2 id="八、this关键字"><a href="#八、this关键字" class="headerlink" title="*八、this关键字"></a>*八、this关键字</h2><p>this 本质上是一个引用。this 中保存的是当前对象的内存地址。<br>在Java中，<code>this</code> 是一个关键字，用于引用当前对象的实例。它通常用于区分实例变量和方法参数之间的命名冲突，或者在一个类的方法内部调用同一个类的另一个方法。下面详细解释 <code>this</code> 的几个常见用途：</p><ol><li><p><strong>区分实例变量和方法参数</strong>：当方法参数的名称与实例变量的名称相同时，使用 <code>this</code> 来引用当前对象的实例变量。这样可以明确指示要访问的是实例变量而不是方法参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(<span class="type">int</span> value)</span> &#123;   <span class="comment">//这个形参与属性value相同，若不加this则根据Java中的就近原则，方法中的value都是形参value。</span></span><br><span class="line">        <span class="built_in">this</span>.value = value; <span class="comment">// 使用 this 引用实例变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 <code>this.value</code> 指的是当前对象的 <code>value</code> 实例变量，而 <code>value</code> 是方法的参数。</p></li><li><p><strong>在构造器中调用另一个构造器</strong>：可以使用 <code>this</code> 调用<strong>同一个类</strong>的另一个构造器，且只能出现在第一行。这种方法通常被称为<strong>构造器重载</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//new MyClass(10,&quot;giaogiao&quot;);  这么会创建一个新对象</span></span><br><span class="line">        <span class="built_in">this</span>(<span class="number">10</span>,<span class="string">&quot;giaogiao&quot;</span>);<span class="comment">// 调用另一个构造器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*这个的目的是什么？</span></span><br><span class="line"><span class="comment">          当要求类在初始化时，给它赋指定的默认值。</span></span><br><span class="line"><span class="comment">          EG：this.value=10;</span></span><br><span class="line"><span class="comment">              this.name=&quot;giaogiao&quot;;</span></span><br><span class="line"><span class="comment">          这段代码其实是重复的。而通过this(10,&quot;giaogiao&quot;);获取当前对象，调用MyClass(int value,String name)构造器以简化开发。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">(<span class="type">int</span> value,String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，无参构造器调用了带参构造器，以避免重复代码。</p></li><li><p><strong>传递当前对象的引用</strong>：可以将当前对象的引用传递给其他方法，这在某些情况下很有用。</p></li></ol><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405011254685.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop6;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">  <span class="comment">// 私有成员变量 name</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 带参构造方法，用于初始化 name</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 无参构造方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取学生姓名的方法</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置学生姓名的方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 学习方法，打印当前对象的引用地址</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;study----&gt;&quot;</span> + <span class="built_in">this</span>);  <span class="comment">// 验证this是当前对象的引用。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop6;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentTest</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建学生对象s1，初始化姓名为&quot;小吴&quot;</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小吴&quot;</span>);</span><br><span class="line">    <span class="comment">// 打印s1对象的引用地址</span></span><br><span class="line">    System.out.println(<span class="string">&quot;main----&gt;&quot;</span> + s1);</span><br><span class="line">    <span class="comment">// 调用s1对象的study()方法</span></span><br><span class="line">    s1.study();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建学生对象s2，初始化姓名为&quot;小花&quot;</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小花&quot;</span>);</span><br><span class="line">    <span class="comment">// 打印s2对象的引用地址</span></span><br><span class="line">    System.out.println(<span class="string">&quot;main----&gt;&quot;</span> + s2);</span><br><span class="line">    <span class="comment">// 调用s2对象的study()方法</span></span><br><span class="line">    s2.study();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>在Java中，当对象调用自己的方法时，方法体内的 this 关键字会引用该对象的实例。<br>在方法被调用时，Java虚拟机会隐式地将当前对象的引用传递给方法，以便方法能够访问对象的成员变量和方法。<br>因此，在普通方法中通过 this 关键字引用的就是调用该方法的当前对象。</p></blockquote><h2 id="九、static关键字"><a href="#九、static关键字" class="headerlink" title="九、static关键字"></a>九、static关键字</h2><p>在Java中，使用static关键字声明的成员（变量、方法、代码块）是类级别的，而不是与类的每个实例相关联的。<br>因此，它们可以通过类名直接访问，而无需创建类的实例。</p><h3 id="9-1、静态变量存储图"><a href="#9-1、静态变量存储图" class="headerlink" title="9.1、静态变量存储图"></a>9.1、静态变量存储图</h3><p>   1、没使用静态变量是的存储图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//用户id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">//用户国籍</span></span><br><span class="line">    <span class="keyword">private</span> String country=<span class="string">&quot;China&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PrintInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ID: &quot;</span> + id+<span class="string">&quot;\tCountry: &quot;</span> + country);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;1001&quot;</span>);</span><br><span class="line">        user1.PrintInfo();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;1002&quot;</span>);</span><br><span class="line">        user2.PrintInfo();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;1003&quot;</span>);</span><br><span class="line">        user3.PrintInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405011255258.png"></p><p>2、使用静态变量时的存储图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//用户id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">//用户国籍</span></span><br><span class="line">    <span class="comment">//静态变量什么时候开劈空间（初始化）、存储在哪里？</span></span><br><span class="line">    <span class="comment">//类加载时初始化</span></span><br><span class="line">    <span class="comment">//JDK8之后：静态变量存储在堆内存之中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String country=<span class="string">&quot;China&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PrintInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ID: &quot;</span> + id+<span class="string">&quot;\tCountry: &quot;</span> + country);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camellia.oop8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.camellia.oop7.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        com.camellia.oop7.<span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.camellia.oop7.User(<span class="string">&quot;1001&quot;</span>);</span><br><span class="line">        user1.PrintInfo();</span><br><span class="line">        com.camellia.oop7.<span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.camellia.oop7.User(<span class="string">&quot;1002&quot;</span>);</span><br><span class="line">        user2.PrintInfo();</span><br><span class="line">        com.camellia.oop7.<span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;1003&quot;</span>);</span><br><span class="line">        user3.PrintInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405011255359.png"></p><h3 id="9-2、Java中静态变量和方法的访问，以及静态变量不能使用this关键字"><a href="#9-2、Java中静态变量和方法的访问，以及静态变量不能使用this关键字" class="headerlink" title="9.2、Java中静态变量和方法的访问，以及静态变量不能使用this关键字"></a>9.2、Java中静态变量和方法的访问，以及静态变量不能使用this关键字</h3><ol><li>静态变量和方法建议使用<code>类名.</code>调用。虽然用<code>引用.</code>也可以，但是实质还是通过类来调用，而且这样容易和实例变量和方法的访问相混淆。    </li><li>静态方法不能使用 this 关键字是因为 this 关键字代表当前对象的实例，而静态方法是与类相关联的，不依赖于任何特定的实例。所以无法直接访问实例变量和方法。</li></ol><h3 id="9-3、静态代码块"><a href="#9-3、静态代码块" class="headerlink" title="9.3、静态代码块"></a>9.3、静态代码块</h3><p>静态代码块是使用 <code>static</code> 关键字声明的代码块，它在类被加载时执行，并且只执行一次。<br>静态代码块通常用于在类加载时进行初始化操作，例如初始化静态变量或执行静态方法。它们的执行顺序是在类加载时按照代码顺序执行。</p><p><strong>静态代码块的特点包括：</strong></p><ol><li><p><strong>使用 <code>static</code> 关键字声明</strong>：静态代码块使用 <code>static</code> 关键字进行声明，以标识它们是与类相关联的，而不是与类的实例相关联的。</p></li><li><p><strong>在类加载时执行</strong>：静态代码块在类被加载时执行，并且只执行一次。类的加载是指当 JVM 第一次加载类时发生的操作，通常在首次创建类的实例之前。</p></li><li><p><strong>仅执行一次</strong>：静态代码块只会在类加载时执行一次，即使没有创建类的实例也会执行。</p></li></ol><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticTest01</span> &#123; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span>&#123; </span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例变量</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;zhangsan&quot;</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 报错原因：在静态上下文中无法直接访问实例相关的数据。</span></span><br><span class="line">        <span class="comment">//System.out.println(name);</span></span><br><span class="line">        <span class="comment">// 这个i可以访问，是因为i变量是静态变量，正好也是在类加载时初始化。</span></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块1执行了&quot;</span>);</span><br><span class="line">        <span class="comment">// j无法访问的原因是：程序执行到这里的时候，j变量不存在。</span></span><br><span class="line">        <span class="comment">//System.out.println(j);</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;xxxx-xx-xx xx:xx:xx 000 -&gt; StaticTest01.class完成了类加载！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块2执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main execute!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块3执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态代码的执行顺序只能靠编写顺序的来确定，编写时在前的也就先执行。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Method（方法）</title>
      <link href="/2024/04/27/Java%20SE/5.%20Method%EF%BC%88%E6%96%B9%E6%B3%95%EF%BC%89/"/>
      <url>/2024/04/27/Java%20SE/5.%20Method%EF%BC%88%E6%96%B9%E6%B3%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="Method-方法"><a href="#Method-方法" class="headerlink" title="Method (方法)"></a>Method (方法)</h1><h2 id="一、静态方法什么时候需要用类名调用？"><a href="#一、静态方法什么时候需要用类名调用？" class="headerlink" title="一、静态方法什么时候需要用类名调用？"></a>一、静态方法什么时候需要用类名调用？</h2><p>调用者和被调用者在同一个类中时，可以省略。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用方法是，类名. 什么情况下可以省略。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//调用method1</span></span><br><span class="line">        method1();</span><br><span class="line">        MethodTest01.method1();</span><br><span class="line">        <span class="comment">//调用method2</span></span><br><span class="line">        <span class="comment">/*method2(); 编译器报错*/</span></span><br><span class="line">        MethodTest.method2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mothod1执行了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">MethodTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method2执行了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、方法语法的小细节"><a href="#二、方法语法的小细节" class="headerlink" title="二、方法语法的小细节"></a>二、方法语法的小细节</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodTest05</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缺少返回语句</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">99</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//虽然这里有返回语句，但是有几率不执行if语句。所以编译器不通过。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、方法执行的内存图"><a href="#三、方法执行的内存图" class="headerlink" title="三、方法执行的内存图"></a>三、方法执行的内存图</h2><blockquote><p><strong>概念：</strong> Java 的元空间（Metaspace）是 Java 虚拟机（JVM）用来存储类元数据的内存区域。在传统的 Java 虚拟机实现中，类元数据通常存储在永久代（Permanent Generation）中。但是，从 JDK 8 开始，永久代被移除，取而代之的是元空间。 </p><p><strong>元空间与永久代相比有几个显著的不同点：</strong></p><ul><li>内存位置： 元空间不是在 Java 虚拟机的堆内存中，而是位于本地内存中。这使得元空间的大小不受堆内存的限制，可以动态地根据应用程序的需要调整大小。</li><li>自动调整大小： 元空间的大小可以根据应用程序的需要动态调整，因此不容易出现类加载溢出的情况。在使用元空间时，不需要手动设置元空间的大小，JVM 会根据应用程序的需求自动调整。</li><li>内存回收： 元空间的内存是由 JVM 进行管理的，不需要像永久代一样手动进行垃圾回收。当类加载器不再需要某些类的元数据时，JVM 会自动进行回收，而不会出现永久代中的内存泄漏问题。</li><li>垃圾收集器： 元空间的垃圾收集与堆内存的垃圾收集不同，通常不会触发 Full GC。类加载器卸载类时，相关的元数据会被及时回收，不会等待垃圾收集器的触发。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.方法如果只定义，不调用是不会分配内存空间。（从Java8开始，方法的字节码指令存储在元空间metaspace当中。元空间使用的是本地内存。）</span></span><br><span class="line"><span class="comment">2.方法调用的瞬间，会在JVM的栈内存当中分配活动场所，此时发生压栈动作。</span></span><br><span class="line"><span class="comment">3.方法一旦结束，给该方法分配的内存空间就会释放。此时发生弹栈动作。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodTest02</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main begin&quot;</span>);</span><br><span class="line">        m1();</span><br><span class="line">        System.out.println(<span class="string">&quot;main over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m1 begin&quot;</span>);</span><br><span class="line">        m2();</span><br><span class="line">        System.out.println(<span class="string">&quot;m1 over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m2 begin&quot;</span>);</span><br><span class="line">        m3();</span><br><span class="line">        System.out.println(<span class="string">&quot;m2 over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m3 begin&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;m3 over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405011253474.png"></p><h2 id="四、方法重载"><a href="#四、方法重载" class="headerlink" title="四、方法重载"></a>四、方法重载</h2><h3 id="4-1、在-Java-中，方法重载需要满足以下条件："><a href="#4-1、在-Java-中，方法重载需要满足以下条件：" class="headerlink" title="4.1、在 Java 中，方法重载需要满足以下条件："></a>4.1、在 Java 中，方法重载需要满足以下条件：</h3><ol><li><strong>方法名称相同：</strong> 重载方法的名称必须相同。</li><li><strong>参数列表不同：</strong> 重载方法的参数列表必须不同，可以通过参数的数量、类型或者顺序来区分不同的重载方法。</li><li><strong>返回类型可以不同：</strong> 重载方法的返回类型可以相同也可以不同。但是，仅仅通过返回类型的不同是无法实现方法重载的，因为 Java 中不允许仅通过返回类型的不同来区分不同的方法。</li><li><strong>访问修饰符、方法体、抛出的异常可以相同也可以不同：</strong> 重载方法的访问修饰符、方法体、以及方法中可能抛出的异常可以相同也可以不同。</li><li><strong>方法重载与参数的名称无关：</strong> 方法重载与参数的名称无关，只与参数列表的类型、数量和顺序有关。</li></ol><h3 id="4-2、方法重载示例代码"><a href="#4-2、方法重载示例代码" class="headerlink" title="4.2、方法重载示例代码"></a>4.2、方法重载示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法重载是编译阶段的机制还是运行阶段的机制？</span></span><br><span class="line"><span class="comment">方法重载机制是编译阶段的机制。</span></span><br><span class="line"><span class="comment">在编译阶段已经完成了方法的绑定。</span></span><br><span class="line"><span class="comment">在编译阶段已经确定了要调用哪个方法了。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">什么情况下我们考虑使用方法重载呢？</span></span><br><span class="line"><span class="comment">在以后的开发中，在一个类中，如果两个方法的功能相似，建议将方法名定义为同一个名字。</span></span><br><span class="line"><span class="comment">此时就使用了方法重载机制。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodOverloadTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        m1();</span><br><span class="line">        m1</span><br><span class="line"></span><br><span class="line">(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        m2(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">        m2(<span class="number">10L</span>, <span class="number">20L</span>);</span><br><span class="line"></span><br><span class="line">        m3(<span class="string">&quot;x&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        m3(<span class="number">10</span>, <span class="string">&quot;x&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 形参的个数不同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m1()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m1(String s)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 形参类型不同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m2(int a, int b)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">(<span class="type">long</span> a, <span class="type">long</span> b)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m2(long a, long b)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 形参顺序不同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">(String s, <span class="type">int</span> a)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m3(String s, int a)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">(<span class="type">int</span> a, String s)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m3(int a, String s)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以下这两个方法没有构成方法重载，属于方法重复定义了。语法错误，编译器报错。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public static void doSome(int a, int b)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">public static void doSome(int x, int y)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3、println方法重载源码-部分"><a href="#4-3、println方法重载源码-部分" class="headerlink" title="4.3、println方法重载源码(部分)"></a>4.3、println方法重载源码(部分)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Methods that do not terminate lines */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 打印布尔值。 &#123;<span class="doctag">@link</span> 生成的字符串</span></span><br><span class="line"><span class="comment">    * java.lang.String#valueOf（boolean）&#125; 被转换为字节</span></span><br><span class="line"><span class="comment">    * 根据平台默认的字符编码，以及这些字节</span></span><br><span class="line"><span class="comment">    * 完全按照</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> #write（int）&#125; 方法。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> b 要打印的 &#123;<span class="doctag">@code</span> 布尔值&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">boolean</span> b)</span> &#123;</span><br><span class="line">       write(String.valueOf(b));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 打印字符。 该字符将转换为一个或多个字节</span></span><br><span class="line"><span class="comment">    * 根据给定给构造函数的字符编码，或</span></span><br><span class="line"><span class="comment">    * 平台的默认字符编码（如果未指定）。这些字节</span></span><br><span class="line"><span class="comment">    * 完全按照 &#123;<span class="doctag">@link</span> #write（int）&#125; 方法的方式编写。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> c 要打印的 &#123;<span class="doctag">@code</span> 字符&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">       write(String.valueOf(c));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 打印整数。 &#123;<span class="doctag">@link</span> 生成的字符串</span></span><br><span class="line"><span class="comment">    * java.lang.String#valueOf（int）&#125; 被转换为字节</span></span><br><span class="line"><span class="comment">    * 根据平台默认的字符编码，以及这些字节</span></span><br><span class="line"><span class="comment">    * 完全按照</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> #write（int）&#125; 方法。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> i 要打印的 &#123;<span class="doctag">@code</span> int&#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> java.lang.Integer#toString（int）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">       write(String.valueOf(i));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 打印长整数。 &#123;<span class="doctag">@link</span> 生成的字符串</span></span><br><span class="line"><span class="comment">    * java.lang.String#valueOf（long）&#125; 被翻译成字节</span></span><br><span class="line"><span class="comment">    * 根据平台默认的字符编码，以及这些字节</span></span><br><span class="line"><span class="comment">    * 完全按照</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> #write（int）&#125; 方法。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> l 要打印的 &#123;<span class="doctag">@code</span> long&#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> java.lang.Long#toString（long）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">long</span> l)</span> &#123;</span><br><span class="line">       write(String.valueOf(l));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 打印浮点数。 &#123;<span class="doctag">@link</span> 生成的字符串</span></span><br><span class="line"><span class="comment">    * java.lang.String#valueOf（float）&#125; 被转换为字节</span></span><br><span class="line"><span class="comment">    * 根据平台默认的字符编码，以及这些字节</span></span><br><span class="line"><span class="comment">    * 完全按照</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> #write（int）&#125; 方法。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> f 要打印的 &#123;<span class="doctag">@code</span> float&#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> java.lang.Float#toString（float）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">float</span> f)</span> &#123;</span><br><span class="line">       write(String.valueOf(f));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 打印双精度浮点数。 生成的字符串</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> java.lang.String#valueOf（double）&#125; 被翻译成</span></span><br><span class="line"><span class="comment">    * 字节根据平台的默认字符编码，这些</span></span><br><span class="line"><span class="comment">    * 字节的写入方式与 &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">    * #write（int）&#125; 方法。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> d 要打印的 &#123;<span class="doctag">@code</span> double&#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> java.lang.Double#toString（double）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">double</span> d)</span> &#123;</span><br><span class="line">       write(String.valueOf(d));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *打印字符数组。 字符转换为字节</span></span><br><span class="line"><span class="comment">    * 根据给定给构造函数的字符编码，或</span></span><br><span class="line"><span class="comment">    * 平台的默认字符编码（如果未指定）。这些字节</span></span><br><span class="line"><span class="comment">    * 完全按照 &#123;<span class="doctag">@link</span> #write（int）&#125; 方法的方式编写。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> s 要打印的字符数组</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException 如果 &#123;<span class="doctag">@code</span> s&#125; 为 &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">char</span> s[])</span> &#123;</span><br><span class="line">       write(s);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 打印字符串。 如果参数为 &#123;<span class="doctag">@code</span> null&#125;，则字符串</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> “null”&#125; 被打印出来。 否则，字符串的字符为</span></span><br><span class="line"><span class="comment">    * 根据给定的字符编码转换为字节</span></span><br><span class="line"><span class="comment">    * 构造函数，或平台的默认字符编码（如果为否）</span></span><br><span class="line"><span class="comment">    *指定。这些字节的写入方式与</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> #write（int）&#125; 方法。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> s 要打印的 &#123;<span class="doctag">@code</span> String&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String s)</span> &#123;</span><br><span class="line">       write(String.valueOf(s));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *打印对象。 由 &#123;<span class="doctag">@link</span> 生成的字符串</span></span><br><span class="line"><span class="comment">    * java.lang.String#valueOf（Object）&#125; 方法转换为字节</span></span><br><span class="line"><span class="comment">    * 根据平台默认的字符编码，以及这些字节</span></span><br><span class="line"><span class="comment">    * 完全按照</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> #write（int）&#125; 方法。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> obj 要打印的 &#123;<span class="doctag">@code</span> 对象&#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> java.lang.Object#toString（）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">       write(String.valueOf(obj));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="五、方法的递归调用"><a href="#五、方法的递归调用" class="headerlink" title="五、方法的递归调用"></a>五、方法的递归调用</h2><h3 id="5-1、概念"><a href="#5-1、概念" class="headerlink" title="5.1、概念"></a>5.1、概念</h3><p>方法的递归调用是指在方法的执行过程中直接或间接地调用自己</p><p>。<br>递归是一种常用的编程技术，特别适用于解决可以被分解为相同问题的子问题的情况，例如树的遍历、阶乘计算、斐波那契数列等。</p><h3 id="5-2、在使用递归调用时，需要注意以下几点"><a href="#5-2、在使用递归调用时，需要注意以下几点" class="headerlink" title="5.2、在使用递归调用时，需要注意以下几点"></a>5.2、在使用递归调用时，需要注意以下几点</h3><p><strong>1、递归终止条件：</strong> 在递归方法中，必须包含递归终止条件，以避免无限递归调用，导致栈溢出。递归调用如果没有结束条件的话，会出现栈内存溢出错误： java.lang.StackOverflowError<br><strong>2、递归调用栈</strong>： 每次进行递归调用时，都会在调用栈上创建一个新的方法调用帧。因此，递归调用的层数不能太深，否则可能导致栈溢出错误。<br><strong>3、性能考虑：</strong> 递归调用可能会导致性能下降，因为每次递归调用都会涉及方法调用、栈帧的创建和销毁等操作。在某些情况下，使用迭代或其他方法可能更有效。<br><strong>4、空间复杂度：</strong> 递归调用的空间复杂度通常较高，因为需要在调用栈上保存每次方法调用的状态。在设计递归算法时，应该考虑到这一点。<br><strong>5、测试和调试：</strong> 递归调用的测试和调试可能比较困难，因为需要考虑递归的深度和复杂度。可以使用断点调试、打印调试信息等方法来帮助理解和调试递归算法。    </p><blockquote><p>在实际开发中，如果因为递归调用发生了栈内存溢出错误，该怎么办？<br>首先可以调整栈内存的大小。扩大栈内存。<br>如果扩大之后，运行一段时间还是出现了栈内存溢出错误。<br>可能是因为递归结束条件不对。需要进行代码的修改。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodRecursionTest01</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> jieCheng(n);</span><br><span class="line">        System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">jieCheng</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n * jieCheng(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Switch语句</title>
      <link href="/2024/04/25/Java%20SE/4.%20Switch%E8%AF%AD%E5%8F%A5/"/>
      <url>/2024/04/25/Java%20SE/4.%20Switch%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="Switch-语句"><a href="#Switch-语句" class="headerlink" title="Switch 语句"></a>Switch 语句</h1><h2 id="一、case-语句可以合并"><a href="#一、case-语句可以合并" class="headerlink" title="一、case 语句可以合并"></a>一、case 语句可以合并</h2><p>case 后面只能是字面量值这样的值，不能使用变量。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">month</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        String str;</span><br><span class="line">        <span class="keyword">switch</span>(month) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                str=<span class="string">&quot;春天&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span> : <span class="keyword">case</span> <span class="number">7</span>: <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                str=<span class="string">&quot;夏天&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>: <span class="keyword">case</span> <span class="number">10</span>: <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                str=<span class="string">&quot;秋天&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>: <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                str=<span class="string">&quot;冬天&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: str=<span class="string">&quot;请输入正确月份&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、Java12-中-switch-的新特性"><a href="#二、Java12-中-switch-的新特性" class="headerlink" title="二、Java12 中 switch 的新特性"></a>二、Java12 中 switch 的新特性</h2><p>增强的 switch 语句是 Java 12 中引入的一项语言特性，它在 Java 14 中得到了进一步改进。这个特性的目的是提供更简洁、灵活和易读的 switch 语法。   </p><p>传统的 switch 语句在处理多个条件分支时可能存在一些问题，例如需要使用 break 语句显式地结束每个分支，容易出现忘记添加 break 而导致多个分支执行的情况。</p><p>增强的 switch 语句解决了这些问题，并引入了一些新的语法特性。     </p><p><strong>增强的 switch 语句的特点如下：</strong></p><ul><li>使用表达式作为分支条件：增强的 switch 语句允许在每个 case 分支中使用表达式，而不仅限于常量。这使得代码更加灵活，可以更方便地处理各种条件。</li><li>无需显式 break：在传统的 switch 语句中，每个 case 分支必须以 break 语句结束，否则会继续执行下一个分支。而增强的 switch 语句不需要显式地使用 break，每个分支会自动结束，不会继续执行下一个分支。</li><li>使用箭头(-&gt;)：在增强的 switch 语句中，分支的语法使用箭头(-&gt;)来连接分支的条件和执行语句，这使得代码更加简洁和易读。</li><li>引入 yield 关键字：在 Java 14 中，增强的 switch 语句引入了 yield 关键字，用于在分支中返回值。这使得 switch 语句可以像表达式一样返回值，增强了其功能性。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnhancedSwitchExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dayType</span> <span class="operator">=</span> <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> -&gt; <span class="string">&quot;Weekday&quot;</span>; <span class="comment">// 使用表达式作为分支条件</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span> -&gt; <span class="string">&quot;Weekend&quot;</span>;</span><br><span class="line">            <span class="keyword">default</span> -&gt; &#123; <span class="comment">// default 分支</span></span><br><span class="line">                <span class="keyword">yield</span> <span class="string">&quot;Invalid day&quot;</span>; <span class="comment">// 使用 yield 返回值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;Day type: &quot;</span> + dayType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Switch01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>-&gt; System.out.println(<span class="string">&quot;switch&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> -&gt; System.out.println(<span class="string">&quot;Change in&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span> -&gt; System.out.println(<span class="string">&quot;Java12&quot;</span>);</span><br><span class="line">            <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Switch02</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (expression)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> -&gt; System.out.println(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">            <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Switch03</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (expression)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> -&gt;&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;Wow!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>字节码解读</title>
      <link href="/2024/04/24/Java%20SE/3.%20%E5%AD%97%E8%8A%82%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
      <url>/2024/04/24/Java%20SE/3.%20%E5%AD%97%E8%8A%82%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="字节码解读"><a href="#字节码解读" class="headerlink" title="字节码解读"></a>字节码解读</h1><h2 id="一、基础概念"><a href="#一、基础概念" class="headerlink" title="一、基础概念"></a>一、基础概念</h2><ol><li>Windows cmd 查看程序字节码指令：<code>javap -c</code></li><li>局部变量表、操作数栈、槽位<ul><li>在 Java 语言中，任何一个方法执行时，都会专门为这个方法分配所属的内存空间，供这个方法的使用。</li><li>每个方法都有自己独立的内存空间，这个内存空间有两块比较重要的内存空间：<strong>局部变量表、操作数栈</strong></li><li>此外，<strong>局部变量表中还管理着槽位</strong>，在 Java 虚拟机的线程栈中，局部变量、操作数栈和返回值等数据存储在称为“<strong>槽位</strong>”的内存单元中。</li><li>每个槽位通常可以容纳一个基本类型值或者是一个引用。</li></ul></li><li><code>bipush</code>、<code>istore</code>、<code>iload</code>、<code>iinc</code><ul><li><code>bipush</code> 是 Java 虚拟机（JVM）中的一个字节码指令，用于将一个字节（byte）常量推送到操作数栈顶。</li><li><code>istore</code> 是 Java 虚拟机（JVM）中的一个字节码指令，用于将整数类型的值从操作数栈顶存储到局部变量表中的指定位置。</li><li><code>iload</code> 是 Java 虚拟机（JVM）中的一个字节码指令，用于将整数类型的值从局部变量表中加载到操作数栈顶。</li><li><code>iinc</code> 是 Java 虚拟机（JVM）中的一个字节码指令，用于对局部变量表中的整数值进行增量操作。</li></ul></li></ol><h2 id="二、引例"><a href="#二、引例" class="headerlink" title="二、引例"></a>二、引例</h2><h3 id="2-1、局部变量表、操作数栈、槽位、字节码解读（详细）"><a href="#2-1、局部变量表、操作数栈、槽位、字节码解读（详细）" class="headerlink" title="2.1、局部变量表、操作数栈、槽位、字节码解读（详细）"></a>2.1、局部变量表、操作数栈、槽位、字节码解读（详细）</h3><ul><li><strong>源码：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> j=i;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>字节码：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Compiled from <span class="string">&quot;ReadClass.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReadClass</span><span class="params">()</span>;</span><br><span class="line">    Code:</span><br><span class="line">            <span class="number">0</span>: aload_0</span><br><span class="line">            <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">            <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>;</span><br><span class="line">    Code:</span><br><span class="line">            <span class="number">0</span>: bipush        <span class="number">10</span></span><br><span class="line">            <span class="number">2</span>: istore_1</span><br><span class="line">            <span class="number">3</span>: iload_1</span><br><span class="line">            <span class="number">4</span>: istore_2</span><br><span class="line">            <span class="number">5</span>: iinc          <span class="number">2</span>, <span class="number">1</span></span><br><span class="line">            <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img height="300" src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405011251901.png" width="600"/><ul><li><p><strong>解读：</strong>   </p><ul><li><code>bipush 10</code>: 将 10 这个字面量压入操作数栈中。    </li><li><code>istore_1</code>: 将操作数栈顶元素弹出，然后将其存储到局部变量表的一号槽位上。    </li><li><code>iload_1</code>: 将局部变量表 1 号槽位上的数据复制一份，压入操作数栈。    </li><li><code>istore_2</code>: 将操作数栈顶元素弹出，然后将其存储到局部变量表的二号槽位上。   </li><li><code>iinc 2, 1</code>: 将局部变量表的 2 号槽位上的数加一。</li></ul>  <img height="300" src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405011252894.png" width="600"/></li></ul><h3 id="2-2、i-、-i-字节码角度剖析"><a href="#2-2、i-、-i-字节码角度剖析" class="headerlink" title="2.2、i++、++i 字节码角度剖析"></a>2.2、i++、++i 字节码角度剖析</h3><ul><li><strong>i++ 源码：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadClass1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> j=i++;  <span class="comment">//先引用 i 的值，后执行自增操作。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>i++ 字节码：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Compiled from <span class="string">&quot;ReadClass1.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadClass1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReadClass1</span><span class="params">()</span>;</span><br><span class="line">    Code:</span><br><span class="line">            <span class="number">0</span>: aload_0</span><br><span class="line">            <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">            <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>;</span><br><span class="line">    Code:</span><br><span class="line">            <span class="number">0</span>: bipush        <span class="number">10</span>     <span class="comment">// 向操作数栈压入 10。</span></span><br><span class="line">            <span class="number">2</span>: istore_1             <span class="comment">// 将操作数栈顶元素弹出，然后将其存储到局部变量表的 1 号槽位上。</span></span><br><span class="line">            <span class="number">3</span>: iload_1              <span class="comment">// 将局部变量表 1 号槽位上的数据复制一份，压入操作数栈。压入的是                                                                                           10。</span></span><br><span class="line">            <span class="number">4</span>: iinc          <span class="number">1</span>, <span class="number">1</span>   <span class="comment">// 将局部变量表的 1 号槽位上的数加一。  </span></span><br><span class="line">            <span class="number">7</span>: istore_2             <span class="comment">// 将操作数栈顶元素弹出，然后将其存储到局部变量表的 2 号槽位上。</span></span><br><span class="line">            <span class="number">8</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><ul><li><strong>++i 源码：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadClass2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> j=++i;   <span class="comment">// 先执行自增操作，后引用 i 的值。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>++i 字节码：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Compiled from <span class="string">&quot;ReadClass2.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadClass2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReadClass2</span><span class="params">()</span>;</span><br><span class="line">    Code:</span><br><span class="line">            <span class="number">0</span>: aload_0</span><br><span class="line">            <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">            <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>;</span><br><span class="line">    Code:</span><br><span class="line">            <span class="number">0</span>: bipush        <span class="number">10</span>      <span class="comment">// 向操作数栈压入 10。</span></span><br><span class="line">            <span class="number">2</span>: istore_1              <span class="comment">// 将操作数栈顶元素弹出，然后将其存储到局部变量表的 1 号槽位上。</span></span><br><span class="line">            <span class="number">3</span>: iinc          <span class="number">1</span>, <span class="number">1</span>    <span class="comment">// 将局部变量表的 1 号槽位上的数加一。 此时一号槽位上的数是 11。</span></span><br><span class="line">            <span class="number">6</span>: iload_1               <span class="comment">// 将局部变量表 1 号槽位上的数据复制一份，压入操作数栈。压入的                                                                                          11。                     </span></span><br><span class="line">            <span class="number">7</span>: istore_2              <span class="comment">// 将操作数栈顶元素弹出，然后将其存储到局部变量表的 2 号槽位上。</span></span><br><span class="line">            <span class="number">8</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>变量类型</title>
      <link href="/2024/04/23/Java%20SE/2.%20%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/"/>
      <url>/2024/04/23/Java%20SE/2.%20%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h1><h2 id="一、整型变量"><a href="#一、整型变量" class="headerlink" title="一、整型变量"></a>一、整型变量</h2><p>byte &lt; short &lt; int &lt; long &lt; float &lt; double</p><blockquote><p>在 Java 中任何一个整数型字面量都会被默认被当做 int 类型来处理。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 100 是 4 个字节，b 是八个字节。</span></span><br><span class="line">        <span class="comment">// 所以存在自动类型类型转换。</span></span><br><span class="line">        <span class="type">long</span> b=<span class="number">100</span>;</span><br><span class="line">        <span class="comment">// 这个不存在类型转换。</span></span><br><span class="line">        <span class="type">long</span> c=<span class="number">100L</span>;</span><br><span class="line">        <span class="comment">// 这个会报错，原因是 = 右边先执行，这个整型字面量会以 int 类型处理，显然超过了 int 范围所以报错。其错误的原因在这。</span></span><br><span class="line">        <span class="type">long</span> e=<span class="number">2147483648</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1、自动类型转换"><a href="#1-1、自动类型转换" class="headerlink" title="1.1、自动类型转换"></a>1.1、自动类型转换</h3><p>可以理解为从小容量到大容量。程序员不需要明确地指定转换操作，而是由编程语言的规则自动执行。</p><h3 id="1-2、-强制类型转换"><a href="#1-2、-强制类型转换" class="headerlink" title="1.2、 强制类型转换"></a>1.2、 强制类型转换</h3><p>大容量转换为小容量，可能会有精度损失。Java 编程语言不会自动转换，由程序员自己强制转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 经典的例子</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> k=<span class="number">128</span>;</span><br><span class="line">        <span class="type">byte</span> e=(<span class="type">byte</span>)k; <span class="comment">//-128</span></span><br><span class="line">        <span class="type">int</span> m=<span class="number">129</span>;</span><br><span class="line">        <span class="type">byte</span> n=(<span class="type">byte</span>)m; -<span class="number">127</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>注意：<ul><li>当一个整数型字面量没有超过对应变量类型范围时，可以直接赋值给对应变量类型的变量。</li><li>byte 和 short 混合运算的时候，先各自转换为 int 再做运算。(byte+byte–&gt;int、 byte+short–&gt;int、 short+short–&gt;int)</li><li>当一个整数型字面量没有超过对应变量类型范围时，可以直接赋值给对应变量类型的变量。</li><li>注意强转时前后都要加（），因为优先级不同。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">byte</span> b=<span class="number">1</span>;</span><br><span class="line">        <span class="type">byte</span> a=<span class="number">127</span>;</span><br><span class="line">        <span class="comment">// 按道理这个由 int 转换为 byte 没有强转的话因该报错。</span></span><br><span class="line">        <span class="comment">// 其实这是 Java 语言开发者给程序员的优化措施。</span></span><br><span class="line">        <span class="comment">// 规则：当一个整数型字面量没有超过对应变量类型范围时，可以直接赋值给对应变量类型的变量。</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">short</span> m=<span class="number">10</span>;</span><br><span class="line">        <span class="type">byte</span> n=<span class="number">3</span>;</span><br><span class="line">        <span class="comment">// 编译器报错，最后结果是 int 类型，不能用 short 变量接收。（注意和字面量的区别）</span></span><br><span class="line">        <span class="type">short</span> result=m+n;</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span> c=<span class="number">10</span>/<span class="number">3</span>;</span><br><span class="line">        <span class="comment">// 10/3 都是字面量，所以会在编译器就计算出来。即在源码 ByteTest.java 中是 byte c=10/3,但是在编译后 ByteTest.class 中 byte c=3;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span> x=<span class="number">10</span>;</span><br><span class="line">        <span class="type">byte</span> y=<span class="number">3</span>;</span><br><span class="line">        <span class="type">byte</span> d=x/y;</span><br><span class="line">        <span class="comment">// 编译器报错,在编译阶段只能知道 x/y 结果为 int，只有在正式运行才知道 x,y 里面存的是什么。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、浮点型变量"><a href="#二、浮点型变量" class="headerlink" title="二、浮点型变量"></a>二、浮点型变量</h2><ul><li>float：单精度，可以精确到 7 位小数。    </li><li>double：双精度，可以精确到 15 位小数。   </li><li>浮点型的字面量默认当做 double 类型处理，要用 float 类型处理需要在字面量后面加 F&#x2F;f。</li><li>浮点型数据有两种表示形式：十进制、科学计数法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不存在类型转换</span></span><br><span class="line"><span class="type">float</span> f=<span class="number">3.14F</span>;</span><br><span class="line"><span class="comment">// 借助强制类型转换</span></span><br><span class="line"><span class="type">float</span> f=(<span class="type">float</span>)<span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><h3 id="2-1、浮点型数据存储原理"><a href="#2-1、浮点型数据存储原理" class="headerlink" title="2.1、浮点型数据存储原理"></a>2.1、浮点型数据存储原理</h3><p>浮点型数据存储原理涉及到计算机中的浮点数表示方法。通常情况下，浮点数由两部分组成：尾数（mantissa）和指数（exponent），以及一个符号位（sign bit），用来表示正负。</p><p>常见的浮点数表示方法是 IEEE 754 标准，它定义了单精度浮点数（32 位）和双精度浮点数（64 位）的存储格式。<br>在 IEEE 754 标准中，单精度浮点数的存储结构如下：</p><ul><li>符号位：1 位</li><li>指数位：8 位</li><li>尾数位：23 位</li></ul><p>双精度浮点数的存储结构如下：</p><ul><li>符号位：1 位</li><li>指数位：11 位</li><li>尾数位：52 位</li></ul><p>浮点数的实际值通过指数和尾数来表示。指数用来表示浮点数的数量级，尾数用来表示浮点数的精度。符号位用来表示浮点数的正负。</p><p>浮点数的存储原理基于科学计数法，即一个数可以表示为尾数乘以基数的指数次方。例如，对于单精度浮点数，可以表示为：<br>$$<br>(-1)^{\text{sign}} \times (1 + \text{mantissa}) \times 2^{\text{exponent} - \text{bias}}<br>$$</p><p>其中，sign 是符号位，mantissa 是尾数，exponent 是指数，bias 是偏置值（用于使指数可以表示负数）。这个公式基本上适用于双精度浮点数，只是指数偏置和尾数位数不同。</p><h2 id="三、字符型"><a href="#三、字符型" class="headerlink" title="三、字符型"></a>三、字符型</h2><h3 id="3-1、char"><a href="#3-1、char" class="headerlink" title="3.1、char"></a>3.1、char</h3><p>Java 中的 char 类型使用 Unicode 编码来表示字符。每个字符对应一个</p><p>唯一的 Unicode 码点，可以通过 \u 后跟 4 位十六进制数来表示。</p><h3 id="3-2、转义字符"><a href="#3-2、转义字符" class="headerlink" title="3.2、转义字符"></a>3.2、转义字符</h3><ul><li>\n： 换行符（newline），在输出时表示换行。    </li><li>\t： 制表符（tab），在输出时表示水平制表。    </li><li>\r： 回车符（carriage return），在输出时表示回车。    </li><li>‘： 单引号（single quote），用于表示单引号字符。    </li><li>“： 双引号（double quote），用于表示双引号字符。    </li><li>\： 反斜杠（backslash），用于表示反斜杠字符本身。</li></ul><h3 id="3-3、乱码"><a href="#3-3、乱码" class="headerlink" title="3.3、乱码"></a>3.3、乱码</h3><p>乱码通常是由于文本数据的编码方式与解码方式不匹配或者编码过程中出现了错误所致。<br>所以一定要保持编码与解码一致。</p><h3 id="3-4、char-参与运算"><a href="#3-4、char-参与运算" class="headerlink" title="3.4、char 参与运算"></a>3.4、char 参与运算</h3><p>byte、short、char 混合运算的时候，先各自转换为 int 再做运算。<br>多种数据类型混合运算的时候放，先各自转换为最大的再做运算。   </p><h2 id="四、boolean-类型"><a href="#四、boolean-类型" class="headerlink" title="四、boolean 类型"></a>四、boolean 类型</h2><p>在 Java 中，boolean 的值只有 true、false。（与 C、C++ 有所不同）</p><p><strong>总结：基本数据类型转换规则</strong>   </p><blockquote><p>1、八种基本数据类型除了 boolean 类型之外，都可以互相转换。<br>2、小容量可以自动转换为大容量，容量排序为：byte &lt; short,char &lt; int &lt; long &lt; float &lt; double<br>3、大容量不能自动转换为小容量，必须添加强制类型转换符，才能编译通过，但是运行时可能损失精度。<br>4、当整数型字面量没有超过 byte、short、char 的范围时，可以将其赋值给 byte、short、char 类型的变量。<br>5、byte、short、char 混合运算时，各自先转换为 int 再做运算。<br>6、多种数据类型混合运算的时候放，先各自转换为最大的再做运算。    </p></blockquote><p><strong>注意：</strong></p><blockquote><p>1、long e&#x3D;2147483648; 这个属于一个经典面试题，其错误的原因是 &#x3D; 右边先执行，这个整型字面量会以 int 类型处理，显然超过了 int 范围所以报错。<br>2、理解 byte a&#x3D;10&#x2F;3; 不报错，但是 byte b&#x3D;10; byte c&#x3D;3; a&#x3D;b&#x2F;3; 报错。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java SE基础知识</title>
      <link href="/2024/04/20/Java%20SE/1.%20Java-SE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2024/04/20/Java%20SE/1.%20Java-SE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">目录</p><!-- toc --></div><h1 id="Java-SE-基础知识"><a href="#Java-SE-基础知识" class="headerlink" title="Java SE 基础知识"></a>Java SE 基础知识</h1><h2 id="一、Java虚拟机（JVM）"><a href="#一、Java虚拟机（JVM）" class="headerlink" title="一、Java虚拟机（JVM）"></a>一、Java虚拟机（JVM）</h2><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405011249837.png"></p><h2 id="二、Java的加载与执行原理"><a href="#二、Java的加载与执行原理" class="headerlink" title="二、Java的加载与执行原理"></a>二、Java的加载与执行原理</h2><p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405011250158.PNG"></p><h2 id="三、JDK、JRE、JVM分别是什么？他们的关系是什么？"><a href="#三、JDK、JRE、JVM分别是什么？他们的关系是什么？" class="headerlink" title="三、JDK、JRE、JVM分别是什么？他们的关系是什么？"></a>三、JDK、JRE、JVM分别是什么？他们的关系是什么？</h2><ol><li><p><strong>JDK（Java Development Kit）：</strong><br>JDK 是 Java 开发工具包，它是 Java 开发者用来开发 Java 应用程序的核心组件。JDK 包括了 Java 编译器（javac）、Java 运行时环境（JRE）、Java 文档生成器（Javadoc）以及其他一些开发工具和库。简而言之，JDK 提供了开发 Java 应用程序所需的所有工具和资源。</p></li><li><p><strong>JRE（Java Runtime Environment）：</strong><br>JRE 是 Java 运行时环境，它是在运行 Java 应用程序时所必需的环境。JRE 包含了 Java 虚拟机（JVM）以及 Java 核心类库和支持文件。当用户想要运行一个已编译的 Java 应用程序时，他们需要安装 JRE。JRE 提供了 Java 应用程序的运行环境，但不包含开发工具。</p></li><li><p><strong>JVM（Java Virtual Machine）：</strong><br>JVM 是 Java 虚拟机，它是 Java 程序的运行环境。JVM 负责在实际的硬件平台上执行 Java 字节码（即编译后的 Java 代码）。JVM 负责加载字节码、解释执行或即时编译字节码为本地机器代码，并管理内存、执行垃圾回收等任务。JVM 的存在使得 Java 能够实现“一次编写，到处运行”的特性。</p><img src="https://camelliaxiaohua-1313958787.cos.ap-shanghai.myqcloud.com/asserts_JavaSE/202405011250370.png"  height="300" width="300"></li></ol><h2 id="四、class和public-class的区别"><a href="#四、class和public-class的区别" class="headerlink" title="四、class和public class的区别"></a>四、class和public class的区别</h2><ol><li>一个 Java 源文件可以定义多个 class。</li><li>编译之后，一个 class 就会对应生成一个 class 字节码文件。</li><li>如果一个类是 public，类名必须要和源文件名保持一致。</li><li>public 类可以没有，如果有的话也只能有一个。</li><li>每个类中都可以编写入口 main 方法。在实际开发中，入口一般只有一个。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">X</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;X执行了，这个 Java 源文件名为 X.java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、Java标识符命名规范"><a href="#五、Java标识符命名规范" class="headerlink" title="五、Java标识符命名规范"></a>五、Java标识符命名规范</h2><p>遵循驼峰式命名方法。   </p><ul><li><strong>类名、接口名：</strong> 首字母大写吗，后面每个单词首字母大写。 <code>StudentService</code>    </li><li><strong>变量名、方法名：</strong> 首字母小写，后面每个单词首字母大写。 <code>productPrice</code>    </li><li><strong>常量名：</strong> 全部大写，每个单词之间采用”_”分隔。 <code>LOGIN_SUCCESS</code>    </li><li><strong>包名：</strong> 全部小写。 <code>com.camellia.javase.extends</code></li></ul><h2 id="六、Java中的加号运算符"><a href="#六、Java中的加号运算符" class="headerlink" title="六、Java中的加号运算符"></a>六、Java中的加号运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PlusTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> b=<span class="number">20</span>;</span><br><span class="line">        String str=<span class="string">&quot;10&quot;</span>;</span><br><span class="line">        <span class="comment">// 字符串拼接</span></span><br><span class="line">        System.out.println(str + b); <span class="comment">// 1020;</span></span><br><span class="line">        </span><br><span class="line">        str=<span class="string">&quot;30&quot;</span>;</span><br><span class="line">        <span class="comment">// 当一个表达式中出现多个+，若没有（），遵循从左到右。</span></span><br><span class="line">        System.out.println(a + b + str); <span class="comment">// 3030;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加了（）优先级比较高。</span></span><br><span class="line">        System.out.println(a+(b+str)); <span class="comment">// 102030</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、变量的分类"><a href="#七、变量的分类" class="headerlink" title="七、变量的分类"></a>七、变量的分类</h2><ul><li><p><strong>局部变量（Local Variables）：</strong><br>在方法、代码块或构造方法中声明的变量称为局部变量。局部变量只在其声明的范围内可见，超出该范围就无法访问。局部变量的生命周期仅在其声明的代码块、方法或构造方法执行期间。当代码块或方法执行完毕时，局部变量将被销毁。    </p></li><li><p><strong>成员变量（Instance Variables）：</strong><br>在类中声明的变量，但在方法之外，类的任何地方都可以访问，称为成员变量或实例变量。每个对象都有一份成员变量的副本，它们属于对象的状态。成员变量的生命周期与对象的生命周期相同。它们随着对象的创建而创建，随着对象的销毁而销毁。    </p></li><li><p><strong>静态变量（Static Variables）：</strong><br>使用 static 关键字声明的成员变量称为静态变量。静态变量属于类而不是对象，在类加载时初始化，并且所有对象共享同一份静态变量。静态变量的生命周期与类的生命周期相同。它们在类加载时初始化，随着类的卸载而销毁。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 变量可以根据定义/声明的位置来进行分类，可以分为两大类：</span></span><br><span class="line"><span class="comment">        1、局部变量</span></span><br><span class="line"><span class="comment">        2、成员变量</span></span><br><span class="line"><span class="comment">          - 静态变量</span></span><br><span class="line"><span class="comment">         </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> - 实例变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarClassify</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 凡是在方法体中定义的变量，一定是局部变量。</span></span><br><span class="line">        <span class="comment">// 局部变量只在当前方法体中有效。</span></span><br><span class="line">        <span class="type">int</span> a=<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在类中定义的变量叫做成员变量。</span></span><br><span class="line">    <span class="comment">// 实例变量</span></span><br><span class="line">    <span class="type">int</span> b=<span class="number">200</span>;</span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> c=<span class="number">300</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><blockquote><p>Java 是一种混合型语言，既有编译阶段也有解释阶段。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
